// Generated from grammar/SolidityParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var SolidityParserListener = require('./SolidityParserListener').SolidityParserListener;
var grammarFileName = "SolidityParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00ab\u04de\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u00c0\n\u0002",
    "\f\u0002\u000e\u0002\u00c3\u000b\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0003\u0003\u0003\u0006\u0003\u00c9\n\u0003\r\u0003\u000e\u0003\u00ca",
    "\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0005\u0004\u00d3\n\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0005\u0004\u00df\n\u0004\u0003\u0004\u0003\u0004\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u00e6\n\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u00ee",
    "\n\u0007\f\u0007\u000e\u0007\u00f1\u000b\u0007\u0003\u0007\u0003\u0007",
    "\u0003\b\u0005\b\u00f6\n\b\u0003\b\u0003\b\u0003\b\u0005\b\u00fb\n\b",
    "\u0003\b\u0003\b\u0007\b\u00ff\n\b\f\b\u000e\b\u0102\u000b\b\u0003\b",
    "\u0003\b\u0003\t\u0003\t\u0003\t\u0005\t\u0109\n\t\u0003\t\u0003\t\u0007",
    "\t\u010d\n\t\f\t\u000e\t\u0110\u000b\t\u0003\t\u0003\t\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0007\n\u0118\n\n\f\n\u000e\n\u011b\u000b\n\u0003",
    "\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b",
    "\u0123\n\u000b\f\u000b\u000e\u000b\u0126\u000b\u000b\u0003\f\u0003\f",
    "\u0005\f\u012a\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0138\n\r\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0007\u000f\u0142\n\u000f\f\u000f\u000e\u000f\u0145\u000b",
    "\u000f\u0005\u000f\u0147\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0007\u000f\u014d\n\u000f\f\u000f\u000e\u000f\u0150\u000b",
    "\u000f\u0005\u000f\u0152\n\u000f\u0003\u000f\u0005\u000f\u0155\n\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010",
    "\u015c\n\u0010\f\u0010\u000e\u0010\u015f\u000b\u0010\u0003\u0011\u0003",
    "\u0011\u0005\u0011\u0163\n\u0011\u0003\u0012\u0003\u0012\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0007\u0013\u016a\n\u0013\f\u0013\u000e\u0013",
    "\u016d\u000b\u0013\u0003\u0014\u0003\u0014\u0005\u0014\u0171\n\u0014",
    "\u0003\u0014\u0005\u0014\u0174\n\u0014\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0005\u0015\u0179\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0007\u0015\u0186\n\u0015\f\u0015\u000e\u0015",
    "\u0189\u000b\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u0194",
    "\n\u0017\f\u0017\u000e\u0017\u0197\u000b\u0017\u0003\u0017\u0003\u0017",
    "\u0005\u0017\u019b\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0005\u0018\u01a1\n\u0018\u0003\u0018\u0003\u0018\u0005\u0018",
    "\u01a5\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0007\u0018\u01b8\n\u0018\f\u0018\u000e\u0018\u01bb\u000b\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018",
    "\u01c2\n\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u01c6\n\u0018\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u01cc\n\u0019",
    "\u0003\u0019\u0005\u0019\u01cf\n\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0007\u0019\u01d8",
    "\n\u0019\f\u0019\u000e\u0019\u01db\u000b\u0019\u0003\u0019\u0003\u0019",
    "\u0005\u0019\u01df\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0005\u001a\u01e6\n\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0007\u001a\u01f8\n\u001a\f\u001a\u000e\u001a",
    "\u01fb\u000b\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0204\n\u001a\u0003\u001a",
    "\u0003\u001a\u0005\u001a\u0208\n\u001a\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u021b\n\u001b\f\u001b\u000e",
    "\u001b\u021e\u000b\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0222\n",
    "\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0006\u001c\u0228",
    "\n\u001c\r\u001c\u000e\u001c\u0229\u0003\u001c\u0003\u001c\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u0238\n\u001e\f\u001e",
    "\u000e\u001e\u023b\u000b\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0007 \u0259",
    "\n \f \u000e \u025c\u000b \u0003 \u0003 \u0003 \u0005 \u0261\n \u0003",
    " \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003\"\u0003",
    "\"\u0005\"\u026e\n\"\u0003\"\u0005\"\u0271\n\"\u0003#\u0003#\u0003#",
    "\u0003#\u0003#\u0003#\u0007#\u0279\n#\f#\u000e#\u027c\u000b#\u0005#",
    "\u027e\n#\u0003#\u0003#\u0005#\u0282\n#\u0003#\u0003#\u0003$\u0003$",
    "\u0005$\u0288\n$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0007%\u0290",
    "\n%\f%\u000e%\u0293\u000b%\u0005%\u0295\n%\u0003%\u0003%\u0003%\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0005&\u029f\n&\u0003&\u0003&\u0003\'",
    "\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u02a8\n\'\u0003\'\u0003\'\u0003",
    "\'\u0005\'\u02ad\n\'\u0003\'\u0007\'\u02b0\n\'\f\'\u000e\'\u02b3\u000b",
    "\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0005(\u02c1\n(\u0003)\u0003)\u0003)\u0005)\u02c6\n",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0007",
    ")\u02d1\n)\f)\u000e)\u02d4\u000b)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0005)\u02db\n)\u0003*\u0003*\u0005*\u02df\n*\u0003*\u0003*\u0003",
    "+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u02f6",
    "\n,\u0005,\u02f8\n,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0005",
    ",\u0328\n,\u0003,\u0003,\u0003,\u0003,\u0005,\u032e\n,\u0003,\u0003",
    ",\u0005,\u0332\n,\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u0339\n",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0007,\u0340\n,\f,\u000e,\u0343",
    "\u000b,\u0005,\u0345\n,\u0003,\u0003,\u0003,\u0003,\u0003,\u0007,\u034c",
    "\n,\f,\u000e,\u034f\u000b,\u0003-\u0003-\u0003.\u0003.\u0005.\u0355",
    "\n.\u0003.\u0003.\u0005.\u0359\n.\u0007.\u035b\n.\f.\u000e.\u035e\u000b",
    ".\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0007/\u0366\n/\f/\u000e",
    "/\u0369\u000b/\u0003/\u0003/\u00030\u00030\u00031\u00031\u00031\u0003",
    "1\u00031\u00051\u0374\n1\u00032\u00032\u00033\u00063\u0379\n3\r3\u000e",
    "3\u037a\u00034\u00064\u037e\n4\r4\u000e4\u037f\u00035\u00065\u0383\n",
    "5\r5\u000e5\u0384\u00036\u00036\u00056\u0389\n6\u00037\u00037\u0003",
    "7\u00077\u038e\n7\f7\u000e7\u0391\u000b7\u00037\u00037\u00038\u0003",
    "8\u00038\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00059\u03a5\n9\u0003:\u0003:\u0005:\u03a9",
    "\n:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u03b2\n",
    ";\u0003<\u0003<\u0003<\u0003<\u0005<\u03b8\n<\u0003<\u0003<\u0005<\u03bc",
    "\n<\u0003<\u0005<\u03bf\n<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003?\u0003?\u0003?\u0003@\u0003@\u0003@\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0005A\u03df\nA\u0003A\u0003A\u0006A\u03e3",
    "\nA\rA\u000eA\u03e4\u0003B\u0003B\u0005B\u03e9\nB\u0003B\u0003B\u0003",
    "B\u0003B\u0005B\u03ef\nB\u0003B\u0003B\u0003C\u0003C\u0005C\u03f5\n",
    "C\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003F\u0003F\u0005F\u0405\nF\u0003F\u0003F\u0007F\u0409",
    "\nF\fF\u000eF\u040c\u000bF\u0003F\u0003F\u0003G\u0003G\u0003G\u0007",
    "G\u0413\nG\fG\u000eG\u0416\u000bG\u0003H\u0003H\u0007H\u041a\nH\fH\u000e",
    "H\u041d\u000bH\u0003H\u0003H\u0003H\u0003H\u0005H\u0423\nH\u0007H\u0425",
    "\nH\fH\u000eH\u0428\u000bH\u0003H\u0003H\u0003I\u0003I\u0003I\u0005",
    "I\u042f\nI\u0003I\u0003I\u0003I\u0003I\u0005I\u0435\nI\u0003I\u0003",
    "I\u0003J\u0003J\u0003J\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003L\u0003L\u0005L\u0445\nL\u0003M\u0003M\u0003M\u0003M\u0003M\u0003",
    "M\u0003M\u0003M\u0003M\u0003M\u0003M\u0005M\u0452\nM\u0003N\u0003N\u0007",
    "N\u0456\nN\fN\u000eN\u0459\u000bN\u0003N\u0003N\u0003O\u0003O\u0003",
    "O\u0003O\u0005O\u0461\nO\u0003O\u0003O\u0003O\u0003O\u0007O\u0467\n",
    "O\fO\u000eO\u046a\u000bO\u0003O\u0003O\u0005O\u046e\nO\u0005O\u0470",
    "\nO\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0006P\u0479\n",
    "P\rP\u000eP\u047a\u0003P\u0003P\u0003P\u0005P\u0480\nP\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003S\u0003",
    "S\u0003S\u0003S\u0003T\u0003T\u0003T\u0006T\u0493\nT\rT\u000eT\u0494",
    "\u0003T\u0003T\u0005T\u0499\nT\u0003T\u0003T\u0005T\u049d\nT\u0003U",
    "\u0003U\u0003U\u0003U\u0003U\u0003U\u0007U\u04a5\nU\fU\u000eU\u04a8",
    "\u000bU\u0005U\u04aa\nU\u0003U\u0003U\u0003U\u0003U\u0003U\u0007U\u04b1",
    "\nU\fU\u000eU\u04b4\u000bU\u0005U\u04b6\nU\u0003U\u0003U\u0003V\u0003",
    "V\u0003V\u0007V\u04bd\nV\fV\u000eV\u04c0\u000bV\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0007W\u04c7\nW\fW\u000eW\u04ca\u000bW\u0005W\u04cc",
    "\nW\u0003W\u0003W\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005",
    "Y\u04d7\nY\u0003Z\u0003Z\u0003Z\u0005Z\u04dc\nZ\u0003Z\u0003\u0124\u0004",
    "LV[\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u0002\u0013\u0005\u0002\u001b\u001b))34\u0005\u00022255DD\u0005",
    "\u0002\r\r--::\u0005\u0002\u0013\u0013iitw\u0003\u0002jl\u0003\u0002",
    "hi\u0003\u0002eg\u0003\u0002ps\u0003\u0002no\u0003\u0002vw\u0003\u0002",
    "S^\u0005\u0002\u0018\u0019\u001f\u001f\u0080\u0080\u0004\u0002\u001d",
    "\u001d==\u0003\u0002z{\u0003\u0002~\u007f\u0004\u0002\u0096\u0096\u009f",
    "\u009f\u0004\u0002\u008d\u008d\u0094\u0094\u0002\u056a\u0002\u00c1\u0003",
    "\u0002\u0002\u0002\u0004\u00c6\u0003\u0002\u0002\u0002\u0006\u00ce\u0003",
    "\u0002\u0002\u0002\b\u00e2\u0003\u0002\u0002\u0002\n\u00e7\u0003\u0002",
    "\u0002\u0002\f\u00e9\u0003\u0002\u0002\u0002\u000e\u00f5\u0003\u0002",
    "\u0002\u0002\u0010\u0105\u0003\u0002\u0002\u0002\u0012\u0113\u0003\u0002",
    "\u0002\u0002\u0014\u011e\u0003\u0002\u0002\u0002\u0016\u0127\u0003\u0002",
    "\u0002\u0002\u0018\u0137\u0003\u0002\u0002\u0002\u001a\u0139\u0003\u0002",
    "\u0002\u0002\u001c\u013d\u0003\u0002\u0002\u0002\u001e\u0158\u0003\u0002",
    "\u0002\u0002 \u0160\u0003\u0002\u0002\u0002\"\u0164\u0003\u0002\u0002",
    "\u0002$\u0166\u0003\u0002\u0002\u0002&\u016e\u0003\u0002\u0002\u0002",
    "(\u0175\u0003\u0002\u0002\u0002*\u018c\u0003\u0002\u0002\u0002,\u018e",
    "\u0003\u0002\u0002\u0002.\u019c\u0003\u0002\u0002\u00020\u01c7\u0003",
    "\u0002\u0002\u00022\u01e0\u0003\u0002\u0002\u00024\u0209\u0003\u0002",
    "\u0002\u00026\u0223\u0003\u0002\u0002\u00028\u022d\u0003\u0002\u0002",
    "\u0002:\u0231\u0003\u0002\u0002\u0002<\u023e\u0003\u0002\u0002\u0002",
    ">\u0244\u0003\u0002\u0002\u0002@\u0264\u0003\u0002\u0002\u0002B\u026b",
    "\u0003\u0002\u0002\u0002D\u0272\u0003\u0002\u0002\u0002F\u0285\u0003",
    "\u0002\u0002\u0002H\u0289\u0003\u0002\u0002\u0002J\u0299\u0003\u0002",
    "\u0002\u0002L\u02a7\u0003\u0002\u0002\u0002N\u02c0\u0003\u0002\u0002",
    "\u0002P\u02c2\u0003\u0002\u0002\u0002R\u02dc\u0003\u0002\u0002\u0002",
    "T\u02e2\u0003\u0002\u0002\u0002V\u02f7\u0003\u0002\u0002\u0002X\u0350",
    "\u0003\u0002\u0002\u0002Z\u0352\u0003\u0002\u0002\u0002\\\u0361\u0003",
    "\u0002\u0002\u0002^\u036c\u0003\u0002\u0002\u0002`\u0373\u0003\u0002",
    "\u0002\u0002b\u0375\u0003\u0002\u0002\u0002d\u0378\u0003\u0002\u0002",
    "\u0002f\u037d\u0003\u0002\u0002\u0002h\u0382\u0003\u0002\u0002\u0002",
    "j\u0386\u0003\u0002\u0002\u0002l\u038a\u0003\u0002\u0002\u0002n\u0394",
    "\u0003\u0002\u0002\u0002p\u03a4\u0003\u0002\u0002\u0002r\u03a8\u0003",
    "\u0002\u0002\u0002t\u03aa\u0003\u0002\u0002\u0002v\u03b3\u0003\u0002",
    "\u0002\u0002x\u03c3\u0003\u0002\u0002\u0002z\u03c9\u0003\u0002\u0002",
    "\u0002|\u03d1\u0003\u0002\u0002\u0002~\u03d4\u0003\u0002\u0002\u0002",
    "\u0080\u03d7\u0003\u0002\u0002\u0002\u0082\u03e6\u0003\u0002\u0002\u0002",
    "\u0084\u03f2\u0003\u0002\u0002\u0002\u0086\u03f8\u0003\u0002\u0002\u0002",
    "\u0088\u03fd\u0003\u0002\u0002\u0002\u008a\u0402\u0003\u0002\u0002\u0002",
    "\u008c\u040f\u0003\u0002\u0002\u0002\u008e\u0417\u0003\u0002\u0002\u0002",
    "\u0090\u0434\u0003\u0002\u0002\u0002\u0092\u0438\u0003\u0002\u0002\u0002",
    "\u0094\u043b\u0003\u0002\u0002\u0002\u0096\u0444\u0003\u0002\u0002\u0002",
    "\u0098\u0451\u0003\u0002\u0002\u0002\u009a\u0453\u0003\u0002\u0002\u0002",
    "\u009c\u046f\u0003\u0002\u0002\u0002\u009e\u047f\u0003\u0002\u0002\u0002",
    "\u00a0\u0481\u0003\u0002\u0002\u0002\u00a2\u0485\u0003\u0002\u0002\u0002",
    "\u00a4\u048b\u0003\u0002\u0002\u0002\u00a6\u048f\u0003\u0002\u0002\u0002",
    "\u00a8\u049e\u0003\u0002\u0002\u0002\u00aa\u04b9\u0003\u0002\u0002\u0002",
    "\u00ac\u04c1\u0003\u0002\u0002\u0002\u00ae\u04cf\u0003\u0002\u0002\u0002",
    "\u00b0\u04d6\u0003\u0002\u0002\u0002\u00b2\u04db\u0003\u0002\u0002\u0002",
    "\u00b4\u00c0\u0005\u0004\u0003\u0002\u00b5\u00c0\u0005\u0006\u0004\u0002",
    "\u00b6\u00c0\u0005\u000e\b\u0002\u00b7\u00c0\u0005\u0010\t\u0002\u00b8",
    "\u00c0\u0005\u0012\n\u0002\u00b9\u00c0\u0005.\u0018\u0002\u00ba\u00c0",
    "\u0005@!\u0002\u00bb\u00c0\u00056\u001c\u0002\u00bc\u00c0\u0005:\u001e",
    "\u0002\u00bd\u00c0\u0005<\u001f\u0002\u00be\u00c0\u0005H%\u0002\u00bf",
    "\u00b4\u0003\u0002\u0002\u0002\u00bf\u00b5\u0003\u0002\u0002\u0002\u00bf",
    "\u00b6\u0003\u0002\u0002\u0002\u00bf\u00b7\u0003\u0002\u0002\u0002\u00bf",
    "\u00b8\u0003\u0002\u0002\u0002\u00bf\u00b9\u0003\u0002\u0002\u0002\u00bf",
    "\u00ba\u0003\u0002\u0002\u0002\u00bf\u00bb\u0003\u0002\u0002\u0002\u00bf",
    "\u00bc\u0003\u0002\u0002\u0002\u00bf\u00bd\u0003\u0002\u0002\u0002\u00bf",
    "\u00be\u0003\u0002\u0002\u0002\u00c0\u00c3\u0003\u0002\u0002\u0002\u00c1",
    "\u00bf\u0003\u0002\u0002\u0002\u00c1\u00c2\u0003\u0002\u0002\u0002\u00c2",
    "\u00c4\u0003\u0002\u0002\u0002\u00c3\u00c1\u0003\u0002\u0002\u0002\u00c4",
    "\u00c5\u0007\u0002\u0002\u0003\u00c5\u0003\u0003\u0002\u0002\u0002\u00c6",
    "\u00c8\u0007\u0004\u0002\u0002\u00c7\u00c9\u0007\u00a7\u0002\u0002\u00c8",
    "\u00c7\u0003\u0002\u0002\u0002\u00c9\u00ca\u0003\u0002\u0002\u0002\u00ca",
    "\u00c8\u0003\u0002\u0002\u0002\u00ca\u00cb\u0003\u0002\u0002\u0002\u00cb",
    "\u00cc\u0003\u0002\u0002\u0002\u00cc\u00cd\u0007\u00a8\u0002\u0002\u00cd",
    "\u0005\u0003\u0002\u0002\u0002\u00ce\u00de\u0007&\u0002\u0002\u00cf",
    "\u00d2\u0005\n\u0006\u0002\u00d0\u00d1\u0007\b\u0002\u0002\u00d1\u00d3",
    "\u0005^0\u0002\u00d2\u00d0\u0003\u0002\u0002\u0002\u00d2\u00d3\u0003",
    "\u0002\u0002\u0002\u00d3\u00df\u0003\u0002\u0002\u0002\u00d4\u00d5\u0005",
    "\f\u0007\u0002\u00d5\u00d6\u0007\u001f\u0002\u0002\u00d6\u00d7\u0005",
    "\n\u0006\u0002\u00d7\u00df\u0003\u0002\u0002\u0002\u00d8\u00d9\u0007",
    "j\u0002\u0002\u00d9\u00da\u0007\b\u0002\u0002\u00da\u00db\u0005^0\u0002",
    "\u00db\u00dc\u0007\u001f\u0002\u0002\u00dc\u00dd\u0005\n\u0006\u0002",
    "\u00dd\u00df\u0003\u0002\u0002\u0002\u00de\u00cf\u0003\u0002\u0002\u0002",
    "\u00de\u00d4\u0003\u0002\u0002\u0002\u00de\u00d8\u0003\u0002\u0002\u0002",
    "\u00df\u00e0\u0003\u0002\u0002\u0002\u00e0\u00e1\u0007N\u0002\u0002",
    "\u00e1\u0007\u0003\u0002\u0002\u0002\u00e2\u00e5\u0005^0\u0002\u00e3",
    "\u00e4\u0007\b\u0002\u0002\u00e4\u00e6\u0005^0\u0002\u00e5\u00e3\u0003",
    "\u0002\u0002\u0002\u00e5\u00e6\u0003\u0002\u0002\u0002\u00e6\t\u0003",
    "\u0002\u0002\u0002\u00e7\u00e8\u0007z\u0002\u0002\u00e8\u000b\u0003",
    "\u0002\u0002\u0002\u00e9\u00ea\u0007K\u0002\u0002\u00ea\u00ef\u0005",
    "\b\u0005\u0002\u00eb\u00ec\u0007_\u0002\u0002\u00ec\u00ee\u0005\b\u0005",
    "\u0002\u00ed\u00eb\u0003\u0002\u0002\u0002\u00ee\u00f1\u0003\u0002\u0002",
    "\u0002\u00ef\u00ed\u0003\u0002\u0002\u0002\u00ef\u00f0\u0003\u0002\u0002",
    "\u0002\u00f0\u00f2\u0003\u0002\u0002\u0002\u00f1\u00ef\u0003\u0002\u0002",
    "\u0002\u00f2\u00f3\u0007L\u0002\u0002\u00f3\r\u0003\u0002\u0002\u0002",
    "\u00f4\u00f6\u0007\u0005\u0002\u0002\u00f5\u00f4\u0003\u0002\u0002\u0002",
    "\u00f5\u00f6\u0003\u0002\u0002\u0002\u00f6\u00f7\u0003\u0002\u0002\u0002",
    "\u00f7\u00f8\u0007\u0012\u0002\u0002\u00f8\u00fa\u0005^0\u0002\u00f9",
    "\u00fb\u0005\u0014\u000b\u0002\u00fa\u00f9\u0003\u0002\u0002\u0002\u00fa",
    "\u00fb\u0003\u0002\u0002\u0002\u00fb\u00fc\u0003\u0002\u0002\u0002\u00fc",
    "\u0100\u0007K\u0002\u0002\u00fd\u00ff\u0005\u0018\r\u0002\u00fe\u00fd",
    "\u0003\u0002\u0002\u0002\u00ff\u0102\u0003\u0002\u0002\u0002\u0100\u00fe",
    "\u0003\u0002\u0002\u0002\u0100\u0101\u0003\u0002\u0002\u0002\u0101\u0103",
    "\u0003\u0002\u0002\u0002\u0102\u0100\u0003\u0002\u0002\u0002\u0103\u0104",
    "\u0007L\u0002\u0002\u0104\u000f\u0003\u0002\u0002\u0002\u0105\u0106",
    "\u0007(\u0002\u0002\u0106\u0108\u0005^0\u0002\u0107\u0109\u0005\u0014",
    "\u000b\u0002\u0108\u0107\u0003\u0002\u0002\u0002\u0108\u0109\u0003\u0002",
    "\u0002\u0002\u0109\u010a\u0003\u0002\u0002\u0002\u010a\u010e\u0007K",
    "\u0002\u0002\u010b\u010d\u0005\u0018\r\u0002\u010c\u010b\u0003\u0002",
    "\u0002\u0002\u010d\u0110\u0003\u0002\u0002\u0002\u010e\u010c\u0003\u0002",
    "\u0002\u0002\u010e\u010f\u0003\u0002\u0002\u0002\u010f\u0111\u0003\u0002",
    "\u0002\u0002\u0110\u010e\u0003\u0002\u0002\u0002\u0111\u0112\u0007L",
    "\u0002\u0002\u0112\u0011\u0003\u0002\u0002\u0002\u0113\u0114\u0007+",
    "\u0002\u0002\u0114\u0115\u0005^0\u0002\u0115\u0119\u0007K\u0002\u0002",
    "\u0116\u0118\u0005\u0018\r\u0002\u0117\u0116\u0003\u0002\u0002\u0002",
    "\u0118\u011b\u0003\u0002\u0002\u0002\u0119\u0117\u0003\u0002\u0002\u0002",
    "\u0119\u011a\u0003\u0002\u0002\u0002\u011a\u011c\u0003\u0002\u0002\u0002",
    "\u011b\u0119\u0003\u0002\u0002\u0002\u011c\u011d\u0007L\u0002\u0002",
    "\u011d\u0013\u0003\u0002\u0002\u0002\u011e\u011f\u0007*\u0002\u0002",
    "\u011f\u0124\u0005\u0016\f\u0002\u0120\u0121\u0007_\u0002\u0002\u0121",
    "\u0123\u0005\u0016\f\u0002\u0122\u0120\u0003\u0002\u0002\u0002\u0123",
    "\u0126\u0003\u0002\u0002\u0002\u0124\u0125\u0003\u0002\u0002\u0002\u0124",
    "\u0122\u0003\u0002\u0002\u0002\u0125\u0015\u0003\u0002\u0002\u0002\u0126",
    "\u0124\u0003\u0002\u0002\u0002\u0127\u0129\u0005\u001e\u0010\u0002\u0128",
    "\u012a\u0005\u001c\u000f\u0002\u0129\u0128\u0003\u0002\u0002\u0002\u0129",
    "\u012a\u0003\u0002\u0002\u0002\u012a\u0017\u0003\u0002\u0002\u0002\u012b",
    "\u0138\u0005(\u0015\u0002\u012c\u0138\u0005.\u0018\u0002\u012d\u0138",
    "\u00050\u0019\u0002\u012e\u0138\u00052\u001a\u0002\u012f\u0138\u0005",
    "4\u001b\u0002\u0130\u0138\u00056\u001c\u0002\u0131\u0138\u0005:\u001e",
    "\u0002\u0132\u0138\u0005<\u001f\u0002\u0133\u0138\u0005> \u0002\u0134",
    "\u0138\u0005D#\u0002\u0135\u0138\u0005H%\u0002\u0136\u0138\u0005J&\u0002",
    "\u0137\u012b\u0003\u0002\u0002\u0002\u0137\u012c\u0003\u0002\u0002\u0002",
    "\u0137\u012d\u0003\u0002\u0002\u0002\u0137\u012e\u0003\u0002\u0002\u0002",
    "\u0137\u012f\u0003\u0002\u0002\u0002\u0137\u0130\u0003\u0002\u0002\u0002",
    "\u0137\u0131\u0003\u0002\u0002\u0002\u0137\u0132\u0003\u0002\u0002\u0002",
    "\u0137\u0133\u0003\u0002\u0002\u0002\u0137\u0134\u0003\u0002\u0002\u0002",
    "\u0137\u0135\u0003\u0002\u0002\u0002\u0137\u0136\u0003\u0002\u0002\u0002",
    "\u0138\u0019\u0003\u0002\u0002\u0002\u0139\u013a\u0005^0\u0002\u013a",
    "\u013b\u0007M\u0002\u0002\u013b\u013c\u0005V,\u0002\u013c\u001b\u0003",
    "\u0002\u0002\u0002\u013d\u0154\u0007G\u0002\u0002\u013e\u0143\u0005",
    "V,\u0002\u013f\u0140\u0007_\u0002\u0002\u0140\u0142\u0005V,\u0002\u0141",
    "\u013f\u0003\u0002\u0002\u0002\u0142\u0145\u0003\u0002\u0002\u0002\u0143",
    "\u0141\u0003\u0002\u0002\u0002\u0143\u0144\u0003\u0002\u0002\u0002\u0144",
    "\u0147\u0003\u0002\u0002\u0002\u0145\u0143\u0003\u0002\u0002\u0002\u0146",
    "\u013e\u0003\u0002\u0002\u0002\u0146\u0147\u0003\u0002\u0002\u0002\u0147",
    "\u0155\u0003\u0002\u0002\u0002\u0148\u0151\u0007K\u0002\u0002\u0149",
    "\u014e\u0005\u001a\u000e\u0002\u014a\u014b\u0007_\u0002\u0002\u014b",
    "\u014d\u0005\u001a\u000e\u0002\u014c\u014a\u0003\u0002\u0002\u0002\u014d",
    "\u0150\u0003\u0002\u0002\u0002\u014e\u014c\u0003\u0002\u0002\u0002\u014e",
    "\u014f\u0003\u0002\u0002\u0002\u014f\u0152\u0003\u0002\u0002\u0002\u0150",
    "\u014e\u0003\u0002\u0002\u0002\u0151\u0149\u0003\u0002\u0002\u0002\u0151",
    "\u0152\u0003\u0002\u0002\u0002\u0152\u0153\u0003\u0002\u0002\u0002\u0153",
    "\u0155\u0007L\u0002\u0002\u0154\u0146\u0003\u0002\u0002\u0002\u0154",
    "\u0148\u0003\u0002\u0002\u0002\u0155\u0156\u0003\u0002\u0002\u0002\u0156",
    "\u0157\u0007H\u0002\u0002\u0157\u001d\u0003\u0002\u0002\u0002\u0158",
    "\u015d\u0005^0\u0002\u0159\u015a\u0007O\u0002\u0002\u015a\u015c\u0005",
    "^0\u0002\u015b\u0159\u0003\u0002\u0002\u0002\u015c\u015f\u0003\u0002",
    "\u0002\u0002\u015d\u015b\u0003\u0002\u0002\u0002\u015d\u015e\u0003\u0002",
    "\u0002\u0002\u015e\u001f\u0003\u0002\u0002\u0002\u015f\u015d\u0003\u0002",
    "\u0002\u0002\u0160\u0162\u0005\u001e\u0010\u0002\u0161\u0163\u0005\u001c",
    "\u000f\u0002\u0162\u0161\u0003\u0002\u0002\u0002\u0162\u0163\u0003\u0002",
    "\u0002\u0002\u0163!\u0003\u0002\u0002\u0002\u0164\u0165\t\u0002\u0002",
    "\u0002\u0165#\u0003\u0002\u0002\u0002\u0166\u016b\u0005&\u0014\u0002",
    "\u0167\u0168\u0007_\u0002\u0002\u0168\u016a\u0005&\u0014\u0002\u0169",
    "\u0167\u0003\u0002\u0002\u0002\u016a\u016d\u0003\u0002\u0002\u0002\u016b",
    "\u0169\u0003\u0002\u0002\u0002\u016b\u016c\u0003\u0002\u0002\u0002\u016c",
    "%\u0003\u0002\u0002\u0002\u016d\u016b\u0003\u0002\u0002\u0002\u016e",
    "\u0170\u0005L\'\u0002\u016f\u0171\u0005T+\u0002\u0170\u016f\u0003\u0002",
    "\u0002\u0002\u0170\u0171\u0003\u0002\u0002\u0002\u0171\u0173\u0003\u0002",
    "\u0002\u0002\u0172\u0174\u0005^0\u0002\u0173\u0172\u0003\u0002\u0002",
    "\u0002\u0173\u0174\u0003\u0002\u0002\u0002\u0174\'\u0003\u0002\u0002",
    "\u0002\u0175\u0176\u0007\u0010\u0002\u0002\u0176\u0178\u0007G\u0002",
    "\u0002\u0177\u0179\u0005$\u0013\u0002\u0178\u0177\u0003\u0002\u0002",
    "\u0002\u0178\u0179\u0003\u0002\u0002\u0002\u0179\u017a\u0003\u0002\u0002",
    "\u0002\u017a\u0187\u0007H\u0002\u0002\u017b\u0186\u0005 \u0011\u0002",
    "\u017c\u017d\u0006\u0015\u0002\u0003\u017d\u017e\u00072\u0002\u0002",
    "\u017e\u0186\b\u0015\u0001\u0002\u017f\u0180\u0006\u0015\u0003\u0003",
    "\u0180\u0181\u0007)\u0002\u0002\u0181\u0186\b\u0015\u0001\u0002\u0182",
    "\u0183\u0006\u0015\u0004\u0003\u0183\u0184\u00074\u0002\u0002\u0184",
    "\u0186\b\u0015\u0001\u0002\u0185\u017b\u0003\u0002\u0002\u0002\u0185",
    "\u017c\u0003\u0002\u0002\u0002\u0185\u017f\u0003\u0002\u0002\u0002\u0185",
    "\u0182\u0003\u0002\u0002\u0002\u0186\u0189\u0003\u0002\u0002\u0002\u0187",
    "\u0185\u0003\u0002\u0002\u0002\u0187\u0188\u0003\u0002\u0002\u0002\u0188",
    "\u018a\u0003\u0002\u0002\u0002\u0189\u0187\u0003\u0002\u0002\u0002\u018a",
    "\u018b\u0005l7\u0002\u018b)\u0003\u0002\u0002\u0002\u018c\u018d\t\u0003",
    "\u0002\u0002\u018d+\u0003\u0002\u0002\u0002\u018e\u019a\u00071\u0002",
    "\u0002\u018f\u0190\u0007G\u0002\u0002\u0190\u0195\u0005\u001e\u0010",
    "\u0002\u0191\u0192\u0007_\u0002\u0002\u0192\u0194\u0005\u001e\u0010",
    "\u0002\u0193\u0191\u0003\u0002\u0002\u0002\u0194\u0197\u0003\u0002\u0002",
    "\u0002\u0195\u0193\u0003\u0002\u0002\u0002\u0195\u0196\u0003\u0002\u0002",
    "\u0002\u0196\u0198\u0003\u0002\u0002\u0002\u0197\u0195\u0003\u0002\u0002",
    "\u0002\u0198\u0199\u0007H\u0002\u0002\u0199\u019b\u0003\u0002\u0002",
    "\u0002\u019a\u018f\u0003\u0002\u0002\u0002\u019a\u019b\u0003\u0002\u0002",
    "\u0002\u019b-\u0003\u0002\u0002\u0002\u019c\u01a0\u0007\"\u0002\u0002",
    "\u019d\u01a1\u0005^0\u0002\u019e\u01a1\u0007\u001c\u0002\u0002\u019f",
    "\u01a1\u00076\u0002\u0002\u01a0\u019d\u0003\u0002\u0002\u0002\u01a0",
    "\u019e\u0003\u0002\u0002\u0002\u01a0\u019f\u0003\u0002\u0002\u0002\u01a1",
    "\u01a2\u0003\u0002\u0002\u0002\u01a2\u01a4\u0007G\u0002\u0002\u01a3",
    "\u01a5\u0005$\u0013\u0002\u01a4\u01a3\u0003\u0002\u0002\u0002\u01a4",
    "\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a6\u0003\u0002\u0002\u0002\u01a6",
    "\u01b9\u0007H\u0002\u0002\u01a7\u01a8\u0006\u0018\u0005\u0003\u01a8",
    "\u01a9\u0005\"\u0012\u0002\u01a9\u01aa\b\u0018\u0001\u0002\u01aa\u01b8",
    "\u0003\u0002\u0002\u0002\u01ab\u01ac\u0006\u0018\u0006\u0003\u01ac\u01ad",
    "\u0005*\u0016\u0002\u01ad\u01ae\b\u0018\u0001\u0002\u01ae\u01b8\u0003",
    "\u0002\u0002\u0002\u01af\u01b8\u0005 \u0011\u0002\u01b0\u01b1\u0006",
    "\u0018\u0007\u0003\u01b1\u01b2\u0007E\u0002\u0002\u01b2\u01b8\b\u0018",
    "\u0001\u0002\u01b3\u01b4\u0006\u0018\b\u0003\u01b4\u01b5\u0005,\u0017",
    "\u0002\u01b5\u01b6\b\u0018\u0001\u0002\u01b6\u01b8\u0003\u0002\u0002",
    "\u0002\u01b7\u01a7\u0003\u0002\u0002\u0002\u01b7\u01ab\u0003\u0002\u0002",
    "\u0002\u01b7\u01af\u0003\u0002\u0002\u0002\u01b7\u01b0\u0003\u0002\u0002",
    "\u0002\u01b7\u01b3\u0003\u0002\u0002\u0002\u01b8\u01bb\u0003\u0002\u0002",
    "\u0002\u01b9\u01b7\u0003\u0002\u0002\u0002\u01b9\u01ba\u0003\u0002\u0002",
    "\u0002\u01ba\u01c1\u0003\u0002\u0002\u0002\u01bb\u01b9\u0003\u0002\u0002",
    "\u0002\u01bc\u01bd\u00078\u0002\u0002\u01bd\u01be\u0007G\u0002\u0002",
    "\u01be\u01bf\u0005$\u0013\u0002\u01bf\u01c0\u0007H\u0002\u0002\u01c0",
    "\u01c2\u0003\u0002\u0002\u0002\u01c1\u01bc\u0003\u0002\u0002\u0002\u01c1",
    "\u01c2\u0003\u0002\u0002\u0002\u01c2\u01c5\u0003\u0002\u0002\u0002\u01c3",
    "\u01c6\u0007N\u0002\u0002\u01c4\u01c6\u0005l7\u0002\u01c5\u01c3\u0003",
    "\u0002\u0002\u0002\u01c5\u01c4\u0003\u0002\u0002\u0002\u01c6/\u0003",
    "\u0002\u0002\u0002\u01c7\u01c8\u0007.\u0002\u0002\u01c8\u01ce\u0005",
    "^0\u0002\u01c9\u01cb\u0007G\u0002\u0002\u01ca\u01cc\u0005$\u0013\u0002",
    "\u01cb\u01ca\u0003\u0002\u0002\u0002\u01cb\u01cc\u0003\u0002\u0002\u0002",
    "\u01cc\u01cd\u0003\u0002\u0002\u0002\u01cd\u01cf\u0007H\u0002\u0002",
    "\u01ce\u01c9\u0003\u0002\u0002\u0002\u01ce\u01cf\u0003\u0002\u0002\u0002",
    "\u01cf\u01d9\u0003\u0002\u0002\u0002\u01d0\u01d1\u0006\u0019\t\u0003",
    "\u01d1\u01d2\u0007E\u0002\u0002\u01d2\u01d8\b\u0019\u0001\u0002\u01d3",
    "\u01d4\u0006\u0019\n\u0003\u01d4\u01d5\u0005,\u0017\u0002\u01d5\u01d6",
    "\b\u0019\u0001\u0002\u01d6\u01d8\u0003\u0002\u0002\u0002\u01d7\u01d0",
    "\u0003\u0002\u0002\u0002\u01d7\u01d3\u0003\u0002\u0002\u0002\u01d8\u01db",
    "\u0003\u0002\u0002\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01d9\u01da",
    "\u0003\u0002\u0002\u0002\u01da\u01de\u0003\u0002\u0002\u0002\u01db\u01d9",
    "\u0003\u0002\u0002\u0002\u01dc\u01df\u0007N\u0002\u0002\u01dd\u01df",
    "\u0005l7\u0002\u01de\u01dc\u0003\u0002\u0002\u0002\u01de\u01dd\u0003",
    "\u0002\u0002\u0002\u01df1\u0003\u0002\u0002\u0002\u01e0\u01e1\u0007",
    "\u001c\u0002\u0002\u01e1\u01e5\u0007G\u0002\u0002\u01e2\u01e3\u0005",
    "$\u0013\u0002\u01e3\u01e4\b\u001a\u0001\u0002\u01e4\u01e6\u0003\u0002",
    "\u0002\u0002\u01e5\u01e2\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002",
    "\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002\u0002\u01e7\u01f9\u0007H",
    "\u0002\u0002\u01e8\u01e9\u0006\u001a\u000b\u0003\u01e9\u01ea\u0007\u001b",
    "\u0002\u0002\u01ea\u01f8\b\u001a\u0001\u0002\u01eb\u01ec\u0006\u001a",
    "\f\u0003\u01ec\u01ed\u0005*\u0016\u0002\u01ed\u01ee\b\u001a\u0001\u0002",
    "\u01ee\u01f8\u0003\u0002\u0002\u0002\u01ef\u01f8\u0005 \u0011\u0002",
    "\u01f0\u01f1\u0006\u001a\r\u0003\u01f1\u01f2\u0007E\u0002\u0002\u01f2",
    "\u01f8\b\u001a\u0001\u0002\u01f3\u01f4\u0006\u001a\u000e\u0003\u01f4",
    "\u01f5\u0005,\u0017\u0002\u01f5\u01f6\b\u001a\u0001\u0002\u01f6\u01f8",
    "\u0003\u0002\u0002\u0002\u01f7\u01e8\u0003\u0002\u0002\u0002\u01f7\u01eb",
    "\u0003\u0002\u0002\u0002\u01f7\u01ef\u0003\u0002\u0002\u0002\u01f7\u01f0",
    "\u0003\u0002\u0002\u0002\u01f7\u01f3\u0003\u0002\u0002\u0002\u01f8\u01fb",
    "\u0003\u0002\u0002\u0002\u01f9\u01f7\u0003\u0002\u0002\u0002\u01f9\u01fa",
    "\u0003\u0002\u0002\u0002\u01fa\u0203\u0003\u0002\u0002\u0002\u01fb\u01f9",
    "\u0003\u0002\u0002\u0002\u01fc\u01fd\u0006\u001a\u000f\u0003\u01fd\u01fe",
    "\u00078\u0002\u0002\u01fe\u01ff\u0007G\u0002\u0002\u01ff\u0200\u0005",
    "$\u0013\u0002\u0200\u0201\u0007H\u0002\u0002\u0201\u0204\u0003\u0002",
    "\u0002\u0002\u0202\u0204\u0006\u001a\u0010\u0003\u0203\u01fc\u0003\u0002",
    "\u0002\u0002\u0203\u0202\u0003\u0002\u0002\u0002\u0204\u0207\u0003\u0002",
    "\u0002\u0002\u0205\u0208\u0007N\u0002\u0002\u0206\u0208\u0005l7\u0002",
    "\u0207\u0205\u0003\u0002\u0002\u0002\u0207\u0206\u0003\u0002\u0002\u0002",
    "\u02083\u0003\u0002\u0002\u0002\u0209\u020a\u00076\u0002\u0002\u020a",
    "\u020b\u0007G\u0002\u0002\u020b\u021c\u0007H\u0002\u0002\u020c\u020d",
    "\u0006\u001b\u0011\u0003\u020d\u020e\u0007\u001b\u0002\u0002\u020e\u021b",
    "\b\u001b\u0001\u0002\u020f\u0210\u0006\u001b\u0012\u0003\u0210\u0211",
    "\u00072\u0002\u0002\u0211\u021b\b\u001b\u0001\u0002\u0212\u021b\u0005",
    " \u0011\u0002\u0213\u0214\u0006\u001b\u0013\u0003\u0214\u0215\u0007",
    "E\u0002\u0002\u0215\u021b\b\u001b\u0001\u0002\u0216\u0217\u0006\u001b",
    "\u0014\u0003\u0217\u0218\u0005,\u0017\u0002\u0218\u0219\b\u001b\u0001",
    "\u0002\u0219\u021b\u0003\u0002\u0002\u0002\u021a\u020c\u0003\u0002\u0002",
    "\u0002\u021a\u020f\u0003\u0002\u0002\u0002\u021a\u0212\u0003\u0002\u0002",
    "\u0002\u021a\u0213\u0003\u0002\u0002\u0002\u021a\u0216\u0003\u0002\u0002",
    "\u0002\u021b\u021e\u0003\u0002\u0002\u0002\u021c\u021a\u0003\u0002\u0002",
    "\u0002\u021c\u021d\u0003\u0002\u0002\u0002\u021d\u0221\u0003\u0002\u0002",
    "\u0002\u021e\u021c\u0003\u0002\u0002\u0002\u021f\u0222\u0007N\u0002",
    "\u0002\u0220\u0222\u0005l7\u0002\u0221\u021f\u0003\u0002\u0002\u0002",
    "\u0221\u0220\u0003\u0002\u0002\u0002\u02225\u0003\u0002\u0002\u0002",
    "\u0223\u0224\u0007<\u0002\u0002\u0224\u0225\u0005^0\u0002\u0225\u0227",
    "\u0007K\u0002\u0002\u0226\u0228\u00058\u001d\u0002\u0227\u0226\u0003",
    "\u0002\u0002\u0002\u0228\u0229\u0003\u0002\u0002\u0002\u0229\u0227\u0003",
    "\u0002\u0002\u0002\u0229\u022a\u0003\u0002\u0002\u0002\u022a\u022b\u0003",
    "\u0002\u0002\u0002\u022b\u022c\u0007L\u0002\u0002\u022c7\u0003\u0002",
    "\u0002\u0002\u022d\u022e\u0005L\'\u0002\u022e\u022f\u0005^0\u0002\u022f",
    "\u0230\u0007N\u0002\u0002\u02309\u0003\u0002\u0002\u0002\u0231\u0232",
    "\u0007\u0017\u0002\u0002\u0232\u0233\u0005^0\u0002\u0233\u0234\u0007",
    "K\u0002\u0002\u0234\u0239\u0005^0\u0002\u0235\u0236\u0007_\u0002\u0002",
    "\u0236\u0238\u0005^0\u0002\u0237\u0235\u0003\u0002\u0002\u0002\u0238",
    "\u023b\u0003\u0002\u0002\u0002\u0239\u0237\u0003\u0002\u0002\u0002\u0239",
    "\u023a\u0003\u0002\u0002\u0002\u023a\u023c\u0003\u0002\u0002\u0002\u023b",
    "\u0239\u0003\u0002\u0002\u0002\u023c\u023d\u0007L\u0002\u0002\u023d",
    ";\u0003\u0002\u0002\u0002\u023e\u023f\u0007?\u0002\u0002\u023f\u0240",
    "\u0005^0\u0002\u0240\u0241\u0007*\u0002\u0002\u0241\u0242\u0005N(\u0002",
    "\u0242\u0243\u0007N\u0002\u0002\u0243=\u0003\u0002\u0002\u0002\u0244",
    "\u025a\u0005L\'\u0002\u0245\u0246\u0006 \u0015\u0003\u0246\u0247\u0007",
    "4\u0002\u0002\u0247\u0259\b \u0001\u0002\u0248\u0249\u0006 \u0016\u0003",
    "\u0249\u024a\u00073\u0002\u0002\u024a\u0259\b \u0001\u0002\u024b\u024c",
    "\u0006 \u0017\u0003\u024c\u024d\u0007)\u0002\u0002\u024d\u0259\b \u0001",
    "\u0002\u024e\u024f\u0006 \u0018\u0003\u024f\u0250\u0007\u000f\u0002",
    "\u0002\u0250\u0259\b \u0001\u0002\u0251\u0252\u0006 \u0019\u0003\u0252",
    "\u0253\u0005,\u0017\u0002\u0253\u0254\b \u0001\u0002\u0254\u0259\u0003",
    "\u0002\u0002\u0002\u0255\u0256\u0006 \u001a\u0003\u0256\u0257\u0007",
    "%\u0002\u0002\u0257\u0259\b \u0001\u0002\u0258\u0245\u0003\u0002\u0002",
    "\u0002\u0258\u0248\u0003\u0002\u0002\u0002\u0258\u024b\u0003\u0002\u0002",
    "\u0002\u0258\u024e\u0003\u0002\u0002\u0002\u0258\u0251\u0003\u0002\u0002",
    "\u0002\u0258\u0255\u0003\u0002\u0002\u0002\u0259\u025c\u0003\u0002\u0002",
    "\u0002\u025a\u0258\u0003\u0002\u0002\u0002\u025a\u025b\u0003\u0002\u0002",
    "\u0002\u025b\u025d\u0003\u0002\u0002\u0002\u025c\u025a\u0003\u0002\u0002",
    "\u0002\u025d\u0260\u0005^0\u0002\u025e\u025f\u0007S\u0002\u0002\u025f",
    "\u0261\u0005V,\u0002\u0260\u025e\u0003\u0002\u0002\u0002\u0260\u0261",
    "\u0003\u0002\u0002\u0002\u0261\u0262\u0003\u0002\u0002\u0002\u0262\u0263",
    "\u0007N\u0002\u0002\u0263?\u0003\u0002\u0002\u0002\u0264\u0265\u0005",
    "L\'\u0002\u0265\u0266\u0007\u000f\u0002\u0002\u0266\u0267\u0005^0\u0002",
    "\u0267\u0268\u0007S\u0002\u0002\u0268\u0269\u0005V,\u0002\u0269\u026a",
    "\u0007N\u0002\u0002\u026aA\u0003\u0002\u0002\u0002\u026b\u026d\u0005",
    "L\'\u0002\u026c\u026e\u0007\'\u0002\u0002\u026d\u026c\u0003\u0002\u0002",
    "\u0002\u026d\u026e\u0003\u0002\u0002\u0002\u026e\u0270\u0003\u0002\u0002",
    "\u0002\u026f\u0271\u0005^0\u0002\u0270\u026f\u0003\u0002\u0002\u0002",
    "\u0270\u0271\u0003\u0002\u0002\u0002\u0271C\u0003\u0002\u0002\u0002",
    "\u0272\u0273\u0007\u001a\u0002\u0002\u0273\u0274\u0005^0\u0002\u0274",
    "\u027d\u0007G\u0002\u0002\u0275\u027a\u0005B\"\u0002\u0276\u0277\u0007",
    "_\u0002\u0002\u0277\u0279\u0005B\"\u0002\u0278\u0276\u0003\u0002\u0002",
    "\u0002\u0279\u027c\u0003\u0002\u0002\u0002\u027a\u0278\u0003\u0002\u0002",
    "\u0002\u027a\u027b\u0003\u0002\u0002\u0002\u027b\u027e\u0003\u0002\u0002",
    "\u0002\u027c\u027a\u0003\u0002\u0002\u0002\u027d\u0275\u0003\u0002\u0002",
    "\u0002\u027d\u027e\u0003\u0002\u0002\u0002\u027e\u027f\u0003\u0002\u0002",
    "\u0002\u027f\u0281\u0007H\u0002\u0002\u0280\u0282\u0007\u0006\u0002",
    "\u0002\u0281\u0280\u0003\u0002\u0002\u0002\u0281\u0282\u0003\u0002\u0002",
    "\u0002\u0282\u0283\u0003\u0002\u0002\u0002\u0283\u0284\u0007N\u0002",
    "\u0002\u0284E\u0003\u0002\u0002\u0002\u0285\u0287\u0005L\'\u0002\u0286",
    "\u0288\u0005^0\u0002\u0287\u0286\u0003\u0002\u0002\u0002\u0287\u0288",
    "\u0003\u0002\u0002\u0002\u0288G\u0003\u0002\u0002\u0002\u0289\u028a",
    "\u0007\u0018\u0002\u0002\u028a\u028b\u0005^0\u0002\u028b\u0294\u0007",
    "G\u0002\u0002\u028c\u0291\u0005F$\u0002\u028d\u028e\u0007_\u0002\u0002",
    "\u028e\u0290\u0005F$\u0002\u028f\u028d\u0003\u0002\u0002\u0002\u0290",
    "\u0293\u0003\u0002\u0002\u0002\u0291\u028f\u0003\u0002\u0002\u0002\u0291",
    "\u0292\u0003\u0002\u0002\u0002\u0292\u0295\u0003\u0002\u0002\u0002\u0293",
    "\u0291\u0003\u0002\u0002\u0002\u0294\u028c\u0003\u0002\u0002\u0002\u0294",
    "\u0295\u0003\u0002\u0002\u0002\u0295\u0296\u0003\u0002\u0002\u0002\u0296",
    "\u0297\u0007H\u0002\u0002\u0297\u0298\u0007N\u0002\u0002\u0298I\u0003",
    "\u0002\u0002\u0002\u0299\u029a\u0007C\u0002\u0002\u029a\u029b\u0005",
    "\u001e\u0010\u0002\u029b\u029e\u0007!\u0002\u0002\u029c\u029f\u0007",
    "j\u0002\u0002\u029d\u029f\u0005L\'\u0002\u029e\u029c\u0003\u0002\u0002",
    "\u0002\u029e\u029d\u0003\u0002\u0002\u0002\u029f\u02a0\u0003\u0002\u0002",
    "\u0002\u02a0\u02a1\u0007N\u0002\u0002\u02a1K\u0003\u0002\u0002\u0002",
    "\u02a2\u02a3\b\'\u0001\u0002\u02a3\u02a8\u0005N(\u0002\u02a4\u02a8\u0005",
    "P)\u0002\u02a5\u02a8\u0005\u0094K\u0002\u02a6\u02a8\u0005\u001e\u0010",
    "\u0002\u02a7\u02a2\u0003\u0002\u0002\u0002\u02a7\u02a4\u0003\u0002\u0002",
    "\u0002\u02a7\u02a5\u0003\u0002\u0002\u0002\u02a7\u02a6\u0003\u0002\u0002",
    "\u0002\u02a8\u02b1\u0003\u0002\u0002\u0002\u02a9\u02aa\f\u0003\u0002",
    "\u0002\u02aa\u02ac\u0007I\u0002\u0002\u02ab\u02ad\u0005V,\u0002\u02ac",
    "\u02ab\u0003\u0002\u0002\u0002\u02ac\u02ad\u0003\u0002\u0002\u0002\u02ad",
    "\u02ae\u0003\u0002\u0002\u0002\u02ae\u02b0\u0007J\u0002\u0002\u02af",
    "\u02a9\u0003\u0002\u0002\u0002\u02b0\u02b3\u0003\u0002\u0002\u0002\u02b1",
    "\u02af\u0003\u0002\u0002\u0002\u02b1\u02b2\u0003\u0002\u0002\u0002\u02b2",
    "M\u0003\u0002\u0002\u0002\u02b3\u02b1\u0003\u0002\u0002\u0002\u02b4",
    "\u02c1\u0007\u0007\u0002\u0002\u02b5\u02b6\u0006(\u001c\u0003\u02b6",
    "\u02b7\u0007\u0007\u0002\u0002\u02b7\u02c1\u00072\u0002\u0002\u02b8",
    "\u02c1\u0007\n\u0002\u0002\u02b9\u02c1\u0007;\u0002\u0002\u02ba\u02c1",
    "\u0007\f\u0002\u0002\u02bb\u02c1\u00079\u0002\u0002\u02bc\u02c1\u0007",
    "B\u0002\u0002\u02bd\u02c1\u0007 \u0002\u0002\u02be\u02c1\u0007\u001e",
    "\u0002\u0002\u02bf\u02c1\u0007@\u0002\u0002\u02c0\u02b4\u0003\u0002",
    "\u0002\u0002\u02c0\u02b5\u0003\u0002\u0002\u0002\u02c0\u02b8\u0003\u0002",
    "\u0002\u0002\u02c0\u02b9\u0003\u0002\u0002\u0002\u02c0\u02ba\u0003\u0002",
    "\u0002\u0002\u02c0\u02bb\u0003\u0002\u0002\u0002\u02c0\u02bc\u0003\u0002",
    "\u0002\u0002\u02c0\u02bd\u0003\u0002\u0002\u0002\u02c0\u02be\u0003\u0002",
    "\u0002\u0002\u02c0\u02bf\u0003\u0002\u0002\u0002\u02c1O\u0003\u0002",
    "\u0002\u0002\u02c2\u02c3\u0007\"\u0002\u0002\u02c3\u02c5\u0007G\u0002",
    "\u0002\u02c4\u02c6\u0005$\u0013\u0002\u02c5\u02c4\u0003\u0002\u0002",
    "\u0002\u02c5\u02c6\u0003\u0002\u0002\u0002\u02c6\u02c7\u0003\u0002\u0002",
    "\u0002\u02c7\u02d2\u0007H\u0002\u0002\u02c8\u02c9\u0006)\u001d\u0003",
    "\u02c9\u02ca\u0005\"\u0012\u0002\u02ca\u02cb\b)\u0001\u0002\u02cb\u02d1",
    "\u0003\u0002\u0002\u0002\u02cc\u02cd\u0006)\u001e\u0003\u02cd\u02ce",
    "\u0005*\u0016\u0002\u02ce\u02cf\b)\u0001\u0002\u02cf\u02d1\u0003\u0002",
    "\u0002\u0002\u02d0\u02c8\u0003\u0002\u0002\u0002\u02d0\u02cc\u0003\u0002",
    "\u0002\u0002\u02d1\u02d4\u0003\u0002\u0002\u0002\u02d2\u02d0\u0003\u0002",
    "\u0002\u0002\u02d2\u02d3\u0003\u0002\u0002\u0002\u02d3\u02da\u0003\u0002",
    "\u0002\u0002\u02d4\u02d2\u0003\u0002\u0002\u0002\u02d5\u02d6\u00078",
    "\u0002\u0002\u02d6\u02d7\u0007G\u0002\u0002\u02d7\u02d8\u0005$\u0013",
    "\u0002\u02d8\u02d9\u0007H\u0002\u0002\u02d9\u02db\u0003\u0002\u0002",
    "\u0002\u02da\u02d5\u0003\u0002\u0002\u0002\u02da\u02db\u0003\u0002\u0002",
    "\u0002\u02dbQ\u0003\u0002\u0002\u0002\u02dc\u02de\u0005L\'\u0002\u02dd",
    "\u02df\u0005T+\u0002\u02de\u02dd\u0003\u0002\u0002\u0002\u02de\u02df",
    "\u0003\u0002\u0002\u0002\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0\u02e1",
    "\u0005^0\u0002\u02e1S\u0003\u0002\u0002\u0002\u02e2\u02e3\t\u0004\u0002",
    "\u0002\u02e3U\u0003\u0002\u0002\u0002\u02e4\u02e5\b,\u0001\u0002\u02e5",
    "\u02e6\u00072\u0002\u0002\u02e6\u02f8\u0005\u001c\u000f\u0002\u02e7",
    "\u02e8\u0007?\u0002\u0002\u02e8\u02e9\u0007G\u0002\u0002\u02e9\u02ea",
    "\u0005L\'\u0002\u02ea\u02eb\u0007H\u0002\u0002\u02eb\u02f8\u0003\u0002",
    "\u0002\u0002\u02ec\u02ed\t\u0005\u0002\u0002\u02ed\u02f8\u0005V,\u0015",
    "\u02ee\u02ef\u0007/\u0002\u0002\u02ef\u02f8\u0005L\'\u0002\u02f0\u02f8",
    "\u0005Z.\u0002\u02f1\u02f8\u0005\\/\u0002\u02f2\u02f6\u0005^0\u0002",
    "\u02f3\u02f6\u0005`1\u0002\u02f4\u02f6\u0005N(\u0002\u02f5\u02f2\u0003",
    "\u0002\u0002\u0002\u02f5\u02f3\u0003\u0002\u0002\u0002\u02f5\u02f4\u0003",
    "\u0002\u0002\u0002\u02f6\u02f8\u0003\u0002\u0002\u0002\u02f7\u02e4\u0003",
    "\u0002\u0002\u0002\u02f7\u02e7\u0003\u0002\u0002\u0002\u02f7\u02ec\u0003",
    "\u0002\u0002\u0002\u02f7\u02ee\u0003\u0002\u0002\u0002\u02f7\u02f0\u0003",
    "\u0002\u0002\u0002\u02f7\u02f1\u0003\u0002\u0002\u0002\u02f7\u02f5\u0003",
    "\u0002\u0002\u0002\u02f8\u034d\u0003\u0002\u0002\u0002\u02f9\u02fa\f",
    "\u0013\u0002\u0002\u02fa\u02fb\u0007m\u0002\u0002\u02fb\u034c\u0005",
    "V,\u0013\u02fc\u02fd\f\u0012\u0002\u0002\u02fd\u02fe\t\u0006\u0002\u0002",
    "\u02fe\u034c\u0005V,\u0013\u02ff\u0300\f\u0011\u0002\u0002\u0300\u0301",
    "\t\u0007\u0002\u0002\u0301\u034c\u0005V,\u0012\u0302\u0303\f\u0010\u0002",
    "\u0002\u0303\u0304\t\b\u0002\u0002\u0304\u034c\u0005V,\u0011\u0305\u0306",
    "\f\u000f\u0002\u0002\u0306\u0307\u0007d\u0002\u0002\u0307\u034c\u0005",
    "V,\u0010\u0308\u0309\f\u000e\u0002\u0002\u0309\u030a\u0007c\u0002\u0002",
    "\u030a\u034c\u0005V,\u000f\u030b\u030c\f\r\u0002\u0002\u030c\u030d\u0007",
    "b\u0002\u0002\u030d\u034c\u0005V,\u000e\u030e\u030f\f\f\u0002\u0002",
    "\u030f\u0310\t\t\u0002\u0002\u0310\u034c\u0005V,\r\u0311\u0312\f\u000b",
    "\u0002\u0002\u0312\u0313\t\n\u0002\u0002\u0313\u034c\u0005V,\f\u0314",
    "\u0315\f\n\u0002\u0002\u0315\u0316\u0007a\u0002\u0002\u0316\u034c\u0005",
    "V,\u000b\u0317\u0318\f\t\u0002\u0002\u0318\u0319\u0007`\u0002\u0002",
    "\u0319\u034c\u0005V,\n\u031a\u031b\f\b\u0002\u0002\u031b\u031c\u0007",
    "P\u0002\u0002\u031c\u031d\u0005V,\u0002\u031d\u031e\u0007M\u0002\u0002",
    "\u031e\u031f\u0005V,\b\u031f\u034c\u0003\u0002\u0002\u0002\u0320\u0321",
    "\f\u0007\u0002\u0002\u0321\u0322\u0005X-\u0002\u0322\u0323\u0005V,\u0007",
    "\u0323\u034c\u0003\u0002\u0002\u0002\u0324\u0325\f\u001c\u0002\u0002",
    "\u0325\u0327\u0007I\u0002\u0002\u0326\u0328\u0005V,\u0002\u0327\u0326",
    "\u0003\u0002\u0002\u0002\u0327\u0328\u0003\u0002\u0002\u0002\u0328\u0329",
    "\u0003\u0002\u0002\u0002\u0329\u034c\u0007J\u0002\u0002\u032a\u032b",
    "\f\u001b\u0002\u0002\u032b\u032d\u0007I\u0002\u0002\u032c\u032e\u0005",
    "V,\u0002\u032d\u032c\u0003\u0002\u0002\u0002\u032d\u032e\u0003\u0002",
    "\u0002\u0002\u032e\u032f\u0003\u0002\u0002\u0002\u032f\u0331\u0007M",
    "\u0002\u0002\u0330\u0332\u0005V,\u0002\u0331\u0330\u0003\u0002\u0002",
    "\u0002\u0331\u0332\u0003\u0002\u0002\u0002\u0332\u0333\u0003\u0002\u0002",
    "\u0002\u0333\u034c\u0007J\u0002\u0002\u0334\u0335\f\u001a\u0002\u0002",
    "\u0335\u0338\u0007O\u0002\u0002\u0336\u0339\u0005^0\u0002\u0337\u0339",
    "\u0007\u0007\u0002\u0002\u0338\u0336\u0003\u0002\u0002\u0002\u0338\u0337",
    "\u0003\u0002\u0002\u0002\u0339\u034c\u0003\u0002\u0002\u0002\u033a\u033b",
    "\f\u0019\u0002\u0002\u033b\u0344\u0007K\u0002\u0002\u033c\u0341\u0005",
    "\u001a\u000e\u0002\u033d\u033e\u0007_\u0002\u0002\u033e\u0340\u0005",
    "\u001a\u000e\u0002\u033f\u033d\u0003\u0002\u0002\u0002\u0340\u0343\u0003",
    "\u0002\u0002\u0002\u0341\u033f\u0003\u0002\u0002\u0002\u0341\u0342\u0003",
    "\u0002\u0002\u0002\u0342\u0345\u0003\u0002\u0002\u0002\u0343\u0341\u0003",
    "\u0002\u0002\u0002\u0344\u033c\u0003\u0002\u0002\u0002\u0344\u0345\u0003",
    "\u0002\u0002\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u034c\u0007",
    "L\u0002\u0002\u0347\u0348\f\u0018\u0002\u0002\u0348\u034c\u0005\u001c",
    "\u000f\u0002\u0349\u034a\f\u0014\u0002\u0002\u034a\u034c\t\u000b\u0002",
    "\u0002\u034b\u02f9\u0003\u0002\u0002\u0002\u034b\u02fc\u0003\u0002\u0002",
    "\u0002\u034b\u02ff\u0003\u0002\u0002\u0002\u034b\u0302\u0003\u0002\u0002",
    "\u0002\u034b\u0305\u0003\u0002\u0002\u0002\u034b\u0308\u0003\u0002\u0002",
    "\u0002\u034b\u030b\u0003\u0002\u0002\u0002\u034b\u030e\u0003\u0002\u0002",
    "\u0002\u034b\u0311\u0003\u0002\u0002\u0002\u034b\u0314\u0003\u0002\u0002",
    "\u0002\u034b\u0317\u0003\u0002\u0002\u0002\u034b\u031a\u0003\u0002\u0002",
    "\u0002\u034b\u0320\u0003\u0002\u0002\u0002\u034b\u0324\u0003\u0002\u0002",
    "\u0002\u034b\u032a\u0003\u0002\u0002\u0002\u034b\u0334\u0003\u0002\u0002",
    "\u0002\u034b\u033a\u0003\u0002\u0002\u0002\u034b\u0347\u0003\u0002\u0002",
    "\u0002\u034b\u0349\u0003\u0002\u0002\u0002\u034c\u034f\u0003\u0002\u0002",
    "\u0002\u034d\u034b\u0003\u0002\u0002\u0002\u034d\u034e\u0003\u0002\u0002",
    "\u0002\u034eW\u0003\u0002\u0002\u0002\u034f\u034d\u0003\u0002\u0002",
    "\u0002\u0350\u0351\t\f\u0002\u0002\u0351Y\u0003\u0002\u0002\u0002\u0352",
    "\u0354\u0007G\u0002\u0002\u0353\u0355\u0005V,\u0002\u0354\u0353\u0003",
    "\u0002\u0002\u0002\u0354\u0355\u0003\u0002\u0002\u0002\u0355\u035c\u0003",
    "\u0002\u0002\u0002\u0356\u0358\u0007_\u0002\u0002\u0357\u0359\u0005",
    "V,\u0002\u0358\u0357\u0003\u0002\u0002\u0002\u0358\u0359\u0003\u0002",
    "\u0002\u0002\u0359\u035b\u0003\u0002\u0002\u0002\u035a\u0356\u0003\u0002",
    "\u0002\u0002\u035b\u035e\u0003\u0002\u0002\u0002\u035c\u035a\u0003\u0002",
    "\u0002\u0002\u035c\u035d\u0003\u0002\u0002\u0002\u035d\u035f\u0003\u0002",
    "\u0002\u0002\u035e\u035c\u0003\u0002\u0002\u0002\u035f\u0360\u0007H",
    "\u0002\u0002\u0360[\u0003\u0002\u0002\u0002\u0361\u0362\u0007I\u0002",
    "\u0002\u0362\u0367\u0005V,\u0002\u0363\u0364\u0007_\u0002\u0002\u0364",
    "\u0366\u0005V,\u0002\u0365\u0363\u0003\u0002\u0002\u0002\u0366\u0369",
    "\u0003\u0002\u0002\u0002\u0367\u0365\u0003\u0002\u0002\u0002\u0367\u0368",
    "\u0003\u0002\u0002\u0002\u0368\u036a\u0003\u0002\u0002\u0002\u0369\u0367",
    "\u0003\u0002\u0002\u0002\u036a\u036b\u0007J\u0002\u0002\u036b]\u0003",
    "\u0002\u0002\u0002\u036c\u036d\t\r\u0002\u0002\u036d_\u0003\u0002\u0002",
    "\u0002\u036e\u0374\u0005d3\u0002\u036f\u0374\u0005j6\u0002\u0370\u0374",
    "\u0005b2\u0002\u0371\u0374\u0005f4\u0002\u0372\u0374\u0005h5\u0002\u0373",
    "\u036e\u0003\u0002\u0002\u0002\u0373\u036f\u0003\u0002\u0002\u0002\u0373",
    "\u0370\u0003\u0002\u0002\u0002\u0373\u0371\u0003\u0002\u0002\u0002\u0373",
    "\u0372\u0003\u0002\u0002\u0002\u0374a\u0003\u0002\u0002\u0002\u0375",
    "\u0376\t\u000e\u0002\u0002\u0376c\u0003\u0002\u0002\u0002\u0377\u0379",
    "\t\u000f\u0002\u0002\u0378\u0377\u0003\u0002\u0002\u0002\u0379\u037a",
    "\u0003\u0002\u0002\u0002\u037a\u0378\u0003\u0002\u0002\u0002\u037a\u037b",
    "\u0003\u0002\u0002\u0002\u037be\u0003\u0002\u0002\u0002\u037c\u037e",
    "\u0007}\u0002\u0002\u037d\u037c\u0003\u0002\u0002\u0002\u037e\u037f",
    "\u0003\u0002\u0002\u0002\u037f\u037d\u0003\u0002\u0002\u0002\u037f\u0380",
    "\u0003\u0002\u0002\u0002\u0380g\u0003\u0002\u0002\u0002\u0381\u0383",
    "\u0007|\u0002\u0002\u0382\u0381\u0003\u0002\u0002\u0002\u0383\u0384",
    "\u0003\u0002\u0002\u0002\u0384\u0382\u0003\u0002\u0002\u0002\u0384\u0385",
    "\u0003\u0002\u0002\u0002\u0385i\u0003\u0002\u0002\u0002\u0386\u0388",
    "\t\u0010\u0002\u0002\u0387\u0389\u00070\u0002\u0002\u0388\u0387\u0003",
    "\u0002\u0002\u0002\u0388\u0389\u0003\u0002\u0002\u0002\u0389k\u0003",
    "\u0002\u0002\u0002\u038a\u038f\u0007K\u0002\u0002\u038b\u038e\u0005",
    "p9\u0002\u038c\u038e\u0005n8\u0002\u038d\u038b\u0003\u0002\u0002\u0002",
    "\u038d\u038c\u0003\u0002\u0002\u0002\u038e\u0391\u0003\u0002\u0002\u0002",
    "\u038f\u038d\u0003\u0002\u0002\u0002\u038f\u0390\u0003\u0002\u0002\u0002",
    "\u0390\u0392\u0003\u0002\u0002\u0002\u0391\u038f\u0003\u0002\u0002\u0002",
    "\u0392\u0393\u0007L\u0002\u0002\u0393m\u0003\u0002\u0002\u0002\u0394",
    "\u0395\u0007A\u0002\u0002\u0395\u0396\u0005l7\u0002\u0396o\u0003\u0002",
    "\u0002\u0002\u0397\u03a5\u0005l7\u0002\u0398\u03a5\u0005r:\u0002\u0399",
    "\u03a5\u0005t;\u0002\u039a\u03a5\u0005v<\u0002\u039b\u03a5\u0005x=\u0002",
    "\u039c\u03a5\u0005z>\u0002\u039d\u03a5\u0005|?\u0002\u039e\u03a5\u0005",
    "~@\u0002\u039f\u03a5\u0005\u0080A\u0002\u03a0\u03a5\u0005\u0084C\u0002",
    "\u03a1\u03a5\u0005\u0086D\u0002\u03a2\u03a5\u0005\u0088E\u0002\u03a3",
    "\u03a5\u0005\u008aF\u0002\u03a4\u0397\u0003\u0002\u0002\u0002\u03a4",
    "\u0398\u0003\u0002\u0002\u0002\u03a4\u0399\u0003\u0002\u0002\u0002\u03a4",
    "\u039a\u0003\u0002\u0002\u0002\u03a4\u039b\u0003\u0002\u0002\u0002\u03a4",
    "\u039c\u0003\u0002\u0002\u0002\u03a4\u039d\u0003\u0002\u0002\u0002\u03a4",
    "\u039e\u0003\u0002\u0002\u0002\u03a4\u039f\u0003\u0002\u0002\u0002\u03a4",
    "\u03a0\u0003\u0002\u0002\u0002\u03a4\u03a1\u0003\u0002\u0002\u0002\u03a4",
    "\u03a2\u0003\u0002\u0002\u0002\u03a4\u03a3\u0003\u0002\u0002\u0002\u03a5",
    "q\u0003\u0002\u0002\u0002\u03a6\u03a9\u0005\u0090I\u0002\u03a7\u03a9",
    "\u0005\u0092J\u0002\u03a8\u03a6\u0003\u0002\u0002\u0002\u03a8\u03a7",
    "\u0003\u0002\u0002\u0002\u03a9s\u0003\u0002\u0002\u0002\u03aa\u03ab",
    "\u0007$\u0002\u0002\u03ab\u03ac\u0007G\u0002\u0002\u03ac\u03ad\u0005",
    "V,\u0002\u03ad\u03ae\u0007H\u0002\u0002\u03ae\u03b1\u0005p9\u0002\u03af",
    "\u03b0\u0007\u0015\u0002\u0002\u03b0\u03b2\u0005p9\u0002\u03b1\u03af",
    "\u0003\u0002\u0002\u0002\u03b1\u03b2\u0003\u0002\u0002\u0002\u03b2u",
    "\u0003\u0002\u0002\u0002\u03b3\u03b4\u0007!\u0002\u0002\u03b4\u03b7",
    "\u0007G\u0002\u0002\u03b5\u03b8\u0005r:\u0002\u03b6\u03b8\u0007N\u0002",
    "\u0002\u03b7\u03b5\u0003\u0002\u0002\u0002\u03b7\u03b6\u0003\u0002\u0002",
    "\u0002\u03b8\u03bb\u0003\u0002\u0002\u0002\u03b9\u03bc\u0005\u0092J",
    "\u0002\u03ba\u03bc\u0007N\u0002\u0002\u03bb\u03b9\u0003\u0002\u0002",
    "\u0002\u03bb\u03ba\u0003\u0002\u0002\u0002\u03bc\u03be\u0003\u0002\u0002",
    "\u0002\u03bd\u03bf\u0005V,\u0002\u03be\u03bd\u0003\u0002\u0002\u0002",
    "\u03be\u03bf\u0003\u0002\u0002\u0002\u03bf\u03c0\u0003\u0002\u0002\u0002",
    "\u03c0\u03c1\u0007H\u0002\u0002\u03c1\u03c2\u0005p9\u0002\u03c2w\u0003",
    "\u0002\u0002\u0002\u03c3\u03c4\u0007F\u0002\u0002\u03c4\u03c5\u0007",
    "G\u0002\u0002\u03c5\u03c6\u0005V,\u0002\u03c6\u03c7\u0007H\u0002\u0002",
    "\u03c7\u03c8\u0005p9\u0002\u03c8y\u0003\u0002\u0002\u0002\u03c9\u03ca",
    "\u0007\u0014\u0002\u0002\u03ca\u03cb\u0005p9\u0002\u03cb\u03cc\u0007",
    "F\u0002\u0002\u03cc\u03cd\u0007G\u0002\u0002\u03cd\u03ce\u0005V,\u0002",
    "\u03ce\u03cf\u0007H\u0002\u0002\u03cf\u03d0\u0007N\u0002\u0002\u03d0",
    "{\u0003\u0002\u0002\u0002\u03d1\u03d2\u0007\u0011\u0002\u0002\u03d2",
    "\u03d3\u0007N\u0002\u0002\u03d3}\u0003\u0002\u0002\u0002\u03d4\u03d5",
    "\u0007\u000b\u0002\u0002\u03d5\u03d6\u0007N\u0002\u0002\u03d6\u007f",
    "\u0003\u0002\u0002\u0002\u03d7\u03d8\u0007>\u0002\u0002\u03d8\u03de",
    "\u0005V,\u0002\u03d9\u03da\u00078\u0002\u0002\u03da\u03db\u0007G\u0002",
    "\u0002\u03db\u03dc\u0005$\u0013\u0002\u03dc\u03dd\u0007H\u0002\u0002",
    "\u03dd\u03df\u0003\u0002\u0002\u0002\u03de\u03d9\u0003\u0002\u0002\u0002",
    "\u03de\u03df\u0003\u0002\u0002\u0002\u03df\u03e0\u0003\u0002\u0002\u0002",
    "\u03e0\u03e2\u0005l7\u0002\u03e1\u03e3\u0005\u0082B\u0002\u03e2\u03e1",
    "\u0003\u0002\u0002\u0002\u03e3\u03e4\u0003\u0002\u0002\u0002\u03e4\u03e2",
    "\u0003\u0002\u0002\u0002\u03e4\u03e5\u0003\u0002\u0002\u0002\u03e5\u0081",
    "\u0003\u0002\u0002\u0002\u03e6\u03ee\u0007\u000e\u0002\u0002\u03e7\u03e9",
    "\u0005^0\u0002\u03e8\u03e7\u0003\u0002\u0002\u0002\u03e8\u03e9\u0003",
    "\u0002\u0002\u0002\u03e9\u03ea\u0003\u0002\u0002\u0002\u03ea\u03eb\u0007",
    "G\u0002\u0002\u03eb\u03ec\u0005$\u0013\u0002\u03ec\u03ed\u0007H\u0002",
    "\u0002\u03ed\u03ef\u0003\u0002\u0002\u0002\u03ee\u03e8\u0003\u0002\u0002",
    "\u0002\u03ee\u03ef\u0003\u0002\u0002\u0002\u03ef\u03f0\u0003\u0002\u0002",
    "\u0002\u03f0\u03f1\u0005l7\u0002\u03f1\u0083\u0003\u0002\u0002\u0002",
    "\u03f2\u03f4\u00077\u0002\u0002\u03f3\u03f5\u0005V,\u0002\u03f4\u03f3",
    "\u0003\u0002\u0002\u0002\u03f4\u03f5\u0003\u0002\u0002\u0002\u03f5\u03f6",
    "\u0003\u0002\u0002\u0002\u03f6\u03f7\u0007N\u0002\u0002\u03f7\u0085",
    "\u0003\u0002\u0002\u0002\u03f8\u03f9\u0007\u0016\u0002\u0002\u03f9\u03fa",
    "\u0005V,\u0002\u03fa\u03fb\u0005\u001c\u000f\u0002\u03fb\u03fc\u0007",
    "N\u0002\u0002\u03fc\u0087\u0003\u0002\u0002\u0002\u03fd\u03fe\u0007",
    "\u0019\u0002\u0002\u03fe\u03ff\u0005V,\u0002\u03ff\u0400\u0005\u001c",
    "\u000f\u0002\u0400\u0401\u0007N\u0002\u0002\u0401\u0089\u0003\u0002",
    "\u0002\u0002\u0402\u0404\u0007\t\u0002\u0002\u0403\u0405\u0007\u0084",
    "\u0002\u0002\u0404\u0403\u0003\u0002\u0002\u0002\u0404\u0405\u0003\u0002",
    "\u0002\u0002\u0405\u0406\u0003\u0002\u0002\u0002\u0406\u040a\u0007\u0085",
    "\u0002\u0002\u0407\u0409\u0005\u0098M\u0002\u0408\u0407\u0003\u0002",
    "\u0002\u0002\u0409\u040c\u0003\u0002\u0002\u0002\u040a\u0408\u0003\u0002",
    "\u0002\u0002\u040a\u040b\u0003\u0002\u0002\u0002\u040b\u040d\u0003\u0002",
    "\u0002\u0002\u040c\u040a\u0003\u0002\u0002\u0002\u040d\u040e\u0007\u0098",
    "\u0002\u0002\u040e\u008b\u0003\u0002\u0002\u0002\u040f\u0414\u0005R",
    "*\u0002\u0410\u0411\u0007_\u0002\u0002\u0411\u0413\u0005R*\u0002\u0412",
    "\u0410\u0003\u0002\u0002\u0002\u0413\u0416\u0003\u0002\u0002\u0002\u0414",
    "\u0412\u0003\u0002\u0002\u0002\u0414\u0415\u0003\u0002\u0002\u0002\u0415",
    "\u008d\u0003\u0002\u0002\u0002\u0416\u0414\u0003\u0002\u0002\u0002\u0417",
    "\u041b\u0007G\u0002\u0002\u0418\u041a\u0007_\u0002\u0002\u0419\u0418",
    "\u0003\u0002\u0002\u0002\u041a\u041d\u0003\u0002\u0002\u0002\u041b\u0419",
    "\u0003\u0002\u0002\u0002\u041b\u041c\u0003\u0002\u0002\u0002\u041c\u041e",
    "\u0003\u0002\u0002\u0002\u041d\u041b\u0003\u0002\u0002\u0002\u041e\u041f",
    "\u0005R*\u0002\u041f\u0426\u0003\u0002\u0002\u0002\u0420\u0422\u0007",
    "_\u0002\u0002\u0421\u0423\u0005R*\u0002\u0422\u0421\u0003\u0002\u0002",
    "\u0002\u0422\u0423\u0003\u0002\u0002\u0002\u0423\u0425\u0003\u0002\u0002",
    "\u0002\u0424\u0420\u0003\u0002\u0002\u0002\u0425\u0428\u0003\u0002\u0002",
    "\u0002\u0426\u0424\u0003\u0002\u0002\u0002\u0426\u0427\u0003\u0002\u0002",
    "\u0002\u0427\u0429\u0003\u0002\u0002\u0002\u0428\u0426\u0003\u0002\u0002",
    "\u0002\u0429\u042a\u0007H\u0002\u0002\u042a\u008f\u0003\u0002\u0002",
    "\u0002\u042b\u042e\u0005R*\u0002\u042c\u042d\u0007S\u0002\u0002\u042d",
    "\u042f\u0005V,\u0002\u042e\u042c\u0003\u0002\u0002\u0002\u042e\u042f",
    "\u0003\u0002\u0002\u0002\u042f\u0435\u0003\u0002\u0002\u0002\u0430\u0431",
    "\u0005\u008eH\u0002\u0431\u0432\u0007S\u0002\u0002\u0432\u0433\u0005",
    "V,\u0002\u0433\u0435\u0003\u0002\u0002\u0002\u0434\u042b\u0003\u0002",
    "\u0002\u0002\u0434\u0430\u0003\u0002\u0002\u0002\u0435\u0436\u0003\u0002",
    "\u0002\u0002\u0436\u0437\u0007N\u0002\u0002\u0437\u0091\u0003\u0002",
    "\u0002\u0002\u0438\u0439\u0005V,\u0002\u0439\u043a\u0007N\u0002\u0002",
    "\u043a\u0093\u0003\u0002\u0002\u0002\u043b\u043c\u0007,\u0002\u0002",
    "\u043c\u043d\u0007G\u0002\u0002\u043d\u043e\u0005\u0096L\u0002\u043e",
    "\u043f\u0007Q\u0002\u0002\u043f\u0440\u0005L\'\u0002\u0440\u0441\u0007",
    "H\u0002\u0002\u0441\u0095\u0003\u0002\u0002\u0002\u0442\u0445\u0005",
    "N(\u0002\u0443\u0445\u0005\u001e\u0010\u0002\u0444\u0442\u0003\u0002",
    "\u0002\u0002\u0444\u0443\u0003\u0002\u0002\u0002\u0445\u0097\u0003\u0002",
    "\u0002\u0002\u0446\u0452\u0005\u009aN\u0002\u0447\u0452\u0005\u009c",
    "O\u0002\u0448\u0452\u0005\u009eP\u0002\u0449\u0452\u0005\u00acW\u0002",
    "\u044a\u0452\u0005\u00a0Q\u0002\u044b\u0452\u0005\u00a2R\u0002\u044c",
    "\u0452\u0005\u00a6T\u0002\u044d\u0452\u0007\u0091\u0002\u0002\u044e",
    "\u0452\u0007\u0089\u0002\u0002\u044f\u0452\u0007\u008b\u0002\u0002\u0450",
    "\u0452\u0005\u00a8U\u0002\u0451\u0446\u0003\u0002\u0002\u0002\u0451",
    "\u0447\u0003\u0002\u0002\u0002\u0451\u0448\u0003\u0002\u0002\u0002\u0451",
    "\u0449\u0003\u0002\u0002\u0002\u0451\u044a\u0003\u0002\u0002\u0002\u0451",
    "\u044b\u0003\u0002\u0002\u0002\u0451\u044c\u0003\u0002\u0002\u0002\u0451",
    "\u044d\u0003\u0002\u0002\u0002\u0451\u044e\u0003\u0002\u0002\u0002\u0451",
    "\u044f\u0003\u0002\u0002\u0002\u0451\u0450\u0003\u0002\u0002\u0002\u0452",
    "\u0099\u0003\u0002\u0002\u0002\u0453\u0457\u0007\u0097\u0002\u0002\u0454",
    "\u0456\u0005\u0098M\u0002\u0455\u0454\u0003\u0002\u0002\u0002\u0456",
    "\u0459\u0003\u0002\u0002\u0002\u0457\u0455\u0003\u0002\u0002\u0002\u0457",
    "\u0458\u0003\u0002\u0002\u0002\u0458\u045a\u0003\u0002\u0002\u0002\u0459",
    "\u0457\u0003\u0002\u0002\u0002\u045a\u045b\u0007\u0098\u0002\u0002\u045b",
    "\u009b\u0003\u0002\u0002\u0002\u045c\u045d\u0007\u0092\u0002\u0002\u045d",
    "\u0460\u0007\u009f\u0002\u0002\u045e\u045f\u0007\u009b\u0002\u0002\u045f",
    "\u0461\u0005\u00b2Z\u0002\u0460\u045e\u0003\u0002\u0002\u0002\u0460",
    "\u0461\u0003\u0002\u0002\u0002\u0461\u0470\u0003\u0002\u0002\u0002\u0462",
    "\u0463\u0007\u0092\u0002\u0002\u0463\u0468\u0007\u009f\u0002\u0002\u0464",
    "\u0465\u0007\u009d\u0002\u0002\u0465\u0467\u0007\u009f\u0002\u0002\u0466",
    "\u0464\u0003\u0002\u0002\u0002\u0467\u046a\u0003\u0002\u0002\u0002\u0468",
    "\u0466\u0003\u0002\u0002\u0002\u0468\u0469\u0003\u0002\u0002\u0002\u0469",
    "\u046d\u0003\u0002\u0002\u0002\u046a\u0468\u0003\u0002\u0002\u0002\u046b",
    "\u046c\u0007\u009b\u0002\u0002\u046c\u046e\u0005\u00acW\u0002\u046d",
    "\u046b\u0003\u0002\u0002\u0002\u046d\u046e\u0003\u0002\u0002\u0002\u046e",
    "\u0470\u0003\u0002\u0002\u0002\u046f\u045c\u0003\u0002\u0002\u0002\u046f",
    "\u0462\u0003\u0002\u0002\u0002\u0470\u009d\u0003\u0002\u0002\u0002\u0471",
    "\u0472\u0005\u00aaV\u0002\u0472\u0473\u0007\u009b\u0002\u0002\u0473",
    "\u0474\u0005\u00b2Z\u0002\u0474\u0480\u0003\u0002\u0002\u0002\u0475",
    "\u0478\u0005\u00aaV\u0002\u0476\u0477\u0007\u009d\u0002\u0002\u0477",
    "\u0479\u0005\u00aaV\u0002\u0478\u0476\u0003\u0002\u0002\u0002\u0479",
    "\u047a\u0003\u0002\u0002\u0002\u047a\u0478\u0003\u0002\u0002\u0002\u047a",
    "\u047b\u0003\u0002\u0002\u0002\u047b\u047c\u0003\u0002\u0002\u0002\u047c",
    "\u047d\u0007\u009b\u0002\u0002\u047d\u047e\u0005\u00acW\u0002\u047e",
    "\u0480\u0003\u0002\u0002\u0002\u047f\u0471\u0003\u0002\u0002\u0002\u047f",
    "\u0475\u0003\u0002\u0002\u0002\u0480\u009f\u0003\u0002\u0002\u0002\u0481",
    "\u0482\u0007\u0090\u0002\u0002\u0482\u0483\u0005\u00b2Z\u0002\u0483",
    "\u0484\u0005\u009aN\u0002\u0484\u00a1\u0003\u0002\u0002\u0002\u0485",
    "\u0486\u0007\u008e\u0002\u0002\u0486\u0487\u0005\u009aN\u0002\u0487",
    "\u0488\u0005\u00b2Z\u0002\u0488\u0489\u0005\u009aN\u0002\u0489\u048a",
    "\u0005\u009aN\u0002\u048a\u00a3\u0003\u0002\u0002\u0002\u048b\u048c",
    "\u0007\u008a\u0002\u0002\u048c\u048d\u0005\u00b0Y\u0002\u048d\u048e",
    "\u0005\u009aN\u0002\u048e\u00a5\u0003\u0002\u0002\u0002\u048f\u0490",
    "\u0007\u0093\u0002\u0002\u0490\u049c\u0005\u00b2Z\u0002\u0491\u0493",
    "\u0005\u00a4S\u0002\u0492\u0491\u0003\u0002\u0002\u0002\u0493\u0494",
    "\u0003\u0002\u0002\u0002\u0494\u0492\u0003\u0002\u0002\u0002\u0494\u0495",
    "\u0003\u0002\u0002\u0002\u0495\u0498\u0003\u0002\u0002\u0002\u0496\u0497",
    "\u0007\u008c\u0002\u0002\u0497\u0499\u0005\u009aN\u0002\u0498\u0496",
    "\u0003\u0002\u0002\u0002\u0498\u0499\u0003\u0002\u0002\u0002\u0499\u049d",
    "\u0003\u0002\u0002\u0002\u049a\u049b\u0007\u008c\u0002\u0002\u049b\u049d",
    "\u0005\u009aN\u0002\u049c\u0492\u0003\u0002\u0002\u0002\u049c\u049a",
    "\u0003\u0002\u0002\u0002\u049d\u00a7\u0003\u0002\u0002\u0002\u049e\u049f",
    "\u0007\u008f\u0002\u0002\u049f\u04a0\u0007\u009f\u0002\u0002\u04a0\u04a9",
    "\u0007\u0099\u0002\u0002\u04a1\u04a6\u0007\u009f\u0002\u0002\u04a2\u04a3",
    "\u0007\u009d\u0002\u0002\u04a3\u04a5\u0007\u009f\u0002\u0002\u04a4\u04a2",
    "\u0003\u0002\u0002\u0002\u04a5\u04a8\u0003\u0002\u0002\u0002\u04a6\u04a4",
    "\u0003\u0002\u0002\u0002\u04a6\u04a7\u0003\u0002\u0002\u0002\u04a7\u04aa",
    "\u0003\u0002\u0002\u0002\u04a8\u04a6\u0003\u0002\u0002\u0002\u04a9\u04a1",
    "\u0003\u0002\u0002\u0002\u04a9\u04aa\u0003\u0002\u0002\u0002\u04aa\u04ab",
    "\u0003\u0002\u0002\u0002\u04ab\u04b5\u0007\u009a\u0002\u0002\u04ac\u04ad",
    "\u0007\u009e\u0002\u0002\u04ad\u04b2\u0007\u009f\u0002\u0002\u04ae\u04af",
    "\u0007\u009d\u0002\u0002\u04af\u04b1\u0007\u009f\u0002\u0002\u04b0\u04ae",
    "\u0003\u0002\u0002\u0002\u04b1\u04b4\u0003\u0002\u0002\u0002\u04b2\u04b0",
    "\u0003\u0002\u0002\u0002\u04b2\u04b3\u0003\u0002\u0002\u0002\u04b3\u04b6",
    "\u0003\u0002\u0002\u0002\u04b4\u04b2\u0003\u0002\u0002\u0002\u04b5\u04ac",
    "\u0003\u0002\u0002\u0002\u04b5\u04b6\u0003\u0002\u0002\u0002\u04b6\u04b7",
    "\u0003\u0002\u0002\u0002\u04b7\u04b8\u0005\u009aN\u0002\u04b8\u00a9",
    "\u0003\u0002\u0002\u0002\u04b9\u04be\u0007\u009f\u0002\u0002\u04ba\u04bb",
    "\u0007\u009c\u0002\u0002\u04bb\u04bd\u0007\u009f\u0002\u0002\u04bc\u04ba",
    "\u0003\u0002\u0002\u0002\u04bd\u04c0\u0003\u0002\u0002\u0002\u04be\u04bc",
    "\u0003\u0002\u0002\u0002\u04be\u04bf\u0003\u0002\u0002\u0002\u04bf\u00ab",
    "\u0003\u0002\u0002\u0002\u04c0\u04be\u0003\u0002\u0002\u0002\u04c1\u04c2",
    "\t\u0011\u0002\u0002\u04c2\u04cb\u0007\u0099\u0002\u0002\u04c3\u04c8",
    "\u0005\u00b2Z\u0002\u04c4\u04c5\u0007\u009d\u0002\u0002\u04c5\u04c7",
    "\u0005\u00b2Z\u0002\u04c6\u04c4\u0003\u0002\u0002\u0002\u04c7\u04ca",
    "\u0003\u0002\u0002\u0002\u04c8\u04c6\u0003\u0002\u0002\u0002\u04c8\u04c9",
    "\u0003\u0002\u0002\u0002\u04c9\u04cc\u0003\u0002\u0002\u0002\u04ca\u04c8",
    "\u0003\u0002\u0002\u0002\u04cb\u04c3\u0003\u0002\u0002\u0002\u04cb\u04cc",
    "\u0003\u0002\u0002\u0002\u04cc\u04cd\u0003\u0002\u0002\u0002\u04cd\u04ce",
    "\u0007\u009a\u0002\u0002\u04ce\u00ad\u0003\u0002\u0002\u0002\u04cf\u04d0",
    "\t\u0012\u0002\u0002\u04d0\u00af\u0003\u0002\u0002\u0002\u04d1\u04d7",
    "\u0007\u00a1\u0002\u0002\u04d2\u04d7\u0007\u00a2\u0002\u0002\u04d3\u04d7",
    "\u0007\u00a0\u0002\u0002\u04d4\u04d7\u0005\u00aeX\u0002\u04d5\u04d7",
    "\u0007\u00a3\u0002\u0002\u04d6\u04d1\u0003\u0002\u0002\u0002\u04d6\u04d2",
    "\u0003\u0002\u0002\u0002\u04d6\u04d3\u0003\u0002\u0002\u0002\u04d6\u04d4",
    "\u0003\u0002\u0002\u0002\u04d6\u04d5\u0003\u0002\u0002\u0002\u04d7\u00b1",
    "\u0003\u0002\u0002\u0002\u04d8\u04dc\u0005\u00aaV\u0002\u04d9\u04dc",
    "\u0005\u00acW\u0002\u04da\u04dc\u0005\u00b0Y\u0002\u04db\u04d8\u0003",
    "\u0002\u0002\u0002\u04db\u04d9\u0003\u0002\u0002\u0002\u04db\u04da\u0003",
    "\u0002\u0002\u0002\u04dc\u00b3\u0003\u0002\u0002\u0002\u0088\u00bf\u00c1",
    "\u00ca\u00d2\u00de\u00e5\u00ef\u00f5\u00fa\u0100\u0108\u010e\u0119\u0124",
    "\u0129\u0137\u0143\u0146\u014e\u0151\u0154\u015d\u0162\u016b\u0170\u0173",
    "\u0178\u0185\u0187\u0195\u019a\u01a0\u01a4\u01b7\u01b9\u01c1\u01c5\u01cb",
    "\u01ce\u01d7\u01d9\u01de\u01e5\u01f7\u01f9\u0203\u0207\u021a\u021c\u0221",
    "\u0229\u0239\u0258\u025a\u0260\u026d\u0270\u027a\u027d\u0281\u0287\u0291",
    "\u0294\u029e\u02a7\u02ac\u02b1\u02c0\u02c5\u02d0\u02d2\u02da\u02de\u02f5",
    "\u02f7\u0327\u032d\u0331\u0338\u0341\u0344\u034b\u034d\u0354\u0358\u035c",
    "\u0367\u0373\u037a\u037f\u0384\u0388\u038d\u038f\u03a4\u03a8\u03b1\u03b7",
    "\u03bb\u03be\u03de\u03e4\u03e8\u03ee\u03f4\u0404\u040a\u0414\u041b\u0422",
    "\u0426\u042e\u0434\u0444\u0451\u0457\u0460\u0468\u046d\u046f\u047a\u047f",
    "\u0494\u0498\u049c\u04a6\u04a9\u04b2\u04b5\u04be\u04c8\u04cb\u04d6\u04db"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, "'pragma'", "'abstract'", "'anonymous'", 
                     "'address'", "'as'", "'assembly'", "'bool'", null, 
                     "'bytes'", "'calldata'", "'catch'", "'constant'", "'constructor'", 
                     null, "'contract'", "'delete'", "'do'", "'else'", "'emit'", 
                     "'enum'", "'error'", "'revert'", "'event'", "'external'", 
                     "'fallback'", null, null, "'from'", null, null, null, 
                     null, null, "'immutable'", "'import'", "'indexed'", 
                     "'interface'", "'internal'", "'is'", "'library'", "'mapping'", 
                     "'memory'", "'modifier'", "'new'", null, "'override'", 
                     "'payable'", "'private'", "'public'", "'pure'", "'receive'", 
                     "'return'", "'returns'", null, "'storage'", "'string'", 
                     "'struct'", null, "'try'", "'type'", null, "'unchecked'", 
                     null, "'using'", "'view'", "'virtual'", "'while'", 
                     null, null, "'['", "']'", null, null, "':'", null, 
                     null, "'?'", "'=>'", null, "'='", "'|='", "'^='", "'&='", 
                     "'<<='", "'>>='", "'>>>='", "'+='", "'-='", "'*='", 
                     "'/='", "'%='", null, "'||'", "'&&'", "'|'", "'^'", 
                     "'&'", "'<<'", "'>>'", "'>>>'", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'**'", "'=='", "'!='", "'<'", "'>'", 
                     "'<='", "'>='", "'!'", "'~'", "'++'", "'--'", "'\"'", 
                     "'''", null, null, null, null, null, null, null, null, 
                     null, null, "'\"evmasm\"'", null, null, null, null, 
                     null, "'case'", null, "'default'", null, null, null, 
                     null, "'leave'", "'let'", "'switch'", null, null, null, 
                     null, null, null, null, "':='" ];

var symbolicNames = [ null, "ReservedKeywords", "Pragma", "Abstract", "Anonymous", 
                      "Address", "As", "Assembly", "Bool", "Break", "Bytes", 
                      "Calldata", "Catch", "Constant", "Constructor", "Continue", 
                      "Contract", "Delete", "Do", "Else", "Emit", "Enum", 
                      "Error", "Revert", "Event", "External", "Fallback", 
                      "False", "Fixed", "From", "FixedBytes", "For", "Function", 
                      "Hex", "If", "Immutable", "Import", "Indexed", "Interface", 
                      "Internal", "Is", "Library", "Mapping", "Memory", 
                      "Modifier", "New", "NumberUnit", "Override", "Payable", 
                      "Private", "Public", "Pure", "Receive", "Return", 
                      "Returns", "SignedIntegerType", "Storage", "String", 
                      "Struct", "True", "Try", "Type", "Ufixed", "Unchecked", 
                      "UnsignedIntegerType", "Using", "View", "Virtual", 
                      "While", "LParen", "RParen", "LBrack", "RBrack", "LBrace", 
                      "RBrace", "Colon", "Semicolon", "Period", "Conditional", 
                      "DoubleArrow", "RightArrow", "Assign", "AssignBitOr", 
                      "AssignBitXor", "AssignBitAnd", "AssignShl", "AssignSar", 
                      "AssignShr", "AssignAdd", "AssignSub", "AssignMul", 
                      "AssignDiv", "AssignMod", "Comma", "Or", "And", "BitOr", 
                      "BitXor", "BitAnd", "Shl", "Sar", "Shr", "Add", "Sub", 
                      "Mul", "Div", "Mod", "Exp", "Equal", "NotEqual", "LessThan", 
                      "GreaterThan", "LessThanOrEqual", "GreaterThanOrEqual", 
                      "Not", "BitNot", "Inc", "Dec", "DoubleQuote", "SingleQuote", 
                      "NonEmptyStringLiteral", "EmptyStringLiteral", "UnicodeStringLiteral", 
                      "HexString", "HexNumber", "DecimalNumber", "Identifier", 
                      "WS", "COMMENT", "LINE_COMMENT", "AssemblyDialect", 
                      "AssemblyLBrace", "AssemblyBlockWS", "AssemblyBlockCOMMENT", 
                      "AssemblyBlockLINE_COMMENT", "YulBreak", "YulCase", 
                      "YulContinue", "YulDefault", "YulFalse", "YulFor", 
                      "YulFunction", "YulIf", "YulLeave", "YulLet", "YulSwitch", 
                      "YulTrue", "YulHex", "YulEVMBuiltin", "YulLBrace", 
                      "YulRBrace", "YulLParen", "YulRParen", "YulAssign", 
                      "YulPeriod", "YulComma", "YulArrow", "YulIdentifier", 
                      "YulHexNumber", "YulDecimalNumber", "YulStringLiteral", 
                      "YulHexStringLiteral", "YulWS", "YulCOMMENT", "YulLINE_COMMENT", 
                      "PragmaToken", "PragmaSemicolon", "PragmaWS", "PragmaCOMMENT", 
                      "PragmaLINE_COMMENT" ];

var ruleNames =  [ "sourceUnit", "pragmaDirective", "importDirective", "importAliases", 
                   "path", "symbolAliases", "contractDefinition", "interfaceDefinition", 
                   "libraryDefinition", "inheritanceSpecifierList", "inheritanceSpecifier", 
                   "contractBodyElement", "namedArgument", "callArgumentList", 
                   "identifierPath", "modifierInvocation", "visibility", 
                   "parameterList", "parameterDeclaration", "constructorDefinition", 
                   "stateMutability", "overrideSpecifier", "functionDefinition", 
                   "modifierDefinition", "fallbackFunctionDefinition", "receiveFunctionDefinition", 
                   "structDefinition", "structMember", "enumDefinition", 
                   "userDefinedValueTypeDefinition", "stateVariableDeclaration", 
                   "constantVariableDeclaration", "eventParameter", "eventDefinition", 
                   "errorParameter", "errorDefinition", "usingDirective", 
                   "typeName", "elementaryTypeName", "functionTypeName", 
                   "variableDeclaration", "dataLocation", "expression", 
                   "assignOp", "tupleExpression", "inlineArrayExpression", 
                   "identifier", "literal", "booleanLiteral", "stringLiteral", 
                   "hexStringLiteral", "unicodeStringLiteral", "numberLiteral", 
                   "block", "uncheckedBlock", "statement", "simpleStatement", 
                   "ifStatement", "forStatement", "whileStatement", "doWhileStatement", 
                   "continueStatement", "breakStatement", "tryStatement", 
                   "catchClause", "returnStatement", "emitStatement", "revertStatement", 
                   "assemblyStatement", "variableDeclarationList", "variableDeclarationTuple", 
                   "variableDeclarationStatement", "expressionStatement", 
                   "mappingType", "mappingKeyType", "yulStatement", "yulBlock", 
                   "yulVariableDeclaration", "yulAssignment", "yulIfStatement", 
                   "yulForStatement", "yulSwitchCase", "yulSwitchStatement", 
                   "yulFunctionDefinition", "yulPath", "yulFunctionCall", 
                   "yulBoolean", "yulLiteral", "yulExpression" ];

function SolidityParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SolidityParser.prototype = Object.create(antlr4.Parser.prototype);
SolidityParser.prototype.constructor = SolidityParser;

Object.defineProperty(SolidityParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SolidityParser.EOF = antlr4.Token.EOF;
SolidityParser.ReservedKeywords = 1;
SolidityParser.Pragma = 2;
SolidityParser.Abstract = 3;
SolidityParser.Anonymous = 4;
SolidityParser.Address = 5;
SolidityParser.As = 6;
SolidityParser.Assembly = 7;
SolidityParser.Bool = 8;
SolidityParser.Break = 9;
SolidityParser.Bytes = 10;
SolidityParser.Calldata = 11;
SolidityParser.Catch = 12;
SolidityParser.Constant = 13;
SolidityParser.Constructor = 14;
SolidityParser.Continue = 15;
SolidityParser.Contract = 16;
SolidityParser.Delete = 17;
SolidityParser.Do = 18;
SolidityParser.Else = 19;
SolidityParser.Emit = 20;
SolidityParser.Enum = 21;
SolidityParser.Error = 22;
SolidityParser.Revert = 23;
SolidityParser.Event = 24;
SolidityParser.External = 25;
SolidityParser.Fallback = 26;
SolidityParser.False = 27;
SolidityParser.Fixed = 28;
SolidityParser.From = 29;
SolidityParser.FixedBytes = 30;
SolidityParser.For = 31;
SolidityParser.Function = 32;
SolidityParser.Hex = 33;
SolidityParser.If = 34;
SolidityParser.Immutable = 35;
SolidityParser.Import = 36;
SolidityParser.Indexed = 37;
SolidityParser.Interface = 38;
SolidityParser.Internal = 39;
SolidityParser.Is = 40;
SolidityParser.Library = 41;
SolidityParser.Mapping = 42;
SolidityParser.Memory = 43;
SolidityParser.Modifier = 44;
SolidityParser.New = 45;
SolidityParser.NumberUnit = 46;
SolidityParser.Override = 47;
SolidityParser.Payable = 48;
SolidityParser.Private = 49;
SolidityParser.Public = 50;
SolidityParser.Pure = 51;
SolidityParser.Receive = 52;
SolidityParser.Return = 53;
SolidityParser.Returns = 54;
SolidityParser.SignedIntegerType = 55;
SolidityParser.Storage = 56;
SolidityParser.String = 57;
SolidityParser.Struct = 58;
SolidityParser.True = 59;
SolidityParser.Try = 60;
SolidityParser.Type = 61;
SolidityParser.Ufixed = 62;
SolidityParser.Unchecked = 63;
SolidityParser.UnsignedIntegerType = 64;
SolidityParser.Using = 65;
SolidityParser.View = 66;
SolidityParser.Virtual = 67;
SolidityParser.While = 68;
SolidityParser.LParen = 69;
SolidityParser.RParen = 70;
SolidityParser.LBrack = 71;
SolidityParser.RBrack = 72;
SolidityParser.LBrace = 73;
SolidityParser.RBrace = 74;
SolidityParser.Colon = 75;
SolidityParser.Semicolon = 76;
SolidityParser.Period = 77;
SolidityParser.Conditional = 78;
SolidityParser.DoubleArrow = 79;
SolidityParser.RightArrow = 80;
SolidityParser.Assign = 81;
SolidityParser.AssignBitOr = 82;
SolidityParser.AssignBitXor = 83;
SolidityParser.AssignBitAnd = 84;
SolidityParser.AssignShl = 85;
SolidityParser.AssignSar = 86;
SolidityParser.AssignShr = 87;
SolidityParser.AssignAdd = 88;
SolidityParser.AssignSub = 89;
SolidityParser.AssignMul = 90;
SolidityParser.AssignDiv = 91;
SolidityParser.AssignMod = 92;
SolidityParser.Comma = 93;
SolidityParser.Or = 94;
SolidityParser.And = 95;
SolidityParser.BitOr = 96;
SolidityParser.BitXor = 97;
SolidityParser.BitAnd = 98;
SolidityParser.Shl = 99;
SolidityParser.Sar = 100;
SolidityParser.Shr = 101;
SolidityParser.Add = 102;
SolidityParser.Sub = 103;
SolidityParser.Mul = 104;
SolidityParser.Div = 105;
SolidityParser.Mod = 106;
SolidityParser.Exp = 107;
SolidityParser.Equal = 108;
SolidityParser.NotEqual = 109;
SolidityParser.LessThan = 110;
SolidityParser.GreaterThan = 111;
SolidityParser.LessThanOrEqual = 112;
SolidityParser.GreaterThanOrEqual = 113;
SolidityParser.Not = 114;
SolidityParser.BitNot = 115;
SolidityParser.Inc = 116;
SolidityParser.Dec = 117;
SolidityParser.DoubleQuote = 118;
SolidityParser.SingleQuote = 119;
SolidityParser.NonEmptyStringLiteral = 120;
SolidityParser.EmptyStringLiteral = 121;
SolidityParser.UnicodeStringLiteral = 122;
SolidityParser.HexString = 123;
SolidityParser.HexNumber = 124;
SolidityParser.DecimalNumber = 125;
SolidityParser.Identifier = 126;
SolidityParser.WS = 127;
SolidityParser.COMMENT = 128;
SolidityParser.LINE_COMMENT = 129;
SolidityParser.AssemblyDialect = 130;
SolidityParser.AssemblyLBrace = 131;
SolidityParser.AssemblyBlockWS = 132;
SolidityParser.AssemblyBlockCOMMENT = 133;
SolidityParser.AssemblyBlockLINE_COMMENT = 134;
SolidityParser.YulBreak = 135;
SolidityParser.YulCase = 136;
SolidityParser.YulContinue = 137;
SolidityParser.YulDefault = 138;
SolidityParser.YulFalse = 139;
SolidityParser.YulFor = 140;
SolidityParser.YulFunction = 141;
SolidityParser.YulIf = 142;
SolidityParser.YulLeave = 143;
SolidityParser.YulLet = 144;
SolidityParser.YulSwitch = 145;
SolidityParser.YulTrue = 146;
SolidityParser.YulHex = 147;
SolidityParser.YulEVMBuiltin = 148;
SolidityParser.YulLBrace = 149;
SolidityParser.YulRBrace = 150;
SolidityParser.YulLParen = 151;
SolidityParser.YulRParen = 152;
SolidityParser.YulAssign = 153;
SolidityParser.YulPeriod = 154;
SolidityParser.YulComma = 155;
SolidityParser.YulArrow = 156;
SolidityParser.YulIdentifier = 157;
SolidityParser.YulHexNumber = 158;
SolidityParser.YulDecimalNumber = 159;
SolidityParser.YulStringLiteral = 160;
SolidityParser.YulHexStringLiteral = 161;
SolidityParser.YulWS = 162;
SolidityParser.YulCOMMENT = 163;
SolidityParser.YulLINE_COMMENT = 164;
SolidityParser.PragmaToken = 165;
SolidityParser.PragmaSemicolon = 166;
SolidityParser.PragmaWS = 167;
SolidityParser.PragmaCOMMENT = 168;
SolidityParser.PragmaLINE_COMMENT = 169;

SolidityParser.RULE_sourceUnit = 0;
SolidityParser.RULE_pragmaDirective = 1;
SolidityParser.RULE_importDirective = 2;
SolidityParser.RULE_importAliases = 3;
SolidityParser.RULE_path = 4;
SolidityParser.RULE_symbolAliases = 5;
SolidityParser.RULE_contractDefinition = 6;
SolidityParser.RULE_interfaceDefinition = 7;
SolidityParser.RULE_libraryDefinition = 8;
SolidityParser.RULE_inheritanceSpecifierList = 9;
SolidityParser.RULE_inheritanceSpecifier = 10;
SolidityParser.RULE_contractBodyElement = 11;
SolidityParser.RULE_namedArgument = 12;
SolidityParser.RULE_callArgumentList = 13;
SolidityParser.RULE_identifierPath = 14;
SolidityParser.RULE_modifierInvocation = 15;
SolidityParser.RULE_visibility = 16;
SolidityParser.RULE_parameterList = 17;
SolidityParser.RULE_parameterDeclaration = 18;
SolidityParser.RULE_constructorDefinition = 19;
SolidityParser.RULE_stateMutability = 20;
SolidityParser.RULE_overrideSpecifier = 21;
SolidityParser.RULE_functionDefinition = 22;
SolidityParser.RULE_modifierDefinition = 23;
SolidityParser.RULE_fallbackFunctionDefinition = 24;
SolidityParser.RULE_receiveFunctionDefinition = 25;
SolidityParser.RULE_structDefinition = 26;
SolidityParser.RULE_structMember = 27;
SolidityParser.RULE_enumDefinition = 28;
SolidityParser.RULE_userDefinedValueTypeDefinition = 29;
SolidityParser.RULE_stateVariableDeclaration = 30;
SolidityParser.RULE_constantVariableDeclaration = 31;
SolidityParser.RULE_eventParameter = 32;
SolidityParser.RULE_eventDefinition = 33;
SolidityParser.RULE_errorParameter = 34;
SolidityParser.RULE_errorDefinition = 35;
SolidityParser.RULE_usingDirective = 36;
SolidityParser.RULE_typeName = 37;
SolidityParser.RULE_elementaryTypeName = 38;
SolidityParser.RULE_functionTypeName = 39;
SolidityParser.RULE_variableDeclaration = 40;
SolidityParser.RULE_dataLocation = 41;
SolidityParser.RULE_expression = 42;
SolidityParser.RULE_assignOp = 43;
SolidityParser.RULE_tupleExpression = 44;
SolidityParser.RULE_inlineArrayExpression = 45;
SolidityParser.RULE_identifier = 46;
SolidityParser.RULE_literal = 47;
SolidityParser.RULE_booleanLiteral = 48;
SolidityParser.RULE_stringLiteral = 49;
SolidityParser.RULE_hexStringLiteral = 50;
SolidityParser.RULE_unicodeStringLiteral = 51;
SolidityParser.RULE_numberLiteral = 52;
SolidityParser.RULE_block = 53;
SolidityParser.RULE_uncheckedBlock = 54;
SolidityParser.RULE_statement = 55;
SolidityParser.RULE_simpleStatement = 56;
SolidityParser.RULE_ifStatement = 57;
SolidityParser.RULE_forStatement = 58;
SolidityParser.RULE_whileStatement = 59;
SolidityParser.RULE_doWhileStatement = 60;
SolidityParser.RULE_continueStatement = 61;
SolidityParser.RULE_breakStatement = 62;
SolidityParser.RULE_tryStatement = 63;
SolidityParser.RULE_catchClause = 64;
SolidityParser.RULE_returnStatement = 65;
SolidityParser.RULE_emitStatement = 66;
SolidityParser.RULE_revertStatement = 67;
SolidityParser.RULE_assemblyStatement = 68;
SolidityParser.RULE_variableDeclarationList = 69;
SolidityParser.RULE_variableDeclarationTuple = 70;
SolidityParser.RULE_variableDeclarationStatement = 71;
SolidityParser.RULE_expressionStatement = 72;
SolidityParser.RULE_mappingType = 73;
SolidityParser.RULE_mappingKeyType = 74;
SolidityParser.RULE_yulStatement = 75;
SolidityParser.RULE_yulBlock = 76;
SolidityParser.RULE_yulVariableDeclaration = 77;
SolidityParser.RULE_yulAssignment = 78;
SolidityParser.RULE_yulIfStatement = 79;
SolidityParser.RULE_yulForStatement = 80;
SolidityParser.RULE_yulSwitchCase = 81;
SolidityParser.RULE_yulSwitchStatement = 82;
SolidityParser.RULE_yulFunctionDefinition = 83;
SolidityParser.RULE_yulPath = 84;
SolidityParser.RULE_yulFunctionCall = 85;
SolidityParser.RULE_yulBoolean = 86;
SolidityParser.RULE_yulLiteral = 87;
SolidityParser.RULE_yulExpression = 88;


function SourceUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_sourceUnit;
    return this;
}

SourceUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceUnitContext.prototype.constructor = SourceUnitContext;

SourceUnitContext.prototype.EOF = function() {
    return this.getToken(SolidityParser.EOF, 0);
};

SourceUnitContext.prototype.pragmaDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PragmaDirectiveContext);
    } else {
        return this.getTypedRuleContext(PragmaDirectiveContext,i);
    }
};

SourceUnitContext.prototype.importDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportDirectiveContext);
    } else {
        return this.getTypedRuleContext(ImportDirectiveContext,i);
    }
};

SourceUnitContext.prototype.contractDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ContractDefinitionContext);
    } else {
        return this.getTypedRuleContext(ContractDefinitionContext,i);
    }
};

SourceUnitContext.prototype.interfaceDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceDefinitionContext);
    } else {
        return this.getTypedRuleContext(InterfaceDefinitionContext,i);
    }
};

SourceUnitContext.prototype.libraryDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LibraryDefinitionContext);
    } else {
        return this.getTypedRuleContext(LibraryDefinitionContext,i);
    }
};

SourceUnitContext.prototype.functionDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionDefinitionContext);
    } else {
        return this.getTypedRuleContext(FunctionDefinitionContext,i);
    }
};

SourceUnitContext.prototype.constantVariableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantVariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(ConstantVariableDeclarationContext,i);
    }
};

SourceUnitContext.prototype.structDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StructDefinitionContext);
    } else {
        return this.getTypedRuleContext(StructDefinitionContext,i);
    }
};

SourceUnitContext.prototype.enumDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumDefinitionContext);
    } else {
        return this.getTypedRuleContext(EnumDefinitionContext,i);
    }
};

SourceUnitContext.prototype.userDefinedValueTypeDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserDefinedValueTypeDefinitionContext);
    } else {
        return this.getTypedRuleContext(UserDefinedValueTypeDefinitionContext,i);
    }
};

SourceUnitContext.prototype.errorDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ErrorDefinitionContext);
    } else {
        return this.getTypedRuleContext(ErrorDefinitionContext,i);
    }
};

SourceUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterSourceUnit(this);
	}
};

SourceUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitSourceUnit(this);
	}
};




SolidityParser.SourceUnitContext = SourceUnitContext;

SolidityParser.prototype.sourceUnit = function() {

    var localctx = new SourceUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SolidityParser.RULE_sourceUnit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 191;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 189;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 178;
                    this.pragmaDirective();
                    break;

                case 2:
                    this.state = 179;
                    this.importDirective();
                    break;

                case 3:
                    this.state = 180;
                    this.contractDefinition();
                    break;

                case 4:
                    this.state = 181;
                    this.interfaceDefinition();
                    break;

                case 5:
                    this.state = 182;
                    this.libraryDefinition();
                    break;

                case 6:
                    this.state = 183;
                    this.functionDefinition();
                    break;

                case 7:
                    this.state = 184;
                    this.constantVariableDeclaration();
                    break;

                case 8:
                    this.state = 185;
                    this.structDefinition();
                    break;

                case 9:
                    this.state = 186;
                    this.enumDefinition();
                    break;

                case 10:
                    this.state = 187;
                    this.userDefinedValueTypeDefinition();
                    break;

                case 11:
                    this.state = 188;
                    this.errorDefinition();
                    break;

                } 
            }
            this.state = 193;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1,this._ctx);
        }

        this.state = 194;
        this.match(SolidityParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PragmaDirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_pragmaDirective;
    return this;
}

PragmaDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PragmaDirectiveContext.prototype.constructor = PragmaDirectiveContext;

PragmaDirectiveContext.prototype.Pragma = function() {
    return this.getToken(SolidityParser.Pragma, 0);
};

PragmaDirectiveContext.prototype.PragmaSemicolon = function() {
    return this.getToken(SolidityParser.PragmaSemicolon, 0);
};

PragmaDirectiveContext.prototype.PragmaToken = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.PragmaToken);
    } else {
        return this.getToken(SolidityParser.PragmaToken, i);
    }
};


PragmaDirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterPragmaDirective(this);
	}
};

PragmaDirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitPragmaDirective(this);
	}
};




SolidityParser.PragmaDirectiveContext = PragmaDirectiveContext;

SolidityParser.prototype.pragmaDirective = function() {

    var localctx = new PragmaDirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SolidityParser.RULE_pragmaDirective);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 196;
        this.match(SolidityParser.Pragma);
        this.state = 198; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 197;
            this.match(SolidityParser.PragmaToken);
            this.state = 200; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SolidityParser.PragmaToken);
        this.state = 202;
        this.match(SolidityParser.PragmaSemicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportDirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_importDirective;
    this.unitAlias = null; // IdentifierContext
    return this;
}

ImportDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDirectiveContext.prototype.constructor = ImportDirectiveContext;

ImportDirectiveContext.prototype.Import = function() {
    return this.getToken(SolidityParser.Import, 0);
};

ImportDirectiveContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

ImportDirectiveContext.prototype.path = function() {
    return this.getTypedRuleContext(PathContext,0);
};

ImportDirectiveContext.prototype.symbolAliases = function() {
    return this.getTypedRuleContext(SymbolAliasesContext,0);
};

ImportDirectiveContext.prototype.From = function() {
    return this.getToken(SolidityParser.From, 0);
};

ImportDirectiveContext.prototype.Mul = function() {
    return this.getToken(SolidityParser.Mul, 0);
};

ImportDirectiveContext.prototype.As = function() {
    return this.getToken(SolidityParser.As, 0);
};

ImportDirectiveContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ImportDirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterImportDirective(this);
	}
};

ImportDirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitImportDirective(this);
	}
};




SolidityParser.ImportDirectiveContext = ImportDirectiveContext;

SolidityParser.prototype.importDirective = function() {

    var localctx = new ImportDirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SolidityParser.RULE_importDirective);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 204;
        this.match(SolidityParser.Import);
        this.state = 220;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.NonEmptyStringLiteral:
            this.state = 205;
            this.path();
            this.state = 208;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.As) {
                this.state = 206;
                this.match(SolidityParser.As);
                this.state = 207;
                localctx.unitAlias = this.identifier();
            }

            break;
        case SolidityParser.LBrace:
            this.state = 210;
            this.symbolAliases();
            this.state = 211;
            this.match(SolidityParser.From);
            this.state = 212;
            this.path();
            break;
        case SolidityParser.Mul:
            this.state = 214;
            this.match(SolidityParser.Mul);
            this.state = 215;
            this.match(SolidityParser.As);
            this.state = 216;
            localctx.unitAlias = this.identifier();
            this.state = 217;
            this.match(SolidityParser.From);
            this.state = 218;
            this.path();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 222;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportAliasesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_importAliases;
    this.symbol = null; // IdentifierContext
    this.alias = null; // IdentifierContext
    return this;
}

ImportAliasesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportAliasesContext.prototype.constructor = ImportAliasesContext;

ImportAliasesContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ImportAliasesContext.prototype.As = function() {
    return this.getToken(SolidityParser.As, 0);
};

ImportAliasesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterImportAliases(this);
	}
};

ImportAliasesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitImportAliases(this);
	}
};




SolidityParser.ImportAliasesContext = ImportAliasesContext;

SolidityParser.prototype.importAliases = function() {

    var localctx = new ImportAliasesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SolidityParser.RULE_importAliases);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 224;
        localctx.symbol = this.identifier();
        this.state = 227;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.As) {
            this.state = 225;
            this.match(SolidityParser.As);
            this.state = 226;
            localctx.alias = this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_path;
    return this;
}

PathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathContext.prototype.constructor = PathContext;

PathContext.prototype.NonEmptyStringLiteral = function() {
    return this.getToken(SolidityParser.NonEmptyStringLiteral, 0);
};

PathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterPath(this);
	}
};

PathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitPath(this);
	}
};




SolidityParser.PathContext = PathContext;

SolidityParser.prototype.path = function() {

    var localctx = new PathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SolidityParser.RULE_path);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 229;
        this.match(SolidityParser.NonEmptyStringLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SymbolAliasesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_symbolAliases;
    this._importAliases = null; // ImportAliasesContext
    this.aliases = []; // of ImportAliasesContexts
    return this;
}

SymbolAliasesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolAliasesContext.prototype.constructor = SymbolAliasesContext;

SymbolAliasesContext.prototype.LBrace = function() {
    return this.getToken(SolidityParser.LBrace, 0);
};

SymbolAliasesContext.prototype.RBrace = function() {
    return this.getToken(SolidityParser.RBrace, 0);
};

SymbolAliasesContext.prototype.importAliases = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportAliasesContext);
    } else {
        return this.getTypedRuleContext(ImportAliasesContext,i);
    }
};

SymbolAliasesContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Comma);
    } else {
        return this.getToken(SolidityParser.Comma, i);
    }
};


SymbolAliasesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterSymbolAliases(this);
	}
};

SymbolAliasesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitSymbolAliases(this);
	}
};




SolidityParser.SymbolAliasesContext = SymbolAliasesContext;

SolidityParser.prototype.symbolAliases = function() {

    var localctx = new SymbolAliasesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SolidityParser.RULE_symbolAliases);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 231;
        this.match(SolidityParser.LBrace);
        this.state = 232;
        localctx._importAliases = this.importAliases();
        localctx.aliases.push(localctx._importAliases);
        this.state = 237;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.Comma) {
            this.state = 233;
            this.match(SolidityParser.Comma);
            this.state = 234;
            localctx._importAliases = this.importAliases();
            localctx.aliases.push(localctx._importAliases);
            this.state = 239;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 240;
        this.match(SolidityParser.RBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContractDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_contractDefinition;
    this.name = null; // IdentifierContext
    return this;
}

ContractDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContractDefinitionContext.prototype.constructor = ContractDefinitionContext;

ContractDefinitionContext.prototype.Contract = function() {
    return this.getToken(SolidityParser.Contract, 0);
};

ContractDefinitionContext.prototype.LBrace = function() {
    return this.getToken(SolidityParser.LBrace, 0);
};

ContractDefinitionContext.prototype.RBrace = function() {
    return this.getToken(SolidityParser.RBrace, 0);
};

ContractDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ContractDefinitionContext.prototype.Abstract = function() {
    return this.getToken(SolidityParser.Abstract, 0);
};

ContractDefinitionContext.prototype.inheritanceSpecifierList = function() {
    return this.getTypedRuleContext(InheritanceSpecifierListContext,0);
};

ContractDefinitionContext.prototype.contractBodyElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ContractBodyElementContext);
    } else {
        return this.getTypedRuleContext(ContractBodyElementContext,i);
    }
};

ContractDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterContractDefinition(this);
	}
};

ContractDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitContractDefinition(this);
	}
};




SolidityParser.ContractDefinitionContext = ContractDefinitionContext;

SolidityParser.prototype.contractDefinition = function() {

    var localctx = new ContractDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SolidityParser.RULE_contractDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 243;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Abstract) {
            this.state = 242;
            this.match(SolidityParser.Abstract);
        }

        this.state = 245;
        this.match(SolidityParser.Contract);
        this.state = 246;
        localctx.name = this.identifier();
        this.state = 248;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Is) {
            this.state = 247;
            this.inheritanceSpecifierList();
        }

        this.state = 250;
        this.match(SolidityParser.LBrace);
        this.state = 254;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 251;
                this.contractBodyElement(); 
            }
            this.state = 256;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
        }

        this.state = 257;
        this.match(SolidityParser.RBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InterfaceDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_interfaceDefinition;
    this.name = null; // IdentifierContext
    return this;
}

InterfaceDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceDefinitionContext.prototype.constructor = InterfaceDefinitionContext;

InterfaceDefinitionContext.prototype.Interface = function() {
    return this.getToken(SolidityParser.Interface, 0);
};

InterfaceDefinitionContext.prototype.LBrace = function() {
    return this.getToken(SolidityParser.LBrace, 0);
};

InterfaceDefinitionContext.prototype.RBrace = function() {
    return this.getToken(SolidityParser.RBrace, 0);
};

InterfaceDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

InterfaceDefinitionContext.prototype.inheritanceSpecifierList = function() {
    return this.getTypedRuleContext(InheritanceSpecifierListContext,0);
};

InterfaceDefinitionContext.prototype.contractBodyElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ContractBodyElementContext);
    } else {
        return this.getTypedRuleContext(ContractBodyElementContext,i);
    }
};

InterfaceDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterInterfaceDefinition(this);
	}
};

InterfaceDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitInterfaceDefinition(this);
	}
};




SolidityParser.InterfaceDefinitionContext = InterfaceDefinitionContext;

SolidityParser.prototype.interfaceDefinition = function() {

    var localctx = new InterfaceDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SolidityParser.RULE_interfaceDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 259;
        this.match(SolidityParser.Interface);
        this.state = 260;
        localctx.name = this.identifier();
        this.state = 262;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Is) {
            this.state = 261;
            this.inheritanceSpecifierList();
        }

        this.state = 264;
        this.match(SolidityParser.LBrace);
        this.state = 268;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 265;
                this.contractBodyElement(); 
            }
            this.state = 270;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
        }

        this.state = 271;
        this.match(SolidityParser.RBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LibraryDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_libraryDefinition;
    this.name = null; // IdentifierContext
    return this;
}

LibraryDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LibraryDefinitionContext.prototype.constructor = LibraryDefinitionContext;

LibraryDefinitionContext.prototype.Library = function() {
    return this.getToken(SolidityParser.Library, 0);
};

LibraryDefinitionContext.prototype.LBrace = function() {
    return this.getToken(SolidityParser.LBrace, 0);
};

LibraryDefinitionContext.prototype.RBrace = function() {
    return this.getToken(SolidityParser.RBrace, 0);
};

LibraryDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LibraryDefinitionContext.prototype.contractBodyElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ContractBodyElementContext);
    } else {
        return this.getTypedRuleContext(ContractBodyElementContext,i);
    }
};

LibraryDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterLibraryDefinition(this);
	}
};

LibraryDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitLibraryDefinition(this);
	}
};




SolidityParser.LibraryDefinitionContext = LibraryDefinitionContext;

SolidityParser.prototype.libraryDefinition = function() {

    var localctx = new LibraryDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SolidityParser.RULE_libraryDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 273;
        this.match(SolidityParser.Library);
        this.state = 274;
        localctx.name = this.identifier();
        this.state = 275;
        this.match(SolidityParser.LBrace);
        this.state = 279;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 276;
                this.contractBodyElement(); 
            }
            this.state = 281;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
        }

        this.state = 282;
        this.match(SolidityParser.RBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InheritanceSpecifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_inheritanceSpecifierList;
    this._inheritanceSpecifier = null; // InheritanceSpecifierContext
    this.inheritanceSpecifiers = []; // of InheritanceSpecifierContexts
    return this;
}

InheritanceSpecifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InheritanceSpecifierListContext.prototype.constructor = InheritanceSpecifierListContext;

InheritanceSpecifierListContext.prototype.Is = function() {
    return this.getToken(SolidityParser.Is, 0);
};

InheritanceSpecifierListContext.prototype.inheritanceSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InheritanceSpecifierContext);
    } else {
        return this.getTypedRuleContext(InheritanceSpecifierContext,i);
    }
};

InheritanceSpecifierListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Comma);
    } else {
        return this.getToken(SolidityParser.Comma, i);
    }
};


InheritanceSpecifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterInheritanceSpecifierList(this);
	}
};

InheritanceSpecifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitInheritanceSpecifierList(this);
	}
};




SolidityParser.InheritanceSpecifierListContext = InheritanceSpecifierListContext;

SolidityParser.prototype.inheritanceSpecifierList = function() {

    var localctx = new InheritanceSpecifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SolidityParser.RULE_inheritanceSpecifierList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        this.match(SolidityParser.Is);
        this.state = 285;
        localctx._inheritanceSpecifier = this.inheritanceSpecifier();
        localctx.inheritanceSpecifiers.push(localctx._inheritanceSpecifier);
        this.state = 290;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,13,this._ctx)
        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1+1) {
                this.state = 286;
                this.match(SolidityParser.Comma);
                this.state = 287;
                localctx._inheritanceSpecifier = this.inheritanceSpecifier();
                localctx.inheritanceSpecifiers.push(localctx._inheritanceSpecifier); 
            }
            this.state = 292;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,13,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InheritanceSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_inheritanceSpecifier;
    this.name = null; // IdentifierPathContext
    this.arguments = null; // CallArgumentListContext
    return this;
}

InheritanceSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InheritanceSpecifierContext.prototype.constructor = InheritanceSpecifierContext;

InheritanceSpecifierContext.prototype.identifierPath = function() {
    return this.getTypedRuleContext(IdentifierPathContext,0);
};

InheritanceSpecifierContext.prototype.callArgumentList = function() {
    return this.getTypedRuleContext(CallArgumentListContext,0);
};

InheritanceSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterInheritanceSpecifier(this);
	}
};

InheritanceSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitInheritanceSpecifier(this);
	}
};




SolidityParser.InheritanceSpecifierContext = InheritanceSpecifierContext;

SolidityParser.prototype.inheritanceSpecifier = function() {

    var localctx = new InheritanceSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SolidityParser.RULE_inheritanceSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 293;
        localctx.name = this.identifierPath();
        this.state = 295;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.LParen) {
            this.state = 294;
            localctx.arguments = this.callArgumentList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContractBodyElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_contractBodyElement;
    return this;
}

ContractBodyElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContractBodyElementContext.prototype.constructor = ContractBodyElementContext;

ContractBodyElementContext.prototype.constructorDefinition = function() {
    return this.getTypedRuleContext(ConstructorDefinitionContext,0);
};

ContractBodyElementContext.prototype.functionDefinition = function() {
    return this.getTypedRuleContext(FunctionDefinitionContext,0);
};

ContractBodyElementContext.prototype.modifierDefinition = function() {
    return this.getTypedRuleContext(ModifierDefinitionContext,0);
};

ContractBodyElementContext.prototype.fallbackFunctionDefinition = function() {
    return this.getTypedRuleContext(FallbackFunctionDefinitionContext,0);
};

ContractBodyElementContext.prototype.receiveFunctionDefinition = function() {
    return this.getTypedRuleContext(ReceiveFunctionDefinitionContext,0);
};

ContractBodyElementContext.prototype.structDefinition = function() {
    return this.getTypedRuleContext(StructDefinitionContext,0);
};

ContractBodyElementContext.prototype.enumDefinition = function() {
    return this.getTypedRuleContext(EnumDefinitionContext,0);
};

ContractBodyElementContext.prototype.userDefinedValueTypeDefinition = function() {
    return this.getTypedRuleContext(UserDefinedValueTypeDefinitionContext,0);
};

ContractBodyElementContext.prototype.stateVariableDeclaration = function() {
    return this.getTypedRuleContext(StateVariableDeclarationContext,0);
};

ContractBodyElementContext.prototype.eventDefinition = function() {
    return this.getTypedRuleContext(EventDefinitionContext,0);
};

ContractBodyElementContext.prototype.errorDefinition = function() {
    return this.getTypedRuleContext(ErrorDefinitionContext,0);
};

ContractBodyElementContext.prototype.usingDirective = function() {
    return this.getTypedRuleContext(UsingDirectiveContext,0);
};

ContractBodyElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterContractBodyElement(this);
	}
};

ContractBodyElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitContractBodyElement(this);
	}
};




SolidityParser.ContractBodyElementContext = ContractBodyElementContext;

SolidityParser.prototype.contractBodyElement = function() {

    var localctx = new ContractBodyElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SolidityParser.RULE_contractBodyElement);
    try {
        this.state = 309;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 297;
            this.constructorDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 298;
            this.functionDefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 299;
            this.modifierDefinition();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 300;
            this.fallbackFunctionDefinition();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 301;
            this.receiveFunctionDefinition();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 302;
            this.structDefinition();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 303;
            this.enumDefinition();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 304;
            this.userDefinedValueTypeDefinition();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 305;
            this.stateVariableDeclaration();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 306;
            this.eventDefinition();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 307;
            this.errorDefinition();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 308;
            this.usingDirective();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_namedArgument;
    this.name = null; // IdentifierContext
    this.value = null; // ExpressionContext
    return this;
}

NamedArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedArgumentContext.prototype.constructor = NamedArgumentContext;

NamedArgumentContext.prototype.Colon = function() {
    return this.getToken(SolidityParser.Colon, 0);
};

NamedArgumentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NamedArgumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NamedArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterNamedArgument(this);
	}
};

NamedArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitNamedArgument(this);
	}
};




SolidityParser.NamedArgumentContext = NamedArgumentContext;

SolidityParser.prototype.namedArgument = function() {

    var localctx = new NamedArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SolidityParser.RULE_namedArgument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 311;
        localctx.name = this.identifier();
        this.state = 312;
        this.match(SolidityParser.Colon);
        this.state = 313;
        localctx.value = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CallArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_callArgumentList;
    return this;
}

CallArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallArgumentListContext.prototype.constructor = CallArgumentListContext;

CallArgumentListContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

CallArgumentListContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

CallArgumentListContext.prototype.LBrace = function() {
    return this.getToken(SolidityParser.LBrace, 0);
};

CallArgumentListContext.prototype.RBrace = function() {
    return this.getToken(SolidityParser.RBrace, 0);
};

CallArgumentListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

CallArgumentListContext.prototype.namedArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedArgumentContext);
    } else {
        return this.getTypedRuleContext(NamedArgumentContext,i);
    }
};

CallArgumentListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Comma);
    } else {
        return this.getToken(SolidityParser.Comma, i);
    }
};


CallArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterCallArgumentList(this);
	}
};

CallArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitCallArgumentList(this);
	}
};




SolidityParser.CallArgumentListContext = CallArgumentListContext;

SolidityParser.prototype.callArgumentList = function() {

    var localctx = new CallArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SolidityParser.RULE_callArgumentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 315;
        this.match(SolidityParser.LParen);
        this.state = 338;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        switch(la_) {
        case 1:
            this.state = 324;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
            if(la_===1) {
                this.state = 316;
                this.expression(0);
                this.state = 321;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SolidityParser.Comma) {
                    this.state = 317;
                    this.match(SolidityParser.Comma);
                    this.state = 318;
                    this.expression(0);
                    this.state = 323;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }

            }
            break;

        case 2:
            this.state = 326;
            this.match(SolidityParser.LBrace);
            this.state = 335;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.Error) | (1 << SolidityParser.Revert) | (1 << SolidityParser.From))) !== 0) || _la===SolidityParser.Identifier) {
                this.state = 327;
                this.namedArgument();
                this.state = 332;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SolidityParser.Comma) {
                    this.state = 328;
                    this.match(SolidityParser.Comma);
                    this.state = 329;
                    this.namedArgument();
                    this.state = 334;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 337;
            this.match(SolidityParser.RBrace);
            break;

        }
        this.state = 340;
        this.match(SolidityParser.RParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_identifierPath;
    return this;
}

IdentifierPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierPathContext.prototype.constructor = IdentifierPathContext;

IdentifierPathContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

IdentifierPathContext.prototype.Period = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Period);
    } else {
        return this.getToken(SolidityParser.Period, i);
    }
};


IdentifierPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterIdentifierPath(this);
	}
};

IdentifierPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitIdentifierPath(this);
	}
};




SolidityParser.IdentifierPathContext = IdentifierPathContext;

SolidityParser.prototype.identifierPath = function() {

    var localctx = new IdentifierPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SolidityParser.RULE_identifierPath);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 342;
        this.identifier();
        this.state = 347;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 343;
                this.match(SolidityParser.Period);
                this.state = 344;
                this.identifier(); 
            }
            this.state = 349;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModifierInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_modifierInvocation;
    return this;
}

ModifierInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierInvocationContext.prototype.constructor = ModifierInvocationContext;

ModifierInvocationContext.prototype.identifierPath = function() {
    return this.getTypedRuleContext(IdentifierPathContext,0);
};

ModifierInvocationContext.prototype.callArgumentList = function() {
    return this.getTypedRuleContext(CallArgumentListContext,0);
};

ModifierInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterModifierInvocation(this);
	}
};

ModifierInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitModifierInvocation(this);
	}
};




SolidityParser.ModifierInvocationContext = ModifierInvocationContext;

SolidityParser.prototype.modifierInvocation = function() {

    var localctx = new ModifierInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SolidityParser.RULE_modifierInvocation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 350;
        this.identifierPath();
        this.state = 352;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        if(la_===1) {
            this.state = 351;
            this.callArgumentList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VisibilityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_visibility;
    return this;
}

VisibilityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VisibilityContext.prototype.constructor = VisibilityContext;

VisibilityContext.prototype.Internal = function() {
    return this.getToken(SolidityParser.Internal, 0);
};

VisibilityContext.prototype.External = function() {
    return this.getToken(SolidityParser.External, 0);
};

VisibilityContext.prototype.Private = function() {
    return this.getToken(SolidityParser.Private, 0);
};

VisibilityContext.prototype.Public = function() {
    return this.getToken(SolidityParser.Public, 0);
};

VisibilityContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterVisibility(this);
	}
};

VisibilityContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitVisibility(this);
	}
};




SolidityParser.VisibilityContext = VisibilityContext;

SolidityParser.prototype.visibility = function() {

    var localctx = new VisibilityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SolidityParser.RULE_visibility);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 354;
        _la = this._input.LA(1);
        if(!(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (SolidityParser.External - 25)) | (1 << (SolidityParser.Internal - 25)) | (1 << (SolidityParser.Private - 25)) | (1 << (SolidityParser.Public - 25)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_parameterList;
    this._parameterDeclaration = null; // ParameterDeclarationContext
    this.parameters = []; // of ParameterDeclarationContexts
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.parameterDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterDeclarationContext);
    } else {
        return this.getTypedRuleContext(ParameterDeclarationContext,i);
    }
};

ParameterListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Comma);
    } else {
        return this.getToken(SolidityParser.Comma, i);
    }
};


ParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterParameterList(this);
	}
};

ParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitParameterList(this);
	}
};




SolidityParser.ParameterListContext = ParameterListContext;

SolidityParser.prototype.parameterList = function() {

    var localctx = new ParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SolidityParser.RULE_parameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 356;
        localctx._parameterDeclaration = this.parameterDeclaration();
        localctx.parameters.push(localctx._parameterDeclaration);
        this.state = 361;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.Comma) {
            this.state = 357;
            this.match(SolidityParser.Comma);
            this.state = 358;
            localctx._parameterDeclaration = this.parameterDeclaration();
            localctx.parameters.push(localctx._parameterDeclaration);
            this.state = 363;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_parameterDeclaration;
    this.type = null; // TypeNameContext
    this.location = null; // DataLocationContext
    this.name = null; // IdentifierContext
    return this;
}

ParameterDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDeclarationContext.prototype.constructor = ParameterDeclarationContext;

ParameterDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

ParameterDeclarationContext.prototype.dataLocation = function() {
    return this.getTypedRuleContext(DataLocationContext,0);
};

ParameterDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ParameterDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterParameterDeclaration(this);
	}
};

ParameterDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitParameterDeclaration(this);
	}
};




SolidityParser.ParameterDeclarationContext = ParameterDeclarationContext;

SolidityParser.prototype.parameterDeclaration = function() {

    var localctx = new ParameterDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SolidityParser.RULE_parameterDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 364;
        localctx.type = this.typeName(0);
        this.state = 366;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Calldata || _la===SolidityParser.Memory || _la===SolidityParser.Storage) {
            this.state = 365;
            localctx.location = this.dataLocation();
        }

        this.state = 369;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.Error) | (1 << SolidityParser.Revert) | (1 << SolidityParser.From))) !== 0) || _la===SolidityParser.Identifier) {
            this.state = 368;
            localctx.name = this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstructorDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_constructorDefinition;
    this.payableSet = false
    this.visibilitySet = false
    this.arguments = null; // ParameterListContext
    this.body = null; // BlockContext
    return this;
}

ConstructorDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorDefinitionContext.prototype.constructor = ConstructorDefinitionContext;

ConstructorDefinitionContext.prototype.Constructor = function() {
    return this.getToken(SolidityParser.Constructor, 0);
};

ConstructorDefinitionContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

ConstructorDefinitionContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

ConstructorDefinitionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ConstructorDefinitionContext.prototype.modifierInvocation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierInvocationContext);
    } else {
        return this.getTypedRuleContext(ModifierInvocationContext,i);
    }
};

ConstructorDefinitionContext.prototype.Payable = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Payable);
    } else {
        return this.getToken(SolidityParser.Payable, i);
    }
};


ConstructorDefinitionContext.prototype.Internal = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Internal);
    } else {
        return this.getToken(SolidityParser.Internal, i);
    }
};


ConstructorDefinitionContext.prototype.Public = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Public);
    } else {
        return this.getToken(SolidityParser.Public, i);
    }
};


ConstructorDefinitionContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ConstructorDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterConstructorDefinition(this);
	}
};

ConstructorDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitConstructorDefinition(this);
	}
};




SolidityParser.ConstructorDefinitionContext = ConstructorDefinitionContext;

SolidityParser.prototype.constructorDefinition = function() {

    var localctx = new ConstructorDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SolidityParser.RULE_constructorDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 371;
        this.match(SolidityParser.Constructor);
        this.state = 372;
        this.match(SolidityParser.LParen);
        this.state = 374;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        if(la_===1) {
            this.state = 373;
            localctx.arguments = this.parameterList();

        }
        this.state = 376;
        this.match(SolidityParser.RParen);
        this.state = 389;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 387;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 377;
                    this.modifierInvocation();
                    break;

                case 2:
                    this.state = 378;
                    if (!( !localctx.payableSet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$payableSet");
                    }
                    this.state = 379;
                    this.match(SolidityParser.Payable);
                    localctx.payableSet =  true
                    break;

                case 3:
                    this.state = 381;
                    if (!( !localctx.visibilitySet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$visibilitySet");
                    }
                    this.state = 382;
                    this.match(SolidityParser.Internal);
                    localctx.visibilitySet =  true
                    break;

                case 4:
                    this.state = 384;
                    if (!( !localctx.visibilitySet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$visibilitySet");
                    }
                    this.state = 385;
                    this.match(SolidityParser.Public);
                    localctx.visibilitySet =  true
                    break;

                } 
            }
            this.state = 391;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
        }

        this.state = 392;
        localctx.body = this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StateMutabilityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_stateMutability;
    return this;
}

StateMutabilityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateMutabilityContext.prototype.constructor = StateMutabilityContext;

StateMutabilityContext.prototype.Pure = function() {
    return this.getToken(SolidityParser.Pure, 0);
};

StateMutabilityContext.prototype.View = function() {
    return this.getToken(SolidityParser.View, 0);
};

StateMutabilityContext.prototype.Payable = function() {
    return this.getToken(SolidityParser.Payable, 0);
};

StateMutabilityContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterStateMutability(this);
	}
};

StateMutabilityContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitStateMutability(this);
	}
};




SolidityParser.StateMutabilityContext = StateMutabilityContext;

SolidityParser.prototype.stateMutability = function() {

    var localctx = new StateMutabilityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SolidityParser.RULE_stateMutability);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 394;
        _la = this._input.LA(1);
        if(!(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (SolidityParser.Payable - 48)) | (1 << (SolidityParser.Pure - 48)) | (1 << (SolidityParser.View - 48)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OverrideSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_overrideSpecifier;
    this._identifierPath = null; // IdentifierPathContext
    this.overrides = []; // of IdentifierPathContexts
    return this;
}

OverrideSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OverrideSpecifierContext.prototype.constructor = OverrideSpecifierContext;

OverrideSpecifierContext.prototype.Override = function() {
    return this.getToken(SolidityParser.Override, 0);
};

OverrideSpecifierContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

OverrideSpecifierContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

OverrideSpecifierContext.prototype.identifierPath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierPathContext);
    } else {
        return this.getTypedRuleContext(IdentifierPathContext,i);
    }
};

OverrideSpecifierContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Comma);
    } else {
        return this.getToken(SolidityParser.Comma, i);
    }
};


OverrideSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterOverrideSpecifier(this);
	}
};

OverrideSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitOverrideSpecifier(this);
	}
};




SolidityParser.OverrideSpecifierContext = OverrideSpecifierContext;

SolidityParser.prototype.overrideSpecifier = function() {

    var localctx = new OverrideSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SolidityParser.RULE_overrideSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 396;
        this.match(SolidityParser.Override);
        this.state = 408;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 397;
            this.match(SolidityParser.LParen);
            this.state = 398;
            localctx._identifierPath = this.identifierPath();
            localctx.overrides.push(localctx._identifierPath);
            this.state = 403;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.Comma) {
                this.state = 399;
                this.match(SolidityParser.Comma);
                this.state = 400;
                localctx._identifierPath = this.identifierPath();
                localctx.overrides.push(localctx._identifierPath);
                this.state = 405;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 406;
            this.match(SolidityParser.RParen);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionDefinition;
    this.visibilitySet = false
    this.mutabilitySet = false
    this.virtualSet = false
    this.overrideSpecifierSet = false
    this.arguments = null; // ParameterListContext
    this.returnParameters = null; // ParameterListContext
    this.body = null; // BlockContext
    return this;
}

FunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDefinitionContext.prototype.constructor = FunctionDefinitionContext;

FunctionDefinitionContext.prototype.Function = function() {
    return this.getToken(SolidityParser.Function, 0);
};

FunctionDefinitionContext.prototype.LParen = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.LParen);
    } else {
        return this.getToken(SolidityParser.LParen, i);
    }
};


FunctionDefinitionContext.prototype.RParen = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.RParen);
    } else {
        return this.getToken(SolidityParser.RParen, i);
    }
};


FunctionDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionDefinitionContext.prototype.Fallback = function() {
    return this.getToken(SolidityParser.Fallback, 0);
};

FunctionDefinitionContext.prototype.Receive = function() {
    return this.getToken(SolidityParser.Receive, 0);
};

FunctionDefinitionContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

FunctionDefinitionContext.prototype.visibility = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VisibilityContext);
    } else {
        return this.getTypedRuleContext(VisibilityContext,i);
    }
};

FunctionDefinitionContext.prototype.stateMutability = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StateMutabilityContext);
    } else {
        return this.getTypedRuleContext(StateMutabilityContext,i);
    }
};

FunctionDefinitionContext.prototype.modifierInvocation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierInvocationContext);
    } else {
        return this.getTypedRuleContext(ModifierInvocationContext,i);
    }
};

FunctionDefinitionContext.prototype.Virtual = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Virtual);
    } else {
        return this.getToken(SolidityParser.Virtual, i);
    }
};


FunctionDefinitionContext.prototype.overrideSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OverrideSpecifierContext);
    } else {
        return this.getTypedRuleContext(OverrideSpecifierContext,i);
    }
};

FunctionDefinitionContext.prototype.Returns = function() {
    return this.getToken(SolidityParser.Returns, 0);
};

FunctionDefinitionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FunctionDefinitionContext.prototype.parameterList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterListContext);
    } else {
        return this.getTypedRuleContext(ParameterListContext,i);
    }
};

FunctionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterFunctionDefinition(this);
	}
};

FunctionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitFunctionDefinition(this);
	}
};




SolidityParser.FunctionDefinitionContext = FunctionDefinitionContext;

SolidityParser.prototype.functionDefinition = function() {

    var localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SolidityParser.RULE_functionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 410;
        this.match(SolidityParser.Function);
        this.state = 414;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.Error:
        case SolidityParser.Revert:
        case SolidityParser.From:
        case SolidityParser.Identifier:
            this.state = 411;
            this.identifier();
            break;
        case SolidityParser.Fallback:
            this.state = 412;
            this.match(SolidityParser.Fallback);
            break;
        case SolidityParser.Receive:
            this.state = 413;
            this.match(SolidityParser.Receive);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 416;
        this.match(SolidityParser.LParen);
        this.state = 418;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        if(la_===1) {
            this.state = 417;
            localctx.arguments = this.parameterList();

        }
        this.state = 420;
        this.match(SolidityParser.RParen);
        this.state = 439;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 437;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 421;
                    if (!( !localctx.visibilitySet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$visibilitySet");
                    }
                    this.state = 422;
                    this.visibility();
                    localctx.visibilitySet =  true
                    break;

                case 2:
                    this.state = 425;
                    if (!( !localctx.mutabilitySet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$mutabilitySet");
                    }
                    this.state = 426;
                    this.stateMutability();
                    localctx.mutabilitySet =  true
                    break;

                case 3:
                    this.state = 429;
                    this.modifierInvocation();
                    break;

                case 4:
                    this.state = 430;
                    if (!( !localctx.virtualSet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$virtualSet");
                    }
                    this.state = 431;
                    this.match(SolidityParser.Virtual);
                    localctx.virtualSet =  true
                    break;

                case 5:
                    this.state = 433;
                    if (!( !localctx.overrideSpecifierSet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$overrideSpecifierSet");
                    }
                    this.state = 434;
                    this.overrideSpecifier();
                    localctx.overrideSpecifierSet =  true
                    break;

                } 
            }
            this.state = 441;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
        }

        this.state = 447;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Returns) {
            this.state = 442;
            this.match(SolidityParser.Returns);
            this.state = 443;
            this.match(SolidityParser.LParen);
            this.state = 444;
            localctx.returnParameters = this.parameterList();
            this.state = 445;
            this.match(SolidityParser.RParen);
        }

        this.state = 451;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.Semicolon:
            this.state = 449;
            this.match(SolidityParser.Semicolon);
            break;
        case SolidityParser.LBrace:
            this.state = 450;
            localctx.body = this.block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModifierDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_modifierDefinition;
    this.virtualSet = false
    this.overrideSpecifierSet = false
    this.name = null; // IdentifierContext
    this.arguments = null; // ParameterListContext
    this.body = null; // BlockContext
    return this;
}

ModifierDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierDefinitionContext.prototype.constructor = ModifierDefinitionContext;

ModifierDefinitionContext.prototype.Modifier = function() {
    return this.getToken(SolidityParser.Modifier, 0);
};

ModifierDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ModifierDefinitionContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

ModifierDefinitionContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

ModifierDefinitionContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

ModifierDefinitionContext.prototype.Virtual = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Virtual);
    } else {
        return this.getToken(SolidityParser.Virtual, i);
    }
};


ModifierDefinitionContext.prototype.overrideSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OverrideSpecifierContext);
    } else {
        return this.getTypedRuleContext(OverrideSpecifierContext,i);
    }
};

ModifierDefinitionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ModifierDefinitionContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ModifierDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterModifierDefinition(this);
	}
};

ModifierDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitModifierDefinition(this);
	}
};




SolidityParser.ModifierDefinitionContext = ModifierDefinitionContext;

SolidityParser.prototype.modifierDefinition = function() {

    var localctx = new ModifierDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SolidityParser.RULE_modifierDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 453;
        this.match(SolidityParser.Modifier);
        this.state = 454;
        localctx.name = this.identifier();
        this.state = 460;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        if(la_===1) {
            this.state = 455;
            this.match(SolidityParser.LParen);
            this.state = 457;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
            if(la_===1) {
                this.state = 456;
                localctx.arguments = this.parameterList();

            }
            this.state = 459;
            this.match(SolidityParser.RParen);

        }
        this.state = 471;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 469;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 462;
                    if (!( !localctx.virtualSet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$virtualSet");
                    }
                    this.state = 463;
                    this.match(SolidityParser.Virtual);
                    localctx.virtualSet =  true
                    break;

                case 2:
                    this.state = 465;
                    if (!( !localctx.overrideSpecifierSet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$overrideSpecifierSet");
                    }
                    this.state = 466;
                    this.overrideSpecifier();
                    localctx.overrideSpecifierSet =  true
                    break;

                } 
            }
            this.state = 473;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
        }

        this.state = 476;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.Semicolon:
            this.state = 474;
            this.match(SolidityParser.Semicolon);
            break;
        case SolidityParser.LBrace:
            this.state = 475;
            localctx.body = this.block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FallbackFunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_fallbackFunctionDefinition;
    this.visibilitySet = false
    this.mutabilitySet = false
    this.virtualSet = false
    this.overrideSpecifierSet = false
    this.hasParameters = false
    this.kind = null; // Token
    this.returnParameters = null; // ParameterListContext
    this.body = null; // BlockContext
    return this;
}

FallbackFunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FallbackFunctionDefinitionContext.prototype.constructor = FallbackFunctionDefinitionContext;

FallbackFunctionDefinitionContext.prototype.LParen = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.LParen);
    } else {
        return this.getToken(SolidityParser.LParen, i);
    }
};


FallbackFunctionDefinitionContext.prototype.RParen = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.RParen);
    } else {
        return this.getToken(SolidityParser.RParen, i);
    }
};


FallbackFunctionDefinitionContext.prototype.Fallback = function() {
    return this.getToken(SolidityParser.Fallback, 0);
};

FallbackFunctionDefinitionContext.prototype.Returns = function() {
    return this.getToken(SolidityParser.Returns, 0);
};

FallbackFunctionDefinitionContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

FallbackFunctionDefinitionContext.prototype.parameterList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterListContext);
    } else {
        return this.getTypedRuleContext(ParameterListContext,i);
    }
};

FallbackFunctionDefinitionContext.prototype.External = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.External);
    } else {
        return this.getToken(SolidityParser.External, i);
    }
};


FallbackFunctionDefinitionContext.prototype.stateMutability = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StateMutabilityContext);
    } else {
        return this.getTypedRuleContext(StateMutabilityContext,i);
    }
};

FallbackFunctionDefinitionContext.prototype.modifierInvocation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierInvocationContext);
    } else {
        return this.getTypedRuleContext(ModifierInvocationContext,i);
    }
};

FallbackFunctionDefinitionContext.prototype.Virtual = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Virtual);
    } else {
        return this.getToken(SolidityParser.Virtual, i);
    }
};


FallbackFunctionDefinitionContext.prototype.overrideSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OverrideSpecifierContext);
    } else {
        return this.getTypedRuleContext(OverrideSpecifierContext,i);
    }
};

FallbackFunctionDefinitionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FallbackFunctionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterFallbackFunctionDefinition(this);
	}
};

FallbackFunctionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitFallbackFunctionDefinition(this);
	}
};




SolidityParser.FallbackFunctionDefinitionContext = FallbackFunctionDefinitionContext;

SolidityParser.prototype.fallbackFunctionDefinition = function() {

    var localctx = new FallbackFunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SolidityParser.RULE_fallbackFunctionDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 478;
        localctx.kind = this.match(SolidityParser.Fallback);
        this.state = 479;
        this.match(SolidityParser.LParen);
        this.state = 483;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        if(la_===1) {
            this.state = 480;
            this.parameterList();
             localctx.hasParameters =  true 

        }
        this.state = 485;
        this.match(SolidityParser.RParen);
        this.state = 503;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,44,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 501;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 486;
                    if (!( !localctx.visibilitySet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$visibilitySet");
                    }
                    this.state = 487;
                    this.match(SolidityParser.External);
                    localctx.visibilitySet =  true
                    break;

                case 2:
                    this.state = 489;
                    if (!( !localctx.mutabilitySet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$mutabilitySet");
                    }
                    this.state = 490;
                    this.stateMutability();
                    localctx.mutabilitySet =  true
                    break;

                case 3:
                    this.state = 493;
                    this.modifierInvocation();
                    break;

                case 4:
                    this.state = 494;
                    if (!( !localctx.virtualSet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$virtualSet");
                    }
                    this.state = 495;
                    this.match(SolidityParser.Virtual);
                    localctx.virtualSet =  true
                    break;

                case 5:
                    this.state = 497;
                    if (!( !localctx.overrideSpecifierSet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$overrideSpecifierSet");
                    }
                    this.state = 498;
                    this.overrideSpecifier();
                    localctx.overrideSpecifierSet =  true
                    break;

                } 
            }
            this.state = 505;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,44,this._ctx);
        }

        this.state = 513;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        switch(la_) {
        case 1:
            this.state = 506;
            if (!( localctx.hasParameters)) {
                throw new antlr4.error.FailedPredicateException(this, "$hasParameters");
            }
            this.state = 507;
            this.match(SolidityParser.Returns);
            this.state = 508;
            this.match(SolidityParser.LParen);
            this.state = 509;
            localctx.returnParameters = this.parameterList();
            this.state = 510;
            this.match(SolidityParser.RParen);
            break;

        case 2:
            this.state = 512;
            if (!( !localctx.hasParameters)) {
                throw new antlr4.error.FailedPredicateException(this, "!$hasParameters");
            }
            break;

        }
        this.state = 517;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.Semicolon:
            this.state = 515;
            this.match(SolidityParser.Semicolon);
            break;
        case SolidityParser.LBrace:
            this.state = 516;
            localctx.body = this.block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReceiveFunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_receiveFunctionDefinition;
    this.visibilitySet = false
    this.mutabilitySet = false
    this.virtualSet = false
    this.overrideSpecifierSet = false
    this.kind = null; // Token
    this.body = null; // BlockContext
    return this;
}

ReceiveFunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReceiveFunctionDefinitionContext.prototype.constructor = ReceiveFunctionDefinitionContext;

ReceiveFunctionDefinitionContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

ReceiveFunctionDefinitionContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

ReceiveFunctionDefinitionContext.prototype.Receive = function() {
    return this.getToken(SolidityParser.Receive, 0);
};

ReceiveFunctionDefinitionContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

ReceiveFunctionDefinitionContext.prototype.External = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.External);
    } else {
        return this.getToken(SolidityParser.External, i);
    }
};


ReceiveFunctionDefinitionContext.prototype.Payable = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Payable);
    } else {
        return this.getToken(SolidityParser.Payable, i);
    }
};


ReceiveFunctionDefinitionContext.prototype.modifierInvocation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierInvocationContext);
    } else {
        return this.getTypedRuleContext(ModifierInvocationContext,i);
    }
};

ReceiveFunctionDefinitionContext.prototype.Virtual = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Virtual);
    } else {
        return this.getToken(SolidityParser.Virtual, i);
    }
};


ReceiveFunctionDefinitionContext.prototype.overrideSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OverrideSpecifierContext);
    } else {
        return this.getTypedRuleContext(OverrideSpecifierContext,i);
    }
};

ReceiveFunctionDefinitionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ReceiveFunctionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterReceiveFunctionDefinition(this);
	}
};

ReceiveFunctionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitReceiveFunctionDefinition(this);
	}
};




SolidityParser.ReceiveFunctionDefinitionContext = ReceiveFunctionDefinitionContext;

SolidityParser.prototype.receiveFunctionDefinition = function() {

    var localctx = new ReceiveFunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SolidityParser.RULE_receiveFunctionDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 519;
        localctx.kind = this.match(SolidityParser.Receive);
        this.state = 520;
        this.match(SolidityParser.LParen);
        this.state = 521;
        this.match(SolidityParser.RParen);
        this.state = 538;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 536;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 522;
                    if (!( !localctx.visibilitySet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$visibilitySet");
                    }
                    this.state = 523;
                    this.match(SolidityParser.External);
                    localctx.visibilitySet =  true
                    break;

                case 2:
                    this.state = 525;
                    if (!( !localctx.mutabilitySet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$mutabilitySet");
                    }
                    this.state = 526;
                    this.match(SolidityParser.Payable);
                    localctx.mutabilitySet =  true
                    break;

                case 3:
                    this.state = 528;
                    this.modifierInvocation();
                    break;

                case 4:
                    this.state = 529;
                    if (!( !localctx.virtualSet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$virtualSet");
                    }
                    this.state = 530;
                    this.match(SolidityParser.Virtual);
                    localctx.virtualSet =  true
                    break;

                case 5:
                    this.state = 532;
                    if (!( !localctx.overrideSpecifierSet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$overrideSpecifierSet");
                    }
                    this.state = 533;
                    this.overrideSpecifier();
                    localctx.overrideSpecifierSet =  true
                    break;

                } 
            }
            this.state = 540;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
        }

        this.state = 543;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.Semicolon:
            this.state = 541;
            this.match(SolidityParser.Semicolon);
            break;
        case SolidityParser.LBrace:
            this.state = 542;
            localctx.body = this.block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_structDefinition;
    this.name = null; // IdentifierContext
    this.members = null; // StructMemberContext
    return this;
}

StructDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDefinitionContext.prototype.constructor = StructDefinitionContext;

StructDefinitionContext.prototype.Struct = function() {
    return this.getToken(SolidityParser.Struct, 0);
};

StructDefinitionContext.prototype.LBrace = function() {
    return this.getToken(SolidityParser.LBrace, 0);
};

StructDefinitionContext.prototype.RBrace = function() {
    return this.getToken(SolidityParser.RBrace, 0);
};

StructDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

StructDefinitionContext.prototype.structMember = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StructMemberContext);
    } else {
        return this.getTypedRuleContext(StructMemberContext,i);
    }
};

StructDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterStructDefinition(this);
	}
};

StructDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitStructDefinition(this);
	}
};




SolidityParser.StructDefinitionContext = StructDefinitionContext;

SolidityParser.prototype.structDefinition = function() {

    var localctx = new StructDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SolidityParser.RULE_structDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 545;
        this.match(SolidityParser.Struct);
        this.state = 546;
        localctx.name = this.identifier();
        this.state = 547;
        this.match(SolidityParser.LBrace);
        this.state = 549; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 548;
        		localctx.members = this.structMember();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 551; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,50, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 553;
        this.match(SolidityParser.RBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructMemberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_structMember;
    this.type = null; // TypeNameContext
    this.name = null; // IdentifierContext
    return this;
}

StructMemberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructMemberContext.prototype.constructor = StructMemberContext;

StructMemberContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

StructMemberContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

StructMemberContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

StructMemberContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterStructMember(this);
	}
};

StructMemberContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitStructMember(this);
	}
};




SolidityParser.StructMemberContext = StructMemberContext;

SolidityParser.prototype.structMember = function() {

    var localctx = new StructMemberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SolidityParser.RULE_structMember);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 555;
        localctx.type = this.typeName(0);
        this.state = 556;
        localctx.name = this.identifier();
        this.state = 557;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_enumDefinition;
    this.name = null; // IdentifierContext
    this._identifier = null; // IdentifierContext
    this.enumValues = []; // of IdentifierContexts
    return this;
}

EnumDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDefinitionContext.prototype.constructor = EnumDefinitionContext;

EnumDefinitionContext.prototype.Enum = function() {
    return this.getToken(SolidityParser.Enum, 0);
};

EnumDefinitionContext.prototype.LBrace = function() {
    return this.getToken(SolidityParser.LBrace, 0);
};

EnumDefinitionContext.prototype.RBrace = function() {
    return this.getToken(SolidityParser.RBrace, 0);
};

EnumDefinitionContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

EnumDefinitionContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Comma);
    } else {
        return this.getToken(SolidityParser.Comma, i);
    }
};


EnumDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterEnumDefinition(this);
	}
};

EnumDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitEnumDefinition(this);
	}
};




SolidityParser.EnumDefinitionContext = EnumDefinitionContext;

SolidityParser.prototype.enumDefinition = function() {

    var localctx = new EnumDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SolidityParser.RULE_enumDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 559;
        this.match(SolidityParser.Enum);
        this.state = 560;
        localctx.name = this.identifier();
        this.state = 561;
        this.match(SolidityParser.LBrace);
        this.state = 562;
        localctx._identifier = this.identifier();
        localctx.enumValues.push(localctx._identifier);
        this.state = 567;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.Comma) {
            this.state = 563;
            this.match(SolidityParser.Comma);
            this.state = 564;
            localctx._identifier = this.identifier();
            localctx.enumValues.push(localctx._identifier);
            this.state = 569;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 570;
        this.match(SolidityParser.RBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserDefinedValueTypeDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_userDefinedValueTypeDefinition;
    this.name = null; // IdentifierContext
    return this;
}

UserDefinedValueTypeDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserDefinedValueTypeDefinitionContext.prototype.constructor = UserDefinedValueTypeDefinitionContext;

UserDefinedValueTypeDefinitionContext.prototype.Type = function() {
    return this.getToken(SolidityParser.Type, 0);
};

UserDefinedValueTypeDefinitionContext.prototype.Is = function() {
    return this.getToken(SolidityParser.Is, 0);
};

UserDefinedValueTypeDefinitionContext.prototype.elementaryTypeName = function() {
    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
};

UserDefinedValueTypeDefinitionContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

UserDefinedValueTypeDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

UserDefinedValueTypeDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterUserDefinedValueTypeDefinition(this);
	}
};

UserDefinedValueTypeDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitUserDefinedValueTypeDefinition(this);
	}
};




SolidityParser.UserDefinedValueTypeDefinitionContext = UserDefinedValueTypeDefinitionContext;

SolidityParser.prototype.userDefinedValueTypeDefinition = function() {

    var localctx = new UserDefinedValueTypeDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SolidityParser.RULE_userDefinedValueTypeDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 572;
        this.match(SolidityParser.Type);
        this.state = 573;
        localctx.name = this.identifier();
        this.state = 574;
        this.match(SolidityParser.Is);
        this.state = 575;
        this.elementaryTypeName(true);
        this.state = 576;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StateVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_stateVariableDeclaration;
    this.constantnessSet = false
    this.visibilitySet = false
    this.overrideSpecifierSet = false
    this.type = null; // TypeNameContext
    this.name = null; // IdentifierContext
    this.initialValue = null; // ExpressionContext
    return this;
}

StateVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateVariableDeclarationContext.prototype.constructor = StateVariableDeclarationContext;

StateVariableDeclarationContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

StateVariableDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

StateVariableDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

StateVariableDeclarationContext.prototype.Public = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Public);
    } else {
        return this.getToken(SolidityParser.Public, i);
    }
};


StateVariableDeclarationContext.prototype.Private = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Private);
    } else {
        return this.getToken(SolidityParser.Private, i);
    }
};


StateVariableDeclarationContext.prototype.Internal = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Internal);
    } else {
        return this.getToken(SolidityParser.Internal, i);
    }
};


StateVariableDeclarationContext.prototype.Constant = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Constant);
    } else {
        return this.getToken(SolidityParser.Constant, i);
    }
};


StateVariableDeclarationContext.prototype.overrideSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OverrideSpecifierContext);
    } else {
        return this.getTypedRuleContext(OverrideSpecifierContext,i);
    }
};

StateVariableDeclarationContext.prototype.Immutable = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Immutable);
    } else {
        return this.getToken(SolidityParser.Immutable, i);
    }
};


StateVariableDeclarationContext.prototype.Assign = function() {
    return this.getToken(SolidityParser.Assign, 0);
};

StateVariableDeclarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StateVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterStateVariableDeclaration(this);
	}
};

StateVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitStateVariableDeclaration(this);
	}
};




SolidityParser.StateVariableDeclarationContext = StateVariableDeclarationContext;

SolidityParser.prototype.stateVariableDeclaration = function() {

    var localctx = new StateVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SolidityParser.RULE_stateVariableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 578;
        localctx.type = this.typeName(0);
        this.state = 600;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,53,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 598;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 579;
                    if (!( !localctx.visibilitySet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$visibilitySet");
                    }
                    this.state = 580;
                    this.match(SolidityParser.Public);
                    localctx.visibilitySet =  true
                    break;

                case 2:
                    this.state = 582;
                    if (!( !localctx.visibilitySet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$visibilitySet");
                    }
                    this.state = 583;
                    this.match(SolidityParser.Private);
                    localctx.visibilitySet =  true
                    break;

                case 3:
                    this.state = 585;
                    if (!( !localctx.visibilitySet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$visibilitySet");
                    }
                    this.state = 586;
                    this.match(SolidityParser.Internal);
                    localctx.visibilitySet =  true
                    break;

                case 4:
                    this.state = 588;
                    if (!( !localctx.constantnessSet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$constantnessSet");
                    }
                    this.state = 589;
                    this.match(SolidityParser.Constant);
                    localctx.constantnessSet =  true
                    break;

                case 5:
                    this.state = 591;
                    if (!( !localctx.overrideSpecifierSet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$overrideSpecifierSet");
                    }
                    this.state = 592;
                    this.overrideSpecifier();
                    localctx.overrideSpecifierSet =  true
                    break;

                case 6:
                    this.state = 595;
                    if (!( !localctx.constantnessSet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$constantnessSet");
                    }
                    this.state = 596;
                    this.match(SolidityParser.Immutable);
                    localctx.constantnessSet =  true
                    break;

                } 
            }
            this.state = 602;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,53,this._ctx);
        }

        this.state = 603;
        localctx.name = this.identifier();
        this.state = 606;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Assign) {
            this.state = 604;
            this.match(SolidityParser.Assign);
            this.state = 605;
            localctx.initialValue = this.expression(0);
        }

        this.state = 608;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_constantVariableDeclaration;
    this.type = null; // TypeNameContext
    this.name = null; // IdentifierContext
    this.initialValue = null; // ExpressionContext
    return this;
}

ConstantVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantVariableDeclarationContext.prototype.constructor = ConstantVariableDeclarationContext;

ConstantVariableDeclarationContext.prototype.Constant = function() {
    return this.getToken(SolidityParser.Constant, 0);
};

ConstantVariableDeclarationContext.prototype.Assign = function() {
    return this.getToken(SolidityParser.Assign, 0);
};

ConstantVariableDeclarationContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

ConstantVariableDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

ConstantVariableDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ConstantVariableDeclarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConstantVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterConstantVariableDeclaration(this);
	}
};

ConstantVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitConstantVariableDeclaration(this);
	}
};




SolidityParser.ConstantVariableDeclarationContext = ConstantVariableDeclarationContext;

SolidityParser.prototype.constantVariableDeclaration = function() {

    var localctx = new ConstantVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SolidityParser.RULE_constantVariableDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 610;
        localctx.type = this.typeName(0);
        this.state = 611;
        this.match(SolidityParser.Constant);
        this.state = 612;
        localctx.name = this.identifier();
        this.state = 613;
        this.match(SolidityParser.Assign);
        this.state = 614;
        localctx.initialValue = this.expression(0);
        this.state = 615;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EventParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_eventParameter;
    this.type = null; // TypeNameContext
    this.name = null; // IdentifierContext
    return this;
}

EventParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventParameterContext.prototype.constructor = EventParameterContext;

EventParameterContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

EventParameterContext.prototype.Indexed = function() {
    return this.getToken(SolidityParser.Indexed, 0);
};

EventParameterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

EventParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterEventParameter(this);
	}
};

EventParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitEventParameter(this);
	}
};




SolidityParser.EventParameterContext = EventParameterContext;

SolidityParser.prototype.eventParameter = function() {

    var localctx = new EventParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SolidityParser.RULE_eventParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 617;
        localctx.type = this.typeName(0);
        this.state = 619;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Indexed) {
            this.state = 618;
            this.match(SolidityParser.Indexed);
        }

        this.state = 622;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.Error) | (1 << SolidityParser.Revert) | (1 << SolidityParser.From))) !== 0) || _la===SolidityParser.Identifier) {
            this.state = 621;
            localctx.name = this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EventDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_eventDefinition;
    this.name = null; // IdentifierContext
    this._eventParameter = null; // EventParameterContext
    this.parameters = []; // of EventParameterContexts
    return this;
}

EventDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventDefinitionContext.prototype.constructor = EventDefinitionContext;

EventDefinitionContext.prototype.Event = function() {
    return this.getToken(SolidityParser.Event, 0);
};

EventDefinitionContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

EventDefinitionContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

EventDefinitionContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

EventDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

EventDefinitionContext.prototype.Anonymous = function() {
    return this.getToken(SolidityParser.Anonymous, 0);
};

EventDefinitionContext.prototype.eventParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EventParameterContext);
    } else {
        return this.getTypedRuleContext(EventParameterContext,i);
    }
};

EventDefinitionContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Comma);
    } else {
        return this.getToken(SolidityParser.Comma, i);
    }
};


EventDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterEventDefinition(this);
	}
};

EventDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitEventDefinition(this);
	}
};




SolidityParser.EventDefinitionContext = EventDefinitionContext;

SolidityParser.prototype.eventDefinition = function() {

    var localctx = new EventDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SolidityParser.RULE_eventDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 624;
        this.match(SolidityParser.Event);
        this.state = 625;
        localctx.name = this.identifier();
        this.state = 626;
        this.match(SolidityParser.LParen);
        this.state = 635;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        if(la_===1) {
            this.state = 627;
            localctx._eventParameter = this.eventParameter();
            localctx.parameters.push(localctx._eventParameter);
            this.state = 632;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.Comma) {
                this.state = 628;
                this.match(SolidityParser.Comma);
                this.state = 629;
                localctx._eventParameter = this.eventParameter();
                localctx.parameters.push(localctx._eventParameter);
                this.state = 634;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
        this.state = 637;
        this.match(SolidityParser.RParen);
        this.state = 639;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Anonymous) {
            this.state = 638;
            this.match(SolidityParser.Anonymous);
        }

        this.state = 641;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ErrorParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_errorParameter;
    this.type = null; // TypeNameContext
    this.name = null; // IdentifierContext
    return this;
}

ErrorParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErrorParameterContext.prototype.constructor = ErrorParameterContext;

ErrorParameterContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

ErrorParameterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ErrorParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterErrorParameter(this);
	}
};

ErrorParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitErrorParameter(this);
	}
};




SolidityParser.ErrorParameterContext = ErrorParameterContext;

SolidityParser.prototype.errorParameter = function() {

    var localctx = new ErrorParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SolidityParser.RULE_errorParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 643;
        localctx.type = this.typeName(0);
        this.state = 645;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.Error) | (1 << SolidityParser.Revert) | (1 << SolidityParser.From))) !== 0) || _la===SolidityParser.Identifier) {
            this.state = 644;
            localctx.name = this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ErrorDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_errorDefinition;
    this.name = null; // IdentifierContext
    this._errorParameter = null; // ErrorParameterContext
    this.parameters = []; // of ErrorParameterContexts
    return this;
}

ErrorDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErrorDefinitionContext.prototype.constructor = ErrorDefinitionContext;

ErrorDefinitionContext.prototype.Error = function() {
    return this.getToken(SolidityParser.Error, 0);
};

ErrorDefinitionContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

ErrorDefinitionContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

ErrorDefinitionContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

ErrorDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ErrorDefinitionContext.prototype.errorParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ErrorParameterContext);
    } else {
        return this.getTypedRuleContext(ErrorParameterContext,i);
    }
};

ErrorDefinitionContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Comma);
    } else {
        return this.getToken(SolidityParser.Comma, i);
    }
};


ErrorDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterErrorDefinition(this);
	}
};

ErrorDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitErrorDefinition(this);
	}
};




SolidityParser.ErrorDefinitionContext = ErrorDefinitionContext;

SolidityParser.prototype.errorDefinition = function() {

    var localctx = new ErrorDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SolidityParser.RULE_errorDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 647;
        this.match(SolidityParser.Error);
        this.state = 648;
        localctx.name = this.identifier();
        this.state = 649;
        this.match(SolidityParser.LParen);
        this.state = 658;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        if(la_===1) {
            this.state = 650;
            localctx._errorParameter = this.errorParameter();
            localctx.parameters.push(localctx._errorParameter);
            this.state = 655;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.Comma) {
                this.state = 651;
                this.match(SolidityParser.Comma);
                this.state = 652;
                localctx._errorParameter = this.errorParameter();
                localctx.parameters.push(localctx._errorParameter);
                this.state = 657;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
        this.state = 660;
        this.match(SolidityParser.RParen);
        this.state = 661;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UsingDirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_usingDirective;
    return this;
}

UsingDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingDirectiveContext.prototype.constructor = UsingDirectiveContext;

UsingDirectiveContext.prototype.Using = function() {
    return this.getToken(SolidityParser.Using, 0);
};

UsingDirectiveContext.prototype.identifierPath = function() {
    return this.getTypedRuleContext(IdentifierPathContext,0);
};

UsingDirectiveContext.prototype.For = function() {
    return this.getToken(SolidityParser.For, 0);
};

UsingDirectiveContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

UsingDirectiveContext.prototype.Mul = function() {
    return this.getToken(SolidityParser.Mul, 0);
};

UsingDirectiveContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

UsingDirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterUsingDirective(this);
	}
};

UsingDirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitUsingDirective(this);
	}
};




SolidityParser.UsingDirectiveContext = UsingDirectiveContext;

SolidityParser.prototype.usingDirective = function() {

    var localctx = new UsingDirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SolidityParser.RULE_usingDirective);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 663;
        this.match(SolidityParser.Using);
        this.state = 664;
        this.identifierPath();
        this.state = 665;
        this.match(SolidityParser.For);
        this.state = 668;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        switch(la_) {
        case 1:
            this.state = 666;
            this.match(SolidityParser.Mul);
            break;

        case 2:
            this.state = 667;
            this.typeName(0);
            break;

        }
        this.state = 670;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_typeName;
    return this;
}

TypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameContext.prototype.constructor = TypeNameContext;

TypeNameContext.prototype.elementaryTypeName = function() {
    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
};

TypeNameContext.prototype.functionTypeName = function() {
    return this.getTypedRuleContext(FunctionTypeNameContext,0);
};

TypeNameContext.prototype.mappingType = function() {
    return this.getTypedRuleContext(MappingTypeContext,0);
};

TypeNameContext.prototype.identifierPath = function() {
    return this.getTypedRuleContext(IdentifierPathContext,0);
};

TypeNameContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

TypeNameContext.prototype.LBrack = function() {
    return this.getToken(SolidityParser.LBrack, 0);
};

TypeNameContext.prototype.RBrack = function() {
    return this.getToken(SolidityParser.RBrack, 0);
};

TypeNameContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterTypeName(this);
	}
};

TypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitTypeName(this);
	}
};



SolidityParser.prototype.typeName = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeNameContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 74;
    this.enterRecursionRule(localctx, 74, SolidityParser.RULE_typeName, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 677;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            this.state = 673;
            this.elementaryTypeName(true);
            break;

        case 2:
            this.state = 674;
            this.functionTypeName();
            break;

        case 3:
            this.state = 675;
            this.mappingType();
            break;

        case 4:
            this.state = 676;
            this.identifierPath();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 687;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,66,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeNameContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_typeName);
                this.state = 679;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 680;
                this.match(SolidityParser.LBrack);
                this.state = 682;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
                if(la_===1) {
                    this.state = 681;
                    this.expression(0);

                }
                this.state = 684;
                this.match(SolidityParser.RBrack); 
            }
            this.state = 689;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,66,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ElementaryTypeNameContext(parser, parent, invokingState, allowAddressPayable) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_elementaryTypeName;
    this.allowAddressPayable = null
    this.allowAddressPayable = allowAddressPayable || null;
    return this;
}

ElementaryTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementaryTypeNameContext.prototype.constructor = ElementaryTypeNameContext;

ElementaryTypeNameContext.prototype.Address = function() {
    return this.getToken(SolidityParser.Address, 0);
};

ElementaryTypeNameContext.prototype.Payable = function() {
    return this.getToken(SolidityParser.Payable, 0);
};

ElementaryTypeNameContext.prototype.Bool = function() {
    return this.getToken(SolidityParser.Bool, 0);
};

ElementaryTypeNameContext.prototype.String = function() {
    return this.getToken(SolidityParser.String, 0);
};

ElementaryTypeNameContext.prototype.Bytes = function() {
    return this.getToken(SolidityParser.Bytes, 0);
};

ElementaryTypeNameContext.prototype.SignedIntegerType = function() {
    return this.getToken(SolidityParser.SignedIntegerType, 0);
};

ElementaryTypeNameContext.prototype.UnsignedIntegerType = function() {
    return this.getToken(SolidityParser.UnsignedIntegerType, 0);
};

ElementaryTypeNameContext.prototype.FixedBytes = function() {
    return this.getToken(SolidityParser.FixedBytes, 0);
};

ElementaryTypeNameContext.prototype.Fixed = function() {
    return this.getToken(SolidityParser.Fixed, 0);
};

ElementaryTypeNameContext.prototype.Ufixed = function() {
    return this.getToken(SolidityParser.Ufixed, 0);
};

ElementaryTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterElementaryTypeName(this);
	}
};

ElementaryTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitElementaryTypeName(this);
	}
};




SolidityParser.ElementaryTypeNameContext = ElementaryTypeNameContext;

SolidityParser.prototype.elementaryTypeName = function(allowAddressPayable) {

    var localctx = new ElementaryTypeNameContext(this, this._ctx, this.state, allowAddressPayable);
    this.enterRule(localctx, 76, SolidityParser.RULE_elementaryTypeName);
    try {
        this.state = 702;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 690;
            this.match(SolidityParser.Address);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 691;
            if (!( localctx.allowAddressPayable)) {
                throw new antlr4.error.FailedPredicateException(this, "$allowAddressPayable");
            }
            this.state = 692;
            this.match(SolidityParser.Address);
            this.state = 693;
            this.match(SolidityParser.Payable);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 694;
            this.match(SolidityParser.Bool);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 695;
            this.match(SolidityParser.String);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 696;
            this.match(SolidityParser.Bytes);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 697;
            this.match(SolidityParser.SignedIntegerType);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 698;
            this.match(SolidityParser.UnsignedIntegerType);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 699;
            this.match(SolidityParser.FixedBytes);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 700;
            this.match(SolidityParser.Fixed);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 701;
            this.match(SolidityParser.Ufixed);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionTypeName;
    this.visibilitySet = false
    this.mutabilitySet = false
    this.arguments = null; // ParameterListContext
    this.returnParameters = null; // ParameterListContext
    return this;
}

FunctionTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTypeNameContext.prototype.constructor = FunctionTypeNameContext;

FunctionTypeNameContext.prototype.Function = function() {
    return this.getToken(SolidityParser.Function, 0);
};

FunctionTypeNameContext.prototype.LParen = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.LParen);
    } else {
        return this.getToken(SolidityParser.LParen, i);
    }
};


FunctionTypeNameContext.prototype.RParen = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.RParen);
    } else {
        return this.getToken(SolidityParser.RParen, i);
    }
};


FunctionTypeNameContext.prototype.visibility = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VisibilityContext);
    } else {
        return this.getTypedRuleContext(VisibilityContext,i);
    }
};

FunctionTypeNameContext.prototype.stateMutability = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StateMutabilityContext);
    } else {
        return this.getTypedRuleContext(StateMutabilityContext,i);
    }
};

FunctionTypeNameContext.prototype.Returns = function() {
    return this.getToken(SolidityParser.Returns, 0);
};

FunctionTypeNameContext.prototype.parameterList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterListContext);
    } else {
        return this.getTypedRuleContext(ParameterListContext,i);
    }
};

FunctionTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterFunctionTypeName(this);
	}
};

FunctionTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitFunctionTypeName(this);
	}
};




SolidityParser.FunctionTypeNameContext = FunctionTypeNameContext;

SolidityParser.prototype.functionTypeName = function() {

    var localctx = new FunctionTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SolidityParser.RULE_functionTypeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 704;
        this.match(SolidityParser.Function);
        this.state = 705;
        this.match(SolidityParser.LParen);
        this.state = 707;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        if(la_===1) {
            this.state = 706;
            localctx.arguments = this.parameterList();

        }
        this.state = 709;
        this.match(SolidityParser.RParen);
        this.state = 720;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 718;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 710;
                    if (!( !localctx.visibilitySet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$visibilitySet");
                    }
                    this.state = 711;
                    this.visibility();
                    localctx.visibilitySet =  true
                    break;

                case 2:
                    this.state = 714;
                    if (!( !localctx.mutabilitySet)) {
                        throw new antlr4.error.FailedPredicateException(this, "!$mutabilitySet");
                    }
                    this.state = 715;
                    this.stateMutability();
                    localctx.mutabilitySet =  true
                    break;

                } 
            }
            this.state = 722;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
        }

        this.state = 728;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        if(la_===1) {
            this.state = 723;
            this.match(SolidityParser.Returns);
            this.state = 724;
            this.match(SolidityParser.LParen);
            this.state = 725;
            localctx.returnParameters = this.parameterList();
            this.state = 726;
            this.match(SolidityParser.RParen);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_variableDeclaration;
    this.type = null; // TypeNameContext
    this.location = null; // DataLocationContext
    this.name = null; // IdentifierContext
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

VariableDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

VariableDeclarationContext.prototype.dataLocation = function() {
    return this.getTypedRuleContext(DataLocationContext,0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitVariableDeclaration(this);
	}
};




SolidityParser.VariableDeclarationContext = VariableDeclarationContext;

SolidityParser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SolidityParser.RULE_variableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 730;
        localctx.type = this.typeName(0);
        this.state = 732;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Calldata || _la===SolidityParser.Memory || _la===SolidityParser.Storage) {
            this.state = 731;
            localctx.location = this.dataLocation();
        }

        this.state = 734;
        localctx.name = this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataLocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_dataLocation;
    return this;
}

DataLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataLocationContext.prototype.constructor = DataLocationContext;

DataLocationContext.prototype.Memory = function() {
    return this.getToken(SolidityParser.Memory, 0);
};

DataLocationContext.prototype.Storage = function() {
    return this.getToken(SolidityParser.Storage, 0);
};

DataLocationContext.prototype.Calldata = function() {
    return this.getToken(SolidityParser.Calldata, 0);
};

DataLocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterDataLocation(this);
	}
};

DataLocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitDataLocation(this);
	}
};




SolidityParser.DataLocationContext = DataLocationContext;

SolidityParser.prototype.dataLocation = function() {

    var localctx = new DataLocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SolidityParser.RULE_dataLocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 736;
        _la = this._input.LA(1);
        if(!(_la===SolidityParser.Calldata || _la===SolidityParser.Memory || _la===SolidityParser.Storage)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function UnaryPrefixOperationContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryPrefixOperationContext.prototype = Object.create(ExpressionContext.prototype);
UnaryPrefixOperationContext.prototype.constructor = UnaryPrefixOperationContext;

SolidityParser.UnaryPrefixOperationContext = UnaryPrefixOperationContext;

UnaryPrefixOperationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

UnaryPrefixOperationContext.prototype.Inc = function() {
    return this.getToken(SolidityParser.Inc, 0);
};

UnaryPrefixOperationContext.prototype.Dec = function() {
    return this.getToken(SolidityParser.Dec, 0);
};

UnaryPrefixOperationContext.prototype.Not = function() {
    return this.getToken(SolidityParser.Not, 0);
};

UnaryPrefixOperationContext.prototype.BitNot = function() {
    return this.getToken(SolidityParser.BitNot, 0);
};

UnaryPrefixOperationContext.prototype.Delete = function() {
    return this.getToken(SolidityParser.Delete, 0);
};

UnaryPrefixOperationContext.prototype.Sub = function() {
    return this.getToken(SolidityParser.Sub, 0);
};
UnaryPrefixOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterUnaryPrefixOperation(this);
	}
};

UnaryPrefixOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitUnaryPrefixOperation(this);
	}
};


function PrimaryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

SolidityParser.PrimaryExpressionContext = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrimaryExpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryExpressionContext.prototype.elementaryTypeName = function() {
    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
};
PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitPrimaryExpression(this);
	}
};


function OrderComparisonContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OrderComparisonContext.prototype = Object.create(ExpressionContext.prototype);
OrderComparisonContext.prototype.constructor = OrderComparisonContext;

SolidityParser.OrderComparisonContext = OrderComparisonContext;

OrderComparisonContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

OrderComparisonContext.prototype.LessThan = function() {
    return this.getToken(SolidityParser.LessThan, 0);
};

OrderComparisonContext.prototype.GreaterThan = function() {
    return this.getToken(SolidityParser.GreaterThan, 0);
};

OrderComparisonContext.prototype.LessThanOrEqual = function() {
    return this.getToken(SolidityParser.LessThanOrEqual, 0);
};

OrderComparisonContext.prototype.GreaterThanOrEqual = function() {
    return this.getToken(SolidityParser.GreaterThanOrEqual, 0);
};
OrderComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterOrderComparison(this);
	}
};

OrderComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitOrderComparison(this);
	}
};


function ConditionalContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConditionalContext.prototype = Object.create(ExpressionContext.prototype);
ConditionalContext.prototype.constructor = ConditionalContext;

SolidityParser.ConditionalContext = ConditionalContext;

ConditionalContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ConditionalContext.prototype.Conditional = function() {
    return this.getToken(SolidityParser.Conditional, 0);
};

ConditionalContext.prototype.Colon = function() {
    return this.getToken(SolidityParser.Colon, 0);
};
ConditionalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterConditional(this);
	}
};

ConditionalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitConditional(this);
	}
};


function PayableConversionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PayableConversionContext.prototype = Object.create(ExpressionContext.prototype);
PayableConversionContext.prototype.constructor = PayableConversionContext;

SolidityParser.PayableConversionContext = PayableConversionContext;

PayableConversionContext.prototype.Payable = function() {
    return this.getToken(SolidityParser.Payable, 0);
};

PayableConversionContext.prototype.callArgumentList = function() {
    return this.getTypedRuleContext(CallArgumentListContext,0);
};
PayableConversionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterPayableConversion(this);
	}
};

PayableConversionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitPayableConversion(this);
	}
};


function AssignmentContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentContext.prototype = Object.create(ExpressionContext.prototype);
AssignmentContext.prototype.constructor = AssignmentContext;

SolidityParser.AssignmentContext = AssignmentContext;

AssignmentContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AssignmentContext.prototype.assignOp = function() {
    return this.getTypedRuleContext(AssignOpContext,0);
};
AssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterAssignment(this);
	}
};

AssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitAssignment(this);
	}
};


function UnarySuffixOperationContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnarySuffixOperationContext.prototype = Object.create(ExpressionContext.prototype);
UnarySuffixOperationContext.prototype.constructor = UnarySuffixOperationContext;

SolidityParser.UnarySuffixOperationContext = UnarySuffixOperationContext;

UnarySuffixOperationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

UnarySuffixOperationContext.prototype.Inc = function() {
    return this.getToken(SolidityParser.Inc, 0);
};

UnarySuffixOperationContext.prototype.Dec = function() {
    return this.getToken(SolidityParser.Dec, 0);
};
UnarySuffixOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterUnarySuffixOperation(this);
	}
};

UnarySuffixOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitUnarySuffixOperation(this);
	}
};


function ShiftOperationContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShiftOperationContext.prototype = Object.create(ExpressionContext.prototype);
ShiftOperationContext.prototype.constructor = ShiftOperationContext;

SolidityParser.ShiftOperationContext = ShiftOperationContext;

ShiftOperationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ShiftOperationContext.prototype.Shl = function() {
    return this.getToken(SolidityParser.Shl, 0);
};

ShiftOperationContext.prototype.Sar = function() {
    return this.getToken(SolidityParser.Sar, 0);
};

ShiftOperationContext.prototype.Shr = function() {
    return this.getToken(SolidityParser.Shr, 0);
};
ShiftOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterShiftOperation(this);
	}
};

ShiftOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitShiftOperation(this);
	}
};


function BitAndOperationContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitAndOperationContext.prototype = Object.create(ExpressionContext.prototype);
BitAndOperationContext.prototype.constructor = BitAndOperationContext;

SolidityParser.BitAndOperationContext = BitAndOperationContext;

BitAndOperationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

BitAndOperationContext.prototype.BitAnd = function() {
    return this.getToken(SolidityParser.BitAnd, 0);
};
BitAndOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterBitAndOperation(this);
	}
};

BitAndOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitBitAndOperation(this);
	}
};


function FunctionCallContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionCallContext.prototype = Object.create(ExpressionContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

SolidityParser.FunctionCallContext = FunctionCallContext;

FunctionCallContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FunctionCallContext.prototype.callArgumentList = function() {
    return this.getTypedRuleContext(CallArgumentListContext,0);
};
FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterFunctionCall(this);
	}
};

FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitFunctionCall(this);
	}
};


function IndexRangeAccessContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.start = null; // ExpressionContext;
    this.end = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IndexRangeAccessContext.prototype = Object.create(ExpressionContext.prototype);
IndexRangeAccessContext.prototype.constructor = IndexRangeAccessContext;

SolidityParser.IndexRangeAccessContext = IndexRangeAccessContext;

IndexRangeAccessContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

IndexRangeAccessContext.prototype.LBrack = function() {
    return this.getToken(SolidityParser.LBrack, 0);
};

IndexRangeAccessContext.prototype.Colon = function() {
    return this.getToken(SolidityParser.Colon, 0);
};

IndexRangeAccessContext.prototype.RBrack = function() {
    return this.getToken(SolidityParser.RBrack, 0);
};
IndexRangeAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterIndexRangeAccess(this);
	}
};

IndexRangeAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitIndexRangeAccess(this);
	}
};


function NewExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NewExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NewExpressionContext.prototype.constructor = NewExpressionContext;

SolidityParser.NewExpressionContext = NewExpressionContext;

NewExpressionContext.prototype.New = function() {
    return this.getToken(SolidityParser.New, 0);
};

NewExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};
NewExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterNewExpression(this);
	}
};

NewExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitNewExpression(this);
	}
};


function IndexAccessContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.index = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IndexAccessContext.prototype = Object.create(ExpressionContext.prototype);
IndexAccessContext.prototype.constructor = IndexAccessContext;

SolidityParser.IndexAccessContext = IndexAccessContext;

IndexAccessContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

IndexAccessContext.prototype.LBrack = function() {
    return this.getToken(SolidityParser.LBrack, 0);
};

IndexAccessContext.prototype.RBrack = function() {
    return this.getToken(SolidityParser.RBrack, 0);
};
IndexAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterIndexAccess(this);
	}
};

IndexAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitIndexAccess(this);
	}
};


function AddSubOperationContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AddSubOperationContext.prototype = Object.create(ExpressionContext.prototype);
AddSubOperationContext.prototype.constructor = AddSubOperationContext;

SolidityParser.AddSubOperationContext = AddSubOperationContext;

AddSubOperationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AddSubOperationContext.prototype.Add = function() {
    return this.getToken(SolidityParser.Add, 0);
};

AddSubOperationContext.prototype.Sub = function() {
    return this.getToken(SolidityParser.Sub, 0);
};
AddSubOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterAddSubOperation(this);
	}
};

AddSubOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitAddSubOperation(this);
	}
};


function BitOrOperationContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitOrOperationContext.prototype = Object.create(ExpressionContext.prototype);
BitOrOperationContext.prototype.constructor = BitOrOperationContext;

SolidityParser.BitOrOperationContext = BitOrOperationContext;

BitOrOperationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

BitOrOperationContext.prototype.BitOr = function() {
    return this.getToken(SolidityParser.BitOr, 0);
};
BitOrOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterBitOrOperation(this);
	}
};

BitOrOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitBitOrOperation(this);
	}
};


function ExpOperationContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExpOperationContext.prototype = Object.create(ExpressionContext.prototype);
ExpOperationContext.prototype.constructor = ExpOperationContext;

SolidityParser.ExpOperationContext = ExpOperationContext;

ExpOperationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpOperationContext.prototype.Exp = function() {
    return this.getToken(SolidityParser.Exp, 0);
};
ExpOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterExpOperation(this);
	}
};

ExpOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitExpOperation(this);
	}
};


function AndOperationContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AndOperationContext.prototype = Object.create(ExpressionContext.prototype);
AndOperationContext.prototype.constructor = AndOperationContext;

SolidityParser.AndOperationContext = AndOperationContext;

AndOperationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AndOperationContext.prototype.And = function() {
    return this.getToken(SolidityParser.And, 0);
};
AndOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterAndOperation(this);
	}
};

AndOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitAndOperation(this);
	}
};


function InlineArrayContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlineArrayContext.prototype = Object.create(ExpressionContext.prototype);
InlineArrayContext.prototype.constructor = InlineArrayContext;

SolidityParser.InlineArrayContext = InlineArrayContext;

InlineArrayContext.prototype.inlineArrayExpression = function() {
    return this.getTypedRuleContext(InlineArrayExpressionContext,0);
};
InlineArrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterInlineArray(this);
	}
};

InlineArrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitInlineArray(this);
	}
};


function OrOperationContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OrOperationContext.prototype = Object.create(ExpressionContext.prototype);
OrOperationContext.prototype.constructor = OrOperationContext;

SolidityParser.OrOperationContext = OrOperationContext;

OrOperationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

OrOperationContext.prototype.Or = function() {
    return this.getToken(SolidityParser.Or, 0);
};
OrOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterOrOperation(this);
	}
};

OrOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitOrOperation(this);
	}
};


function MemberAccessContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberAccessContext.prototype = Object.create(ExpressionContext.prototype);
MemberAccessContext.prototype.constructor = MemberAccessContext;

SolidityParser.MemberAccessContext = MemberAccessContext;

MemberAccessContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

MemberAccessContext.prototype.Period = function() {
    return this.getToken(SolidityParser.Period, 0);
};

MemberAccessContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

MemberAccessContext.prototype.Address = function() {
    return this.getToken(SolidityParser.Address, 0);
};
MemberAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterMemberAccess(this);
	}
};

MemberAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitMemberAccess(this);
	}
};


function MulDivModOperationContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MulDivModOperationContext.prototype = Object.create(ExpressionContext.prototype);
MulDivModOperationContext.prototype.constructor = MulDivModOperationContext;

SolidityParser.MulDivModOperationContext = MulDivModOperationContext;

MulDivModOperationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

MulDivModOperationContext.prototype.Mul = function() {
    return this.getToken(SolidityParser.Mul, 0);
};

MulDivModOperationContext.prototype.Div = function() {
    return this.getToken(SolidityParser.Div, 0);
};

MulDivModOperationContext.prototype.Mod = function() {
    return this.getToken(SolidityParser.Mod, 0);
};
MulDivModOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterMulDivModOperation(this);
	}
};

MulDivModOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitMulDivModOperation(this);
	}
};


function FunctionCallOptionsContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionCallOptionsContext.prototype = Object.create(ExpressionContext.prototype);
FunctionCallOptionsContext.prototype.constructor = FunctionCallOptionsContext;

SolidityParser.FunctionCallOptionsContext = FunctionCallOptionsContext;

FunctionCallOptionsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FunctionCallOptionsContext.prototype.LBrace = function() {
    return this.getToken(SolidityParser.LBrace, 0);
};

FunctionCallOptionsContext.prototype.RBrace = function() {
    return this.getToken(SolidityParser.RBrace, 0);
};

FunctionCallOptionsContext.prototype.namedArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedArgumentContext);
    } else {
        return this.getTypedRuleContext(NamedArgumentContext,i);
    }
};

FunctionCallOptionsContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Comma);
    } else {
        return this.getToken(SolidityParser.Comma, i);
    }
};

FunctionCallOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterFunctionCallOptions(this);
	}
};

FunctionCallOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitFunctionCallOptions(this);
	}
};


function BitXorOperationContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitXorOperationContext.prototype = Object.create(ExpressionContext.prototype);
BitXorOperationContext.prototype.constructor = BitXorOperationContext;

SolidityParser.BitXorOperationContext = BitXorOperationContext;

BitXorOperationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

BitXorOperationContext.prototype.BitXor = function() {
    return this.getToken(SolidityParser.BitXor, 0);
};
BitXorOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterBitXorOperation(this);
	}
};

BitXorOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitBitXorOperation(this);
	}
};


function TupleContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TupleContext.prototype = Object.create(ExpressionContext.prototype);
TupleContext.prototype.constructor = TupleContext;

SolidityParser.TupleContext = TupleContext;

TupleContext.prototype.tupleExpression = function() {
    return this.getTypedRuleContext(TupleExpressionContext,0);
};
TupleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterTuple(this);
	}
};

TupleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitTuple(this);
	}
};


function EqualityComparisonContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualityComparisonContext.prototype = Object.create(ExpressionContext.prototype);
EqualityComparisonContext.prototype.constructor = EqualityComparisonContext;

SolidityParser.EqualityComparisonContext = EqualityComparisonContext;

EqualityComparisonContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

EqualityComparisonContext.prototype.Equal = function() {
    return this.getToken(SolidityParser.Equal, 0);
};

EqualityComparisonContext.prototype.NotEqual = function() {
    return this.getToken(SolidityParser.NotEqual, 0);
};
EqualityComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterEqualityComparison(this);
	}
};

EqualityComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitEqualityComparison(this);
	}
};


function MetaTypeContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MetaTypeContext.prototype = Object.create(ExpressionContext.prototype);
MetaTypeContext.prototype.constructor = MetaTypeContext;

SolidityParser.MetaTypeContext = MetaTypeContext;

MetaTypeContext.prototype.Type = function() {
    return this.getToken(SolidityParser.Type, 0);
};

MetaTypeContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

MetaTypeContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

MetaTypeContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};
MetaTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterMetaType(this);
	}
};

MetaTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitMetaType(this);
	}
};



SolidityParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 84;
    this.enterRecursionRule(localctx, 84, SolidityParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 757;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PayableConversionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 739;
            this.match(SolidityParser.Payable);
            this.state = 740;
            this.callArgumentList();
            break;

        case 2:
            localctx = new MetaTypeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 741;
            this.match(SolidityParser.Type);
            this.state = 742;
            this.match(SolidityParser.LParen);
            this.state = 743;
            this.typeName(0);
            this.state = 744;
            this.match(SolidityParser.RParen);
            break;

        case 3:
            localctx = new UnaryPrefixOperationContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 746;
            _la = this._input.LA(1);
            if(!(_la===SolidityParser.Delete || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (SolidityParser.Sub - 103)) | (1 << (SolidityParser.Not - 103)) | (1 << (SolidityParser.BitNot - 103)) | (1 << (SolidityParser.Inc - 103)) | (1 << (SolidityParser.Dec - 103)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 747;
            this.expression(19);
            break;

        case 4:
            localctx = new NewExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 748;
            this.match(SolidityParser.New);
            this.state = 749;
            this.typeName(0);
            break;

        case 5:
            localctx = new TupleContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 750;
            this.tupleExpression();
            break;

        case 6:
            localctx = new InlineArrayContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 751;
            this.inlineArrayExpression();
            break;

        case 7:
            localctx = new PrimaryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 755;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
            switch(la_) {
            case 1:
                this.state = 752;
                this.identifier();
                break;

            case 2:
                this.state = 753;
                this.literal();
                break;

            case 3:
                this.state = 754;
                this.elementaryTypeName(false);
                break;

            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 843;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 841;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpOperationContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 759;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 760;
                    this.match(SolidityParser.Exp);
                    this.state = 761;
                    this.expression(17);
                    break;

                case 2:
                    localctx = new MulDivModOperationContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 762;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 763;
                    _la = this._input.LA(1);
                    if(!(((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (SolidityParser.Mul - 104)) | (1 << (SolidityParser.Div - 104)) | (1 << (SolidityParser.Mod - 104)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 764;
                    this.expression(17);
                    break;

                case 3:
                    localctx = new AddSubOperationContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 765;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 766;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.Add || _la===SolidityParser.Sub)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 767;
                    this.expression(16);
                    break;

                case 4:
                    localctx = new ShiftOperationContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 768;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 769;
                    _la = this._input.LA(1);
                    if(!(((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (SolidityParser.Shl - 99)) | (1 << (SolidityParser.Sar - 99)) | (1 << (SolidityParser.Shr - 99)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 770;
                    this.expression(15);
                    break;

                case 5:
                    localctx = new BitAndOperationContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 771;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 772;
                    this.match(SolidityParser.BitAnd);
                    this.state = 773;
                    this.expression(14);
                    break;

                case 6:
                    localctx = new BitXorOperationContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 774;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 775;
                    this.match(SolidityParser.BitXor);
                    this.state = 776;
                    this.expression(13);
                    break;

                case 7:
                    localctx = new BitOrOperationContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 777;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 778;
                    this.match(SolidityParser.BitOr);
                    this.state = 779;
                    this.expression(12);
                    break;

                case 8:
                    localctx = new OrderComparisonContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 780;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 781;
                    _la = this._input.LA(1);
                    if(!(((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (SolidityParser.LessThan - 110)) | (1 << (SolidityParser.GreaterThan - 110)) | (1 << (SolidityParser.LessThanOrEqual - 110)) | (1 << (SolidityParser.GreaterThanOrEqual - 110)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 782;
                    this.expression(11);
                    break;

                case 9:
                    localctx = new EqualityComparisonContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 783;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 784;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.Equal || _la===SolidityParser.NotEqual)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 785;
                    this.expression(10);
                    break;

                case 10:
                    localctx = new AndOperationContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 786;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 787;
                    this.match(SolidityParser.And);
                    this.state = 788;
                    this.expression(9);
                    break;

                case 11:
                    localctx = new OrOperationContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 789;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 790;
                    this.match(SolidityParser.Or);
                    this.state = 791;
                    this.expression(8);
                    break;

                case 12:
                    localctx = new ConditionalContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 792;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 793;
                    this.match(SolidityParser.Conditional);
                    this.state = 794;
                    this.expression(0);
                    this.state = 795;
                    this.match(SolidityParser.Colon);
                    this.state = 796;
                    this.expression(6);
                    break;

                case 13:
                    localctx = new AssignmentContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 798;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 799;
                    this.assignOp();
                    this.state = 800;
                    this.expression(5);
                    break;

                case 14:
                    localctx = new IndexAccessContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 802;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 803;
                    this.match(SolidityParser.LBrack);
                    this.state = 805;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
                    if(la_===1) {
                        this.state = 804;
                        localctx.index = this.expression(0);

                    }
                    this.state = 807;
                    this.match(SolidityParser.RBrack);
                    break;

                case 15:
                    localctx = new IndexRangeAccessContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 808;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 809;
                    this.match(SolidityParser.LBrack);
                    this.state = 811;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
                    if(la_===1) {
                        this.state = 810;
                        localctx.start = this.expression(0);

                    }
                    this.state = 813;
                    this.match(SolidityParser.Colon);
                    this.state = 815;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
                    if(la_===1) {
                        this.state = 814;
                        localctx.end = this.expression(0);

                    }
                    this.state = 817;
                    this.match(SolidityParser.RBrack);
                    break;

                case 16:
                    localctx = new MemberAccessContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 818;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 819;
                    this.match(SolidityParser.Period);
                    this.state = 822;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case SolidityParser.Error:
                    case SolidityParser.Revert:
                    case SolidityParser.From:
                    case SolidityParser.Identifier:
                        this.state = 820;
                        this.identifier();
                        break;
                    case SolidityParser.Address:
                        this.state = 821;
                        this.match(SolidityParser.Address);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;

                case 17:
                    localctx = new FunctionCallOptionsContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 824;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 825;
                    this.match(SolidityParser.LBrace);
                    this.state = 834;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.Error) | (1 << SolidityParser.Revert) | (1 << SolidityParser.From))) !== 0) || _la===SolidityParser.Identifier) {
                        this.state = 826;
                        this.namedArgument();
                        this.state = 831;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while(_la===SolidityParser.Comma) {
                            this.state = 827;
                            this.match(SolidityParser.Comma);
                            this.state = 828;
                            this.namedArgument();
                            this.state = 833;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }

                    this.state = 836;
                    this.match(SolidityParser.RBrace);
                    break;

                case 18:
                    localctx = new FunctionCallContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 837;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 838;
                    this.callArgumentList();
                    break;

                case 19:
                    localctx = new UnarySuffixOperationContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 839;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 840;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.Inc || _la===SolidityParser.Dec)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                } 
            }
            this.state = 845;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function AssignOpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assignOp;
    return this;
}

AssignOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignOpContext.prototype.constructor = AssignOpContext;

AssignOpContext.prototype.Assign = function() {
    return this.getToken(SolidityParser.Assign, 0);
};

AssignOpContext.prototype.AssignBitOr = function() {
    return this.getToken(SolidityParser.AssignBitOr, 0);
};

AssignOpContext.prototype.AssignBitXor = function() {
    return this.getToken(SolidityParser.AssignBitXor, 0);
};

AssignOpContext.prototype.AssignBitAnd = function() {
    return this.getToken(SolidityParser.AssignBitAnd, 0);
};

AssignOpContext.prototype.AssignShl = function() {
    return this.getToken(SolidityParser.AssignShl, 0);
};

AssignOpContext.prototype.AssignSar = function() {
    return this.getToken(SolidityParser.AssignSar, 0);
};

AssignOpContext.prototype.AssignShr = function() {
    return this.getToken(SolidityParser.AssignShr, 0);
};

AssignOpContext.prototype.AssignAdd = function() {
    return this.getToken(SolidityParser.AssignAdd, 0);
};

AssignOpContext.prototype.AssignSub = function() {
    return this.getToken(SolidityParser.AssignSub, 0);
};

AssignOpContext.prototype.AssignMul = function() {
    return this.getToken(SolidityParser.AssignMul, 0);
};

AssignOpContext.prototype.AssignDiv = function() {
    return this.getToken(SolidityParser.AssignDiv, 0);
};

AssignOpContext.prototype.AssignMod = function() {
    return this.getToken(SolidityParser.AssignMod, 0);
};

AssignOpContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterAssignOp(this);
	}
};

AssignOpContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitAssignOp(this);
	}
};




SolidityParser.AssignOpContext = AssignOpContext;

SolidityParser.prototype.assignOp = function() {

    var localctx = new AssignOpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SolidityParser.RULE_assignOp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 846;
        _la = this._input.LA(1);
        if(!(((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (SolidityParser.Assign - 81)) | (1 << (SolidityParser.AssignBitOr - 81)) | (1 << (SolidityParser.AssignBitXor - 81)) | (1 << (SolidityParser.AssignBitAnd - 81)) | (1 << (SolidityParser.AssignShl - 81)) | (1 << (SolidityParser.AssignSar - 81)) | (1 << (SolidityParser.AssignShr - 81)) | (1 << (SolidityParser.AssignAdd - 81)) | (1 << (SolidityParser.AssignSub - 81)) | (1 << (SolidityParser.AssignMul - 81)) | (1 << (SolidityParser.AssignDiv - 81)) | (1 << (SolidityParser.AssignMod - 81)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TupleExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_tupleExpression;
    return this;
}

TupleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TupleExpressionContext.prototype.constructor = TupleExpressionContext;

TupleExpressionContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

TupleExpressionContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

TupleExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

TupleExpressionContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Comma);
    } else {
        return this.getToken(SolidityParser.Comma, i);
    }
};


TupleExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterTupleExpression(this);
	}
};

TupleExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitTupleExpression(this);
	}
};




SolidityParser.TupleExpressionContext = TupleExpressionContext;

SolidityParser.prototype.tupleExpression = function() {

    var localctx = new TupleExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SolidityParser.RULE_tupleExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 848;
        this.match(SolidityParser.LParen);

        this.state = 850;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        if(la_===1) {
            this.state = 849;
            this.expression(0);

        }
        this.state = 858;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.Comma) {
            this.state = 852;
            this.match(SolidityParser.Comma);
            this.state = 854;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
            if(la_===1) {
                this.state = 853;
                this.expression(0);

            }
            this.state = 860;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 861;
        this.match(SolidityParser.RParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InlineArrayExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_inlineArrayExpression;
    return this;
}

InlineArrayExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineArrayExpressionContext.prototype.constructor = InlineArrayExpressionContext;

InlineArrayExpressionContext.prototype.LBrack = function() {
    return this.getToken(SolidityParser.LBrack, 0);
};

InlineArrayExpressionContext.prototype.RBrack = function() {
    return this.getToken(SolidityParser.RBrack, 0);
};

InlineArrayExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InlineArrayExpressionContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Comma);
    } else {
        return this.getToken(SolidityParser.Comma, i);
    }
};


InlineArrayExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterInlineArrayExpression(this);
	}
};

InlineArrayExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitInlineArrayExpression(this);
	}
};




SolidityParser.InlineArrayExpressionContext = InlineArrayExpressionContext;

SolidityParser.prototype.inlineArrayExpression = function() {

    var localctx = new InlineArrayExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SolidityParser.RULE_inlineArrayExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 863;
        this.match(SolidityParser.LBrack);

        this.state = 864;
        this.expression(0);
        this.state = 869;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.Comma) {
            this.state = 865;
            this.match(SolidityParser.Comma);
            this.state = 866;
            this.expression(0);
            this.state = 871;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 872;
        this.match(SolidityParser.RBrack);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

IdentifierContext.prototype.From = function() {
    return this.getToken(SolidityParser.From, 0);
};

IdentifierContext.prototype.Error = function() {
    return this.getToken(SolidityParser.Error, 0);
};

IdentifierContext.prototype.Revert = function() {
    return this.getToken(SolidityParser.Revert, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitIdentifier(this);
	}
};




SolidityParser.IdentifierContext = IdentifierContext;

SolidityParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SolidityParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 874;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.Error) | (1 << SolidityParser.Revert) | (1 << SolidityParser.From))) !== 0) || _la===SolidityParser.Identifier)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

LiteralContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

LiteralContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

LiteralContext.prototype.hexStringLiteral = function() {
    return this.getTypedRuleContext(HexStringLiteralContext,0);
};

LiteralContext.prototype.unicodeStringLiteral = function() {
    return this.getTypedRuleContext(UnicodeStringLiteralContext,0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitLiteral(this);
	}
};




SolidityParser.LiteralContext = LiteralContext;

SolidityParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SolidityParser.RULE_literal);
    try {
        this.state = 881;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.NonEmptyStringLiteral:
        case SolidityParser.EmptyStringLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 876;
            this.stringLiteral();
            break;
        case SolidityParser.HexNumber:
        case SolidityParser.DecimalNumber:
            this.enterOuterAlt(localctx, 2);
            this.state = 877;
            this.numberLiteral();
            break;
        case SolidityParser.False:
        case SolidityParser.True:
            this.enterOuterAlt(localctx, 3);
            this.state = 878;
            this.booleanLiteral();
            break;
        case SolidityParser.HexString:
            this.enterOuterAlt(localctx, 4);
            this.state = 879;
            this.hexStringLiteral();
            break;
        case SolidityParser.UnicodeStringLiteral:
            this.enterOuterAlt(localctx, 5);
            this.state = 880;
            this.unicodeStringLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_booleanLiteral;
    return this;
}

BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.True = function() {
    return this.getToken(SolidityParser.True, 0);
};

BooleanLiteralContext.prototype.False = function() {
    return this.getToken(SolidityParser.False, 0);
};

BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitBooleanLiteral(this);
	}
};




SolidityParser.BooleanLiteralContext = BooleanLiteralContext;

SolidityParser.prototype.booleanLiteral = function() {

    var localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SolidityParser.RULE_booleanLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 883;
        _la = this._input.LA(1);
        if(!(_la===SolidityParser.False || _la===SolidityParser.True)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_stringLiteral;
    return this;
}

StringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

StringLiteralContext.prototype.NonEmptyStringLiteral = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.NonEmptyStringLiteral);
    } else {
        return this.getToken(SolidityParser.NonEmptyStringLiteral, i);
    }
};


StringLiteralContext.prototype.EmptyStringLiteral = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.EmptyStringLiteral);
    } else {
        return this.getToken(SolidityParser.EmptyStringLiteral, i);
    }
};


StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitStringLiteral(this);
	}
};




SolidityParser.StringLiteralContext = StringLiteralContext;

SolidityParser.prototype.stringLiteral = function() {

    var localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SolidityParser.RULE_stringLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 886; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 885;
        		_la = this._input.LA(1);
        		if(!(_la===SolidityParser.NonEmptyStringLiteral || _la===SolidityParser.EmptyStringLiteral)) {
        		this._errHandler.recoverInline(this);
        		}
        		else {
        			this._errHandler.reportMatch(this);
        		    this.consume();
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 888; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,88, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HexStringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_hexStringLiteral;
    return this;
}

HexStringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HexStringLiteralContext.prototype.constructor = HexStringLiteralContext;

HexStringLiteralContext.prototype.HexString = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.HexString);
    } else {
        return this.getToken(SolidityParser.HexString, i);
    }
};


HexStringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterHexStringLiteral(this);
	}
};

HexStringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitHexStringLiteral(this);
	}
};




SolidityParser.HexStringLiteralContext = HexStringLiteralContext;

SolidityParser.prototype.hexStringLiteral = function() {

    var localctx = new HexStringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SolidityParser.RULE_hexStringLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 891; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 890;
        		this.match(SolidityParser.HexString);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 893; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,89, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnicodeStringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_unicodeStringLiteral;
    return this;
}

UnicodeStringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnicodeStringLiteralContext.prototype.constructor = UnicodeStringLiteralContext;

UnicodeStringLiteralContext.prototype.UnicodeStringLiteral = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.UnicodeStringLiteral);
    } else {
        return this.getToken(SolidityParser.UnicodeStringLiteral, i);
    }
};


UnicodeStringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterUnicodeStringLiteral(this);
	}
};

UnicodeStringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitUnicodeStringLiteral(this);
	}
};




SolidityParser.UnicodeStringLiteralContext = UnicodeStringLiteralContext;

SolidityParser.prototype.unicodeStringLiteral = function() {

    var localctx = new UnicodeStringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SolidityParser.RULE_unicodeStringLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 896; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 895;
        		this.match(SolidityParser.UnicodeStringLiteral);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 898; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,90, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NumberLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_numberLiteral;
    return this;
}

NumberLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberLiteralContext.prototype.constructor = NumberLiteralContext;

NumberLiteralContext.prototype.DecimalNumber = function() {
    return this.getToken(SolidityParser.DecimalNumber, 0);
};

NumberLiteralContext.prototype.HexNumber = function() {
    return this.getToken(SolidityParser.HexNumber, 0);
};

NumberLiteralContext.prototype.NumberUnit = function() {
    return this.getToken(SolidityParser.NumberUnit, 0);
};

NumberLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterNumberLiteral(this);
	}
};

NumberLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitNumberLiteral(this);
	}
};




SolidityParser.NumberLiteralContext = NumberLiteralContext;

SolidityParser.prototype.numberLiteral = function() {

    var localctx = new NumberLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SolidityParser.RULE_numberLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 900;
        _la = this._input.LA(1);
        if(!(_la===SolidityParser.HexNumber || _la===SolidityParser.DecimalNumber)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 902;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        if(la_===1) {
            this.state = 901;
            this.match(SolidityParser.NumberUnit);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.LBrace = function() {
    return this.getToken(SolidityParser.LBrace, 0);
};

BlockContext.prototype.RBrace = function() {
    return this.getToken(SolidityParser.RBrace, 0);
};

BlockContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

BlockContext.prototype.uncheckedBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UncheckedBlockContext);
    } else {
        return this.getTypedRuleContext(UncheckedBlockContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitBlock(this);
	}
};




SolidityParser.BlockContext = BlockContext;

SolidityParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SolidityParser.RULE_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 904;
        this.match(SolidityParser.LBrace);
        this.state = 909;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 907;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 905;
                    this.statement();
                    break;

                case 2:
                    this.state = 906;
                    this.uncheckedBlock();
                    break;

                } 
            }
            this.state = 911;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
        }

        this.state = 912;
        this.match(SolidityParser.RBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UncheckedBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_uncheckedBlock;
    return this;
}

UncheckedBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UncheckedBlockContext.prototype.constructor = UncheckedBlockContext;

UncheckedBlockContext.prototype.Unchecked = function() {
    return this.getToken(SolidityParser.Unchecked, 0);
};

UncheckedBlockContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

UncheckedBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterUncheckedBlock(this);
	}
};

UncheckedBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitUncheckedBlock(this);
	}
};




SolidityParser.UncheckedBlockContext = UncheckedBlockContext;

SolidityParser.prototype.uncheckedBlock = function() {

    var localctx = new UncheckedBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SolidityParser.RULE_uncheckedBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 914;
        this.match(SolidityParser.Unchecked);
        this.state = 915;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.simpleStatement = function() {
    return this.getTypedRuleContext(SimpleStatementContext,0);
};

StatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

StatementContext.prototype.forStatement = function() {
    return this.getTypedRuleContext(ForStatementContext,0);
};

StatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

StatementContext.prototype.doWhileStatement = function() {
    return this.getTypedRuleContext(DoWhileStatementContext,0);
};

StatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementContext.prototype.tryStatement = function() {
    return this.getTypedRuleContext(TryStatementContext,0);
};

StatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementContext.prototype.emitStatement = function() {
    return this.getTypedRuleContext(EmitStatementContext,0);
};

StatementContext.prototype.revertStatement = function() {
    return this.getTypedRuleContext(RevertStatementContext,0);
};

StatementContext.prototype.assemblyStatement = function() {
    return this.getTypedRuleContext(AssemblyStatementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitStatement(this);
	}
};




SolidityParser.StatementContext = StatementContext;

SolidityParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SolidityParser.RULE_statement);
    try {
        this.state = 930;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 917;
            this.block();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 918;
            this.simpleStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 919;
            this.ifStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 920;
            this.forStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 921;
            this.whileStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 922;
            this.doWhileStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 923;
            this.continueStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 924;
            this.breakStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 925;
            this.tryStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 926;
            this.returnStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 927;
            this.emitStatement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 928;
            this.revertStatement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 929;
            this.assemblyStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_simpleStatement;
    return this;
}

SimpleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleStatementContext.prototype.constructor = SimpleStatementContext;

SimpleStatementContext.prototype.variableDeclarationStatement = function() {
    return this.getTypedRuleContext(VariableDeclarationStatementContext,0);
};

SimpleStatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

SimpleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterSimpleStatement(this);
	}
};

SimpleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitSimpleStatement(this);
	}
};




SolidityParser.SimpleStatementContext = SimpleStatementContext;

SolidityParser.prototype.simpleStatement = function() {

    var localctx = new SimpleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SolidityParser.RULE_simpleStatement);
    try {
        this.state = 934;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 932;
            this.variableDeclarationStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 933;
            this.expressionStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.If = function() {
    return this.getToken(SolidityParser.If, 0);
};

IfStatementContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

IfStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfStatementContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

IfStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

IfStatementContext.prototype.Else = function() {
    return this.getToken(SolidityParser.Else, 0);
};

IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitIfStatement(this);
	}
};




SolidityParser.IfStatementContext = IfStatementContext;

SolidityParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SolidityParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 936;
        this.match(SolidityParser.If);
        this.state = 937;
        this.match(SolidityParser.LParen);
        this.state = 938;
        this.expression(0);
        this.state = 939;
        this.match(SolidityParser.RParen);
        this.state = 940;
        this.statement();
        this.state = 943;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        if(la_===1) {
            this.state = 941;
            this.match(SolidityParser.Else);
            this.state = 942;
            this.statement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_forStatement;
    return this;
}

ForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ForStatementContext.prototype.For = function() {
    return this.getToken(SolidityParser.For, 0);
};

ForStatementContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

ForStatementContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

ForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForStatementContext.prototype.simpleStatement = function() {
    return this.getTypedRuleContext(SimpleStatementContext,0);
};

ForStatementContext.prototype.Semicolon = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Semicolon);
    } else {
        return this.getToken(SolidityParser.Semicolon, i);
    }
};


ForStatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

ForStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterForStatement(this);
	}
};

ForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitForStatement(this);
	}
};




SolidityParser.ForStatementContext = ForStatementContext;

SolidityParser.prototype.forStatement = function() {

    var localctx = new ForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SolidityParser.RULE_forStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 945;
        this.match(SolidityParser.For);
        this.state = 946;
        this.match(SolidityParser.LParen);
        this.state = 949;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
        switch(la_) {
        case 1:
            this.state = 947;
            this.simpleStatement();
            break;

        case 2:
            this.state = 948;
            this.match(SolidityParser.Semicolon);
            break;

        }
        this.state = 953;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        switch(la_) {
        case 1:
            this.state = 951;
            this.expressionStatement();
            break;

        case 2:
            this.state = 952;
            this.match(SolidityParser.Semicolon);
            break;

        }
        this.state = 956;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        if(la_===1) {
            this.state = 955;
            this.expression(0);

        }
        this.state = 958;
        this.match(SolidityParser.RParen);
        this.state = 959;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.While = function() {
    return this.getToken(SolidityParser.While, 0);
};

WhileStatementContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

WhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatementContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

WhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitWhileStatement(this);
	}
};




SolidityParser.WhileStatementContext = WhileStatementContext;

SolidityParser.prototype.whileStatement = function() {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SolidityParser.RULE_whileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 961;
        this.match(SolidityParser.While);
        this.state = 962;
        this.match(SolidityParser.LParen);
        this.state = 963;
        this.expression(0);
        this.state = 964;
        this.match(SolidityParser.RParen);
        this.state = 965;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DoWhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_doWhileStatement;
    return this;
}

DoWhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoWhileStatementContext.prototype.constructor = DoWhileStatementContext;

DoWhileStatementContext.prototype.Do = function() {
    return this.getToken(SolidityParser.Do, 0);
};

DoWhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

DoWhileStatementContext.prototype.While = function() {
    return this.getToken(SolidityParser.While, 0);
};

DoWhileStatementContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

DoWhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DoWhileStatementContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

DoWhileStatementContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

DoWhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterDoWhileStatement(this);
	}
};

DoWhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitDoWhileStatement(this);
	}
};




SolidityParser.DoWhileStatementContext = DoWhileStatementContext;

SolidityParser.prototype.doWhileStatement = function() {

    var localctx = new DoWhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SolidityParser.RULE_doWhileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 967;
        this.match(SolidityParser.Do);
        this.state = 968;
        this.statement();
        this.state = 969;
        this.match(SolidityParser.While);
        this.state = 970;
        this.match(SolidityParser.LParen);
        this.state = 971;
        this.expression(0);
        this.state = 972;
        this.match(SolidityParser.RParen);
        this.state = 973;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.Continue = function() {
    return this.getToken(SolidityParser.Continue, 0);
};

ContinueStatementContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

ContinueStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterContinueStatement(this);
	}
};

ContinueStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitContinueStatement(this);
	}
};




SolidityParser.ContinueStatementContext = ContinueStatementContext;

SolidityParser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SolidityParser.RULE_continueStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 975;
        this.match(SolidityParser.Continue);
        this.state = 976;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.Break = function() {
    return this.getToken(SolidityParser.Break, 0);
};

BreakStatementContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitBreakStatement(this);
	}
};




SolidityParser.BreakStatementContext = BreakStatementContext;

SolidityParser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SolidityParser.RULE_breakStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 978;
        this.match(SolidityParser.Break);
        this.state = 979;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TryStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_tryStatement;
    this.returnParameters = null; // ParameterListContext
    return this;
}

TryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.Try = function() {
    return this.getToken(SolidityParser.Try, 0);
};

TryStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TryStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

TryStatementContext.prototype.Returns = function() {
    return this.getToken(SolidityParser.Returns, 0);
};

TryStatementContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

TryStatementContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

TryStatementContext.prototype.catchClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CatchClauseContext);
    } else {
        return this.getTypedRuleContext(CatchClauseContext,i);
    }
};

TryStatementContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

TryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterTryStatement(this);
	}
};

TryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitTryStatement(this);
	}
};




SolidityParser.TryStatementContext = TryStatementContext;

SolidityParser.prototype.tryStatement = function() {

    var localctx = new TryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SolidityParser.RULE_tryStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 981;
        this.match(SolidityParser.Try);
        this.state = 982;
        this.expression(0);
        this.state = 988;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Returns) {
            this.state = 983;
            this.match(SolidityParser.Returns);
            this.state = 984;
            this.match(SolidityParser.LParen);
            this.state = 985;
            localctx.returnParameters = this.parameterList();
            this.state = 986;
            this.match(SolidityParser.RParen);
        }

        this.state = 990;
        this.block();
        this.state = 992; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 991;
        		this.catchClause();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 994; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,101, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CatchClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_catchClause;
    this.arguments = null; // ParameterListContext
    return this;
}

CatchClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchClauseContext.prototype.constructor = CatchClauseContext;

CatchClauseContext.prototype.Catch = function() {
    return this.getToken(SolidityParser.Catch, 0);
};

CatchClauseContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchClauseContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

CatchClauseContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

CatchClauseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CatchClauseContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

CatchClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterCatchClause(this);
	}
};

CatchClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitCatchClause(this);
	}
};




SolidityParser.CatchClauseContext = CatchClauseContext;

SolidityParser.prototype.catchClause = function() {

    var localctx = new CatchClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SolidityParser.RULE_catchClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 996;
        this.match(SolidityParser.Catch);
        this.state = 1004;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.Error) | (1 << SolidityParser.Revert) | (1 << SolidityParser.From))) !== 0) || _la===SolidityParser.LParen || _la===SolidityParser.Identifier) {
            this.state = 998;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.Error) | (1 << SolidityParser.Revert) | (1 << SolidityParser.From))) !== 0) || _la===SolidityParser.Identifier) {
                this.state = 997;
                this.identifier();
            }

            this.state = 1000;
            this.match(SolidityParser.LParen);

            this.state = 1001;
            localctx.arguments = this.parameterList();
            this.state = 1002;
            this.match(SolidityParser.RParen);
        }

        this.state = 1006;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.Return = function() {
    return this.getToken(SolidityParser.Return, 0);
};

ReturnStatementContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

ReturnStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitReturnStatement(this);
	}
};




SolidityParser.ReturnStatementContext = ReturnStatementContext;

SolidityParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SolidityParser.RULE_returnStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1008;
        this.match(SolidityParser.Return);
        this.state = 1010;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
        if(la_===1) {
            this.state = 1009;
            this.expression(0);

        }
        this.state = 1012;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EmitStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_emitStatement;
    return this;
}

EmitStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmitStatementContext.prototype.constructor = EmitStatementContext;

EmitStatementContext.prototype.Emit = function() {
    return this.getToken(SolidityParser.Emit, 0);
};

EmitStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

EmitStatementContext.prototype.callArgumentList = function() {
    return this.getTypedRuleContext(CallArgumentListContext,0);
};

EmitStatementContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

EmitStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterEmitStatement(this);
	}
};

EmitStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitEmitStatement(this);
	}
};




SolidityParser.EmitStatementContext = EmitStatementContext;

SolidityParser.prototype.emitStatement = function() {

    var localctx = new EmitStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, SolidityParser.RULE_emitStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1014;
        this.match(SolidityParser.Emit);
        this.state = 1015;
        this.expression(0);
        this.state = 1016;
        this.callArgumentList();
        this.state = 1017;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RevertStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_revertStatement;
    return this;
}

RevertStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RevertStatementContext.prototype.constructor = RevertStatementContext;

RevertStatementContext.prototype.Revert = function() {
    return this.getToken(SolidityParser.Revert, 0);
};

RevertStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

RevertStatementContext.prototype.callArgumentList = function() {
    return this.getTypedRuleContext(CallArgumentListContext,0);
};

RevertStatementContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

RevertStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterRevertStatement(this);
	}
};

RevertStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitRevertStatement(this);
	}
};




SolidityParser.RevertStatementContext = RevertStatementContext;

SolidityParser.prototype.revertStatement = function() {

    var localctx = new RevertStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, SolidityParser.RULE_revertStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1019;
        this.match(SolidityParser.Revert);
        this.state = 1020;
        this.expression(0);
        this.state = 1021;
        this.callArgumentList();
        this.state = 1022;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssemblyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyStatement;
    return this;
}

AssemblyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyStatementContext.prototype.constructor = AssemblyStatementContext;

AssemblyStatementContext.prototype.Assembly = function() {
    return this.getToken(SolidityParser.Assembly, 0);
};

AssemblyStatementContext.prototype.AssemblyLBrace = function() {
    return this.getToken(SolidityParser.AssemblyLBrace, 0);
};

AssemblyStatementContext.prototype.YulRBrace = function() {
    return this.getToken(SolidityParser.YulRBrace, 0);
};

AssemblyStatementContext.prototype.AssemblyDialect = function() {
    return this.getToken(SolidityParser.AssemblyDialect, 0);
};

AssemblyStatementContext.prototype.yulStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(YulStatementContext);
    } else {
        return this.getTypedRuleContext(YulStatementContext,i);
    }
};

AssemblyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterAssemblyStatement(this);
	}
};

AssemblyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitAssemblyStatement(this);
	}
};




SolidityParser.AssemblyStatementContext = AssemblyStatementContext;

SolidityParser.prototype.assemblyStatement = function() {

    var localctx = new AssemblyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, SolidityParser.RULE_assemblyStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1024;
        this.match(SolidityParser.Assembly);
        this.state = 1026;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.AssemblyDialect) {
            this.state = 1025;
            this.match(SolidityParser.AssemblyDialect);
        }

        this.state = 1028;
        this.match(SolidityParser.AssemblyLBrace);
        this.state = 1032;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (SolidityParser.YulBreak - 135)) | (1 << (SolidityParser.YulContinue - 135)) | (1 << (SolidityParser.YulFor - 135)) | (1 << (SolidityParser.YulFunction - 135)) | (1 << (SolidityParser.YulIf - 135)) | (1 << (SolidityParser.YulLeave - 135)) | (1 << (SolidityParser.YulLet - 135)) | (1 << (SolidityParser.YulSwitch - 135)) | (1 << (SolidityParser.YulEVMBuiltin - 135)) | (1 << (SolidityParser.YulLBrace - 135)) | (1 << (SolidityParser.YulIdentifier - 135)))) !== 0)) {
            this.state = 1029;
            this.yulStatement();
            this.state = 1034;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1035;
        this.match(SolidityParser.YulRBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_variableDeclarationList;
    this._variableDeclaration = null; // VariableDeclarationContext
    this.variableDeclarations = []; // of VariableDeclarationContexts
    return this;
}

VariableDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationListContext.prototype.constructor = VariableDeclarationListContext;

VariableDeclarationListContext.prototype.variableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext,i);
    }
};

VariableDeclarationListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Comma);
    } else {
        return this.getToken(SolidityParser.Comma, i);
    }
};


VariableDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterVariableDeclarationList(this);
	}
};

VariableDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitVariableDeclarationList(this);
	}
};




SolidityParser.VariableDeclarationListContext = VariableDeclarationListContext;

SolidityParser.prototype.variableDeclarationList = function() {

    var localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SolidityParser.RULE_variableDeclarationList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1037;
        localctx._variableDeclaration = this.variableDeclaration();
        localctx.variableDeclarations.push(localctx._variableDeclaration);
        this.state = 1042;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.Comma) {
            this.state = 1038;
            this.match(SolidityParser.Comma);
            this.state = 1039;
            localctx._variableDeclaration = this.variableDeclaration();
            localctx.variableDeclarations.push(localctx._variableDeclaration);
            this.state = 1044;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclarationTupleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_variableDeclarationTuple;
    this._variableDeclaration = null; // VariableDeclarationContext
    this.variableDeclarations = []; // of VariableDeclarationContexts
    return this;
}

VariableDeclarationTupleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationTupleContext.prototype.constructor = VariableDeclarationTupleContext;

VariableDeclarationTupleContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

VariableDeclarationTupleContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

VariableDeclarationTupleContext.prototype.variableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext,i);
    }
};

VariableDeclarationTupleContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Comma);
    } else {
        return this.getToken(SolidityParser.Comma, i);
    }
};


VariableDeclarationTupleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterVariableDeclarationTuple(this);
	}
};

VariableDeclarationTupleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitVariableDeclarationTuple(this);
	}
};




SolidityParser.VariableDeclarationTupleContext = VariableDeclarationTupleContext;

SolidityParser.prototype.variableDeclarationTuple = function() {

    var localctx = new VariableDeclarationTupleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SolidityParser.RULE_variableDeclarationTuple);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1045;
        this.match(SolidityParser.LParen);

        this.state = 1049;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,108,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1046;
                this.match(SolidityParser.Comma); 
            }
            this.state = 1051;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,108,this._ctx);
        }

        this.state = 1052;
        localctx._variableDeclaration = this.variableDeclaration();
        localctx.variableDeclarations.push(localctx._variableDeclaration);
        this.state = 1060;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.Comma) {
            this.state = 1054;
            this.match(SolidityParser.Comma);
            this.state = 1056;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
            if(la_===1) {
                this.state = 1055;
                localctx._variableDeclaration = this.variableDeclaration();
                localctx.variableDeclarations.push(localctx._variableDeclaration);

            }
            this.state = 1062;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1063;
        this.match(SolidityParser.RParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclarationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_variableDeclarationStatement;
    return this;
}

VariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationStatementContext.prototype.constructor = VariableDeclarationStatementContext;

VariableDeclarationStatementContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

VariableDeclarationStatementContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

VariableDeclarationStatementContext.prototype.variableDeclarationTuple = function() {
    return this.getTypedRuleContext(VariableDeclarationTupleContext,0);
};

VariableDeclarationStatementContext.prototype.Assign = function() {
    return this.getToken(SolidityParser.Assign, 0);
};

VariableDeclarationStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

VariableDeclarationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterVariableDeclarationStatement(this);
	}
};

VariableDeclarationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitVariableDeclarationStatement(this);
	}
};




SolidityParser.VariableDeclarationStatementContext = VariableDeclarationStatementContext;

SolidityParser.prototype.variableDeclarationStatement = function() {

    var localctx = new VariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SolidityParser.RULE_variableDeclarationStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1074;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1065;
            this.variableDeclaration();
            this.state = 1068;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.Assign) {
                this.state = 1066;
                this.match(SolidityParser.Assign);
                this.state = 1067;
                this.expression(0);
            }

            break;

        case 2:
            this.state = 1070;
            this.variableDeclarationTuple();
            this.state = 1071;
            this.match(SolidityParser.Assign);
            this.state = 1072;
            this.expression(0);
            break;

        }
        this.state = 1076;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionStatementContext.prototype.Semicolon = function() {
    return this.getToken(SolidityParser.Semicolon, 0);
};

ExpressionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitExpressionStatement(this);
	}
};




SolidityParser.ExpressionStatementContext = ExpressionStatementContext;

SolidityParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, SolidityParser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1078;
        this.expression(0);
        this.state = 1079;
        this.match(SolidityParser.Semicolon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MappingTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_mappingType;
    this.key = null; // MappingKeyTypeContext
    this.value = null; // TypeNameContext
    return this;
}

MappingTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MappingTypeContext.prototype.constructor = MappingTypeContext;

MappingTypeContext.prototype.Mapping = function() {
    return this.getToken(SolidityParser.Mapping, 0);
};

MappingTypeContext.prototype.LParen = function() {
    return this.getToken(SolidityParser.LParen, 0);
};

MappingTypeContext.prototype.DoubleArrow = function() {
    return this.getToken(SolidityParser.DoubleArrow, 0);
};

MappingTypeContext.prototype.RParen = function() {
    return this.getToken(SolidityParser.RParen, 0);
};

MappingTypeContext.prototype.mappingKeyType = function() {
    return this.getTypedRuleContext(MappingKeyTypeContext,0);
};

MappingTypeContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

MappingTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterMappingType(this);
	}
};

MappingTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitMappingType(this);
	}
};




SolidityParser.MappingTypeContext = MappingTypeContext;

SolidityParser.prototype.mappingType = function() {

    var localctx = new MappingTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, SolidityParser.RULE_mappingType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1081;
        this.match(SolidityParser.Mapping);
        this.state = 1082;
        this.match(SolidityParser.LParen);
        this.state = 1083;
        localctx.key = this.mappingKeyType();
        this.state = 1084;
        this.match(SolidityParser.DoubleArrow);
        this.state = 1085;
        localctx.value = this.typeName(0);
        this.state = 1086;
        this.match(SolidityParser.RParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MappingKeyTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_mappingKeyType;
    return this;
}

MappingKeyTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MappingKeyTypeContext.prototype.constructor = MappingKeyTypeContext;

MappingKeyTypeContext.prototype.elementaryTypeName = function() {
    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
};

MappingKeyTypeContext.prototype.identifierPath = function() {
    return this.getTypedRuleContext(IdentifierPathContext,0);
};

MappingKeyTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterMappingKeyType(this);
	}
};

MappingKeyTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitMappingKeyType(this);
	}
};




SolidityParser.MappingKeyTypeContext = MappingKeyTypeContext;

SolidityParser.prototype.mappingKeyType = function() {

    var localctx = new MappingKeyTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, SolidityParser.RULE_mappingKeyType);
    try {
        this.state = 1090;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1088;
            this.elementaryTypeName(false);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1089;
            this.identifierPath();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function YulStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_yulStatement;
    return this;
}

YulStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YulStatementContext.prototype.constructor = YulStatementContext;

YulStatementContext.prototype.yulBlock = function() {
    return this.getTypedRuleContext(YulBlockContext,0);
};

YulStatementContext.prototype.yulVariableDeclaration = function() {
    return this.getTypedRuleContext(YulVariableDeclarationContext,0);
};

YulStatementContext.prototype.yulAssignment = function() {
    return this.getTypedRuleContext(YulAssignmentContext,0);
};

YulStatementContext.prototype.yulFunctionCall = function() {
    return this.getTypedRuleContext(YulFunctionCallContext,0);
};

YulStatementContext.prototype.yulIfStatement = function() {
    return this.getTypedRuleContext(YulIfStatementContext,0);
};

YulStatementContext.prototype.yulForStatement = function() {
    return this.getTypedRuleContext(YulForStatementContext,0);
};

YulStatementContext.prototype.yulSwitchStatement = function() {
    return this.getTypedRuleContext(YulSwitchStatementContext,0);
};

YulStatementContext.prototype.YulLeave = function() {
    return this.getToken(SolidityParser.YulLeave, 0);
};

YulStatementContext.prototype.YulBreak = function() {
    return this.getToken(SolidityParser.YulBreak, 0);
};

YulStatementContext.prototype.YulContinue = function() {
    return this.getToken(SolidityParser.YulContinue, 0);
};

YulStatementContext.prototype.yulFunctionDefinition = function() {
    return this.getTypedRuleContext(YulFunctionDefinitionContext,0);
};

YulStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterYulStatement(this);
	}
};

YulStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitYulStatement(this);
	}
};




SolidityParser.YulStatementContext = YulStatementContext;

SolidityParser.prototype.yulStatement = function() {

    var localctx = new YulStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, SolidityParser.RULE_yulStatement);
    try {
        this.state = 1103;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1092;
            this.yulBlock();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1093;
            this.yulVariableDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1094;
            this.yulAssignment();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1095;
            this.yulFunctionCall();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1096;
            this.yulIfStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1097;
            this.yulForStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1098;
            this.yulSwitchStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1099;
            this.match(SolidityParser.YulLeave);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1100;
            this.match(SolidityParser.YulBreak);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1101;
            this.match(SolidityParser.YulContinue);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1102;
            this.yulFunctionDefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function YulBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_yulBlock;
    return this;
}

YulBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YulBlockContext.prototype.constructor = YulBlockContext;

YulBlockContext.prototype.YulLBrace = function() {
    return this.getToken(SolidityParser.YulLBrace, 0);
};

YulBlockContext.prototype.YulRBrace = function() {
    return this.getToken(SolidityParser.YulRBrace, 0);
};

YulBlockContext.prototype.yulStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(YulStatementContext);
    } else {
        return this.getTypedRuleContext(YulStatementContext,i);
    }
};

YulBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterYulBlock(this);
	}
};

YulBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitYulBlock(this);
	}
};




SolidityParser.YulBlockContext = YulBlockContext;

SolidityParser.prototype.yulBlock = function() {

    var localctx = new YulBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, SolidityParser.RULE_yulBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1105;
        this.match(SolidityParser.YulLBrace);
        this.state = 1109;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (SolidityParser.YulBreak - 135)) | (1 << (SolidityParser.YulContinue - 135)) | (1 << (SolidityParser.YulFor - 135)) | (1 << (SolidityParser.YulFunction - 135)) | (1 << (SolidityParser.YulIf - 135)) | (1 << (SolidityParser.YulLeave - 135)) | (1 << (SolidityParser.YulLet - 135)) | (1 << (SolidityParser.YulSwitch - 135)) | (1 << (SolidityParser.YulEVMBuiltin - 135)) | (1 << (SolidityParser.YulLBrace - 135)) | (1 << (SolidityParser.YulIdentifier - 135)))) !== 0)) {
            this.state = 1106;
            this.yulStatement();
            this.state = 1111;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1112;
        this.match(SolidityParser.YulRBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function YulVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_yulVariableDeclaration;
    this._YulIdentifier = null; // Token
    this.variables = []; // of Tokens
    return this;
}

YulVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YulVariableDeclarationContext.prototype.constructor = YulVariableDeclarationContext;

YulVariableDeclarationContext.prototype.YulLet = function() {
    return this.getToken(SolidityParser.YulLet, 0);
};

YulVariableDeclarationContext.prototype.YulIdentifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.YulIdentifier);
    } else {
        return this.getToken(SolidityParser.YulIdentifier, i);
    }
};


YulVariableDeclarationContext.prototype.YulAssign = function() {
    return this.getToken(SolidityParser.YulAssign, 0);
};

YulVariableDeclarationContext.prototype.yulExpression = function() {
    return this.getTypedRuleContext(YulExpressionContext,0);
};

YulVariableDeclarationContext.prototype.YulComma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.YulComma);
    } else {
        return this.getToken(SolidityParser.YulComma, i);
    }
};


YulVariableDeclarationContext.prototype.yulFunctionCall = function() {
    return this.getTypedRuleContext(YulFunctionCallContext,0);
};

YulVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterYulVariableDeclaration(this);
	}
};

YulVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitYulVariableDeclaration(this);
	}
};




SolidityParser.YulVariableDeclarationContext = YulVariableDeclarationContext;

SolidityParser.prototype.yulVariableDeclaration = function() {

    var localctx = new YulVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SolidityParser.RULE_yulVariableDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 1133;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1114;
            this.match(SolidityParser.YulLet);
            this.state = 1115;
            localctx._YulIdentifier = this.match(SolidityParser.YulIdentifier);
            localctx.variables.push(localctx._YulIdentifier);
            this.state = 1118;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.YulAssign) {
                this.state = 1116;
                this.match(SolidityParser.YulAssign);
                this.state = 1117;
                this.yulExpression();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1120;
            this.match(SolidityParser.YulLet);
            this.state = 1121;
            localctx._YulIdentifier = this.match(SolidityParser.YulIdentifier);
            localctx.variables.push(localctx._YulIdentifier);
            this.state = 1126;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.YulComma) {
                this.state = 1122;
                this.match(SolidityParser.YulComma);
                this.state = 1123;
                localctx._YulIdentifier = this.match(SolidityParser.YulIdentifier);
                localctx.variables.push(localctx._YulIdentifier);
                this.state = 1128;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1131;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.YulAssign) {
                this.state = 1129;
                this.match(SolidityParser.YulAssign);
                this.state = 1130;
                this.yulFunctionCall();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function YulAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_yulAssignment;
    return this;
}

YulAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YulAssignmentContext.prototype.constructor = YulAssignmentContext;

YulAssignmentContext.prototype.yulPath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(YulPathContext);
    } else {
        return this.getTypedRuleContext(YulPathContext,i);
    }
};

YulAssignmentContext.prototype.YulAssign = function() {
    return this.getToken(SolidityParser.YulAssign, 0);
};

YulAssignmentContext.prototype.yulExpression = function() {
    return this.getTypedRuleContext(YulExpressionContext,0);
};

YulAssignmentContext.prototype.yulFunctionCall = function() {
    return this.getTypedRuleContext(YulFunctionCallContext,0);
};

YulAssignmentContext.prototype.YulComma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.YulComma);
    } else {
        return this.getToken(SolidityParser.YulComma, i);
    }
};


YulAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterYulAssignment(this);
	}
};

YulAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitYulAssignment(this);
	}
};




SolidityParser.YulAssignmentContext = YulAssignmentContext;

SolidityParser.prototype.yulAssignment = function() {

    var localctx = new YulAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SolidityParser.RULE_yulAssignment);
    var _la = 0; // Token type
    try {
        this.state = 1149;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1135;
            this.yulPath();
            this.state = 1136;
            this.match(SolidityParser.YulAssign);
            this.state = 1137;
            this.yulExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1139;
            this.yulPath();
            this.state = 1142; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1140;
                this.match(SolidityParser.YulComma);
                this.state = 1141;
                this.yulPath();
                this.state = 1144; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SolidityParser.YulComma);
            this.state = 1146;
            this.match(SolidityParser.YulAssign);
            this.state = 1147;
            this.yulFunctionCall();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function YulIfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_yulIfStatement;
    this.cond = null; // YulExpressionContext
    this.body = null; // YulBlockContext
    return this;
}

YulIfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YulIfStatementContext.prototype.constructor = YulIfStatementContext;

YulIfStatementContext.prototype.YulIf = function() {
    return this.getToken(SolidityParser.YulIf, 0);
};

YulIfStatementContext.prototype.yulExpression = function() {
    return this.getTypedRuleContext(YulExpressionContext,0);
};

YulIfStatementContext.prototype.yulBlock = function() {
    return this.getTypedRuleContext(YulBlockContext,0);
};

YulIfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterYulIfStatement(this);
	}
};

YulIfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitYulIfStatement(this);
	}
};




SolidityParser.YulIfStatementContext = YulIfStatementContext;

SolidityParser.prototype.yulIfStatement = function() {

    var localctx = new YulIfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SolidityParser.RULE_yulIfStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1151;
        this.match(SolidityParser.YulIf);
        this.state = 1152;
        localctx.cond = this.yulExpression();
        this.state = 1153;
        localctx.body = this.yulBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function YulForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_yulForStatement;
    this.init = null; // YulBlockContext
    this.cond = null; // YulExpressionContext
    this.post = null; // YulBlockContext
    this.body = null; // YulBlockContext
    return this;
}

YulForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YulForStatementContext.prototype.constructor = YulForStatementContext;

YulForStatementContext.prototype.YulFor = function() {
    return this.getToken(SolidityParser.YulFor, 0);
};

YulForStatementContext.prototype.yulBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(YulBlockContext);
    } else {
        return this.getTypedRuleContext(YulBlockContext,i);
    }
};

YulForStatementContext.prototype.yulExpression = function() {
    return this.getTypedRuleContext(YulExpressionContext,0);
};

YulForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterYulForStatement(this);
	}
};

YulForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitYulForStatement(this);
	}
};




SolidityParser.YulForStatementContext = YulForStatementContext;

SolidityParser.prototype.yulForStatement = function() {

    var localctx = new YulForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, SolidityParser.RULE_yulForStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1155;
        this.match(SolidityParser.YulFor);
        this.state = 1156;
        localctx.init = this.yulBlock();
        this.state = 1157;
        localctx.cond = this.yulExpression();
        this.state = 1158;
        localctx.post = this.yulBlock();
        this.state = 1159;
        localctx.body = this.yulBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function YulSwitchCaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_yulSwitchCase;
    return this;
}

YulSwitchCaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YulSwitchCaseContext.prototype.constructor = YulSwitchCaseContext;

YulSwitchCaseContext.prototype.YulCase = function() {
    return this.getToken(SolidityParser.YulCase, 0);
};

YulSwitchCaseContext.prototype.yulLiteral = function() {
    return this.getTypedRuleContext(YulLiteralContext,0);
};

YulSwitchCaseContext.prototype.yulBlock = function() {
    return this.getTypedRuleContext(YulBlockContext,0);
};

YulSwitchCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterYulSwitchCase(this);
	}
};

YulSwitchCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitYulSwitchCase(this);
	}
};




SolidityParser.YulSwitchCaseContext = YulSwitchCaseContext;

SolidityParser.prototype.yulSwitchCase = function() {

    var localctx = new YulSwitchCaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, SolidityParser.RULE_yulSwitchCase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1161;
        this.match(SolidityParser.YulCase);
        this.state = 1162;
        this.yulLiteral();
        this.state = 1163;
        this.yulBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function YulSwitchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_yulSwitchStatement;
    return this;
}

YulSwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YulSwitchStatementContext.prototype.constructor = YulSwitchStatementContext;

YulSwitchStatementContext.prototype.YulSwitch = function() {
    return this.getToken(SolidityParser.YulSwitch, 0);
};

YulSwitchStatementContext.prototype.yulExpression = function() {
    return this.getTypedRuleContext(YulExpressionContext,0);
};

YulSwitchStatementContext.prototype.YulDefault = function() {
    return this.getToken(SolidityParser.YulDefault, 0);
};

YulSwitchStatementContext.prototype.yulBlock = function() {
    return this.getTypedRuleContext(YulBlockContext,0);
};

YulSwitchStatementContext.prototype.yulSwitchCase = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(YulSwitchCaseContext);
    } else {
        return this.getTypedRuleContext(YulSwitchCaseContext,i);
    }
};

YulSwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterYulSwitchStatement(this);
	}
};

YulSwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitYulSwitchStatement(this);
	}
};




SolidityParser.YulSwitchStatementContext = YulSwitchStatementContext;

SolidityParser.prototype.yulSwitchStatement = function() {

    var localctx = new YulSwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, SolidityParser.RULE_yulSwitchStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1165;
        this.match(SolidityParser.YulSwitch);
        this.state = 1166;
        this.yulExpression();
        this.state = 1178;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.YulCase:
            this.state = 1168; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1167;
                this.yulSwitchCase();
                this.state = 1170; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SolidityParser.YulCase);
            this.state = 1174;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.YulDefault) {
                this.state = 1172;
                this.match(SolidityParser.YulDefault);
                this.state = 1173;
                this.yulBlock();
            }

            break;
        case SolidityParser.YulDefault:
            this.state = 1176;
            this.match(SolidityParser.YulDefault);
            this.state = 1177;
            this.yulBlock();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function YulFunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_yulFunctionDefinition;
    this._YulIdentifier = null; // Token
    this.arguments = []; // of Tokens
    this.returnParameters = []; // of Tokens
    this.body = null; // YulBlockContext
    return this;
}

YulFunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YulFunctionDefinitionContext.prototype.constructor = YulFunctionDefinitionContext;

YulFunctionDefinitionContext.prototype.YulFunction = function() {
    return this.getToken(SolidityParser.YulFunction, 0);
};

YulFunctionDefinitionContext.prototype.YulIdentifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.YulIdentifier);
    } else {
        return this.getToken(SolidityParser.YulIdentifier, i);
    }
};


YulFunctionDefinitionContext.prototype.YulLParen = function() {
    return this.getToken(SolidityParser.YulLParen, 0);
};

YulFunctionDefinitionContext.prototype.YulRParen = function() {
    return this.getToken(SolidityParser.YulRParen, 0);
};

YulFunctionDefinitionContext.prototype.yulBlock = function() {
    return this.getTypedRuleContext(YulBlockContext,0);
};

YulFunctionDefinitionContext.prototype.YulArrow = function() {
    return this.getToken(SolidityParser.YulArrow, 0);
};

YulFunctionDefinitionContext.prototype.YulComma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.YulComma);
    } else {
        return this.getToken(SolidityParser.YulComma, i);
    }
};


YulFunctionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterYulFunctionDefinition(this);
	}
};

YulFunctionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitYulFunctionDefinition(this);
	}
};




SolidityParser.YulFunctionDefinitionContext = YulFunctionDefinitionContext;

SolidityParser.prototype.yulFunctionDefinition = function() {

    var localctx = new YulFunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, SolidityParser.RULE_yulFunctionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1180;
        this.match(SolidityParser.YulFunction);
        this.state = 1181;
        this.match(SolidityParser.YulIdentifier);
        this.state = 1182;
        this.match(SolidityParser.YulLParen);
        this.state = 1191;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.YulIdentifier) {
            this.state = 1183;
            localctx._YulIdentifier = this.match(SolidityParser.YulIdentifier);
            localctx.arguments.push(localctx._YulIdentifier);
            this.state = 1188;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.YulComma) {
                this.state = 1184;
                this.match(SolidityParser.YulComma);
                this.state = 1185;
                localctx._YulIdentifier = this.match(SolidityParser.YulIdentifier);
                localctx.arguments.push(localctx._YulIdentifier);
                this.state = 1190;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1193;
        this.match(SolidityParser.YulRParen);
        this.state = 1203;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.YulArrow) {
            this.state = 1194;
            this.match(SolidityParser.YulArrow);
            this.state = 1195;
            localctx._YulIdentifier = this.match(SolidityParser.YulIdentifier);
            localctx.returnParameters.push(localctx._YulIdentifier);
            this.state = 1200;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.YulComma) {
                this.state = 1196;
                this.match(SolidityParser.YulComma);
                this.state = 1197;
                localctx._YulIdentifier = this.match(SolidityParser.YulIdentifier);
                localctx.returnParameters.push(localctx._YulIdentifier);
                this.state = 1202;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1205;
        localctx.body = this.yulBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function YulPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_yulPath;
    return this;
}

YulPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YulPathContext.prototype.constructor = YulPathContext;

YulPathContext.prototype.YulIdentifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.YulIdentifier);
    } else {
        return this.getToken(SolidityParser.YulIdentifier, i);
    }
};


YulPathContext.prototype.YulPeriod = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.YulPeriod);
    } else {
        return this.getToken(SolidityParser.YulPeriod, i);
    }
};


YulPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterYulPath(this);
	}
};

YulPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitYulPath(this);
	}
};




SolidityParser.YulPathContext = YulPathContext;

SolidityParser.prototype.yulPath = function() {

    var localctx = new YulPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, SolidityParser.RULE_yulPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1207;
        this.match(SolidityParser.YulIdentifier);
        this.state = 1212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.YulPeriod) {
            this.state = 1208;
            this.match(SolidityParser.YulPeriod);
            this.state = 1209;
            this.match(SolidityParser.YulIdentifier);
            this.state = 1214;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function YulFunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_yulFunctionCall;
    return this;
}

YulFunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YulFunctionCallContext.prototype.constructor = YulFunctionCallContext;

YulFunctionCallContext.prototype.YulLParen = function() {
    return this.getToken(SolidityParser.YulLParen, 0);
};

YulFunctionCallContext.prototype.YulRParen = function() {
    return this.getToken(SolidityParser.YulRParen, 0);
};

YulFunctionCallContext.prototype.YulIdentifier = function() {
    return this.getToken(SolidityParser.YulIdentifier, 0);
};

YulFunctionCallContext.prototype.YulEVMBuiltin = function() {
    return this.getToken(SolidityParser.YulEVMBuiltin, 0);
};

YulFunctionCallContext.prototype.yulExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(YulExpressionContext);
    } else {
        return this.getTypedRuleContext(YulExpressionContext,i);
    }
};

YulFunctionCallContext.prototype.YulComma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.YulComma);
    } else {
        return this.getToken(SolidityParser.YulComma, i);
    }
};


YulFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterYulFunctionCall(this);
	}
};

YulFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitYulFunctionCall(this);
	}
};




SolidityParser.YulFunctionCallContext = YulFunctionCallContext;

SolidityParser.prototype.yulFunctionCall = function() {

    var localctx = new YulFunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, SolidityParser.RULE_yulFunctionCall);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1215;
        _la = this._input.LA(1);
        if(!(_la===SolidityParser.YulEVMBuiltin || _la===SolidityParser.YulIdentifier)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1216;
        this.match(SolidityParser.YulLParen);
        this.state = 1225;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (SolidityParser.YulFalse - 139)) | (1 << (SolidityParser.YulTrue - 139)) | (1 << (SolidityParser.YulEVMBuiltin - 139)) | (1 << (SolidityParser.YulIdentifier - 139)) | (1 << (SolidityParser.YulHexNumber - 139)) | (1 << (SolidityParser.YulDecimalNumber - 139)) | (1 << (SolidityParser.YulStringLiteral - 139)) | (1 << (SolidityParser.YulHexStringLiteral - 139)))) !== 0)) {
            this.state = 1217;
            this.yulExpression();
            this.state = 1222;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.YulComma) {
                this.state = 1218;
                this.match(SolidityParser.YulComma);
                this.state = 1219;
                this.yulExpression();
                this.state = 1224;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1227;
        this.match(SolidityParser.YulRParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function YulBooleanContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_yulBoolean;
    return this;
}

YulBooleanContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YulBooleanContext.prototype.constructor = YulBooleanContext;

YulBooleanContext.prototype.YulTrue = function() {
    return this.getToken(SolidityParser.YulTrue, 0);
};

YulBooleanContext.prototype.YulFalse = function() {
    return this.getToken(SolidityParser.YulFalse, 0);
};

YulBooleanContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterYulBoolean(this);
	}
};

YulBooleanContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitYulBoolean(this);
	}
};




SolidityParser.YulBooleanContext = YulBooleanContext;

SolidityParser.prototype.yulBoolean = function() {

    var localctx = new YulBooleanContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, SolidityParser.RULE_yulBoolean);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1229;
        _la = this._input.LA(1);
        if(!(_la===SolidityParser.YulFalse || _la===SolidityParser.YulTrue)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function YulLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_yulLiteral;
    return this;
}

YulLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YulLiteralContext.prototype.constructor = YulLiteralContext;

YulLiteralContext.prototype.YulDecimalNumber = function() {
    return this.getToken(SolidityParser.YulDecimalNumber, 0);
};

YulLiteralContext.prototype.YulStringLiteral = function() {
    return this.getToken(SolidityParser.YulStringLiteral, 0);
};

YulLiteralContext.prototype.YulHexNumber = function() {
    return this.getToken(SolidityParser.YulHexNumber, 0);
};

YulLiteralContext.prototype.yulBoolean = function() {
    return this.getTypedRuleContext(YulBooleanContext,0);
};

YulLiteralContext.prototype.YulHexStringLiteral = function() {
    return this.getToken(SolidityParser.YulHexStringLiteral, 0);
};

YulLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterYulLiteral(this);
	}
};

YulLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitYulLiteral(this);
	}
};




SolidityParser.YulLiteralContext = YulLiteralContext;

SolidityParser.prototype.yulLiteral = function() {

    var localctx = new YulLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, SolidityParser.RULE_yulLiteral);
    try {
        this.state = 1236;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.YulDecimalNumber:
            this.enterOuterAlt(localctx, 1);
            this.state = 1231;
            this.match(SolidityParser.YulDecimalNumber);
            break;
        case SolidityParser.YulStringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 1232;
            this.match(SolidityParser.YulStringLiteral);
            break;
        case SolidityParser.YulHexNumber:
            this.enterOuterAlt(localctx, 3);
            this.state = 1233;
            this.match(SolidityParser.YulHexNumber);
            break;
        case SolidityParser.YulFalse:
        case SolidityParser.YulTrue:
            this.enterOuterAlt(localctx, 4);
            this.state = 1234;
            this.yulBoolean();
            break;
        case SolidityParser.YulHexStringLiteral:
            this.enterOuterAlt(localctx, 5);
            this.state = 1235;
            this.match(SolidityParser.YulHexStringLiteral);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function YulExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_yulExpression;
    return this;
}

YulExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YulExpressionContext.prototype.constructor = YulExpressionContext;

YulExpressionContext.prototype.yulPath = function() {
    return this.getTypedRuleContext(YulPathContext,0);
};

YulExpressionContext.prototype.yulFunctionCall = function() {
    return this.getTypedRuleContext(YulFunctionCallContext,0);
};

YulExpressionContext.prototype.yulLiteral = function() {
    return this.getTypedRuleContext(YulLiteralContext,0);
};

YulExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.enterYulExpression(this);
	}
};

YulExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityParserListener ) {
        listener.exitYulExpression(this);
	}
};




SolidityParser.YulExpressionContext = YulExpressionContext;

SolidityParser.prototype.yulExpression = function() {

    var localctx = new YulExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, SolidityParser.RULE_yulExpression);
    try {
        this.state = 1241;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1238;
            this.yulPath();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1239;
            this.yulFunctionCall();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1240;
            this.yulLiteral();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


SolidityParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 19:
			return this.constructorDefinition_sempred(localctx, predIndex);
	case 22:
			return this.functionDefinition_sempred(localctx, predIndex);
	case 23:
			return this.modifierDefinition_sempred(localctx, predIndex);
	case 24:
			return this.fallbackFunctionDefinition_sempred(localctx, predIndex);
	case 25:
			return this.receiveFunctionDefinition_sempred(localctx, predIndex);
	case 30:
			return this.stateVariableDeclaration_sempred(localctx, predIndex);
	case 37:
			return this.typeName_sempred(localctx, predIndex);
	case 38:
			return this.elementaryTypeName_sempred(localctx, predIndex);
	case 39:
			return this.functionTypeName_sempred(localctx, predIndex);
	case 42:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

SolidityParser.prototype.constructorDefinition_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return !localctx.payableSet;
		case 1:
			return !localctx.visibilitySet;
		case 2:
			return !localctx.visibilitySet;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SolidityParser.prototype.functionDefinition_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return !localctx.visibilitySet;
		case 4:
			return !localctx.mutabilitySet;
		case 5:
			return !localctx.virtualSet;
		case 6:
			return !localctx.overrideSpecifierSet;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SolidityParser.prototype.modifierDefinition_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return !localctx.virtualSet;
		case 8:
			return !localctx.overrideSpecifierSet;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SolidityParser.prototype.fallbackFunctionDefinition_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return !localctx.visibilitySet;
		case 10:
			return !localctx.mutabilitySet;
		case 11:
			return !localctx.virtualSet;
		case 12:
			return !localctx.overrideSpecifierSet;
		case 13:
			return localctx.hasParameters;
		case 14:
			return !localctx.hasParameters;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SolidityParser.prototype.receiveFunctionDefinition_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 15:
			return !localctx.visibilitySet;
		case 16:
			return !localctx.mutabilitySet;
		case 17:
			return !localctx.virtualSet;
		case 18:
			return !localctx.overrideSpecifierSet;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SolidityParser.prototype.stateVariableDeclaration_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 19:
			return !localctx.visibilitySet;
		case 20:
			return !localctx.visibilitySet;
		case 21:
			return !localctx.visibilitySet;
		case 22:
			return !localctx.constantnessSet;
		case 23:
			return !localctx.overrideSpecifierSet;
		case 24:
			return !localctx.constantnessSet;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SolidityParser.prototype.typeName_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 25:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SolidityParser.prototype.elementaryTypeName_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 26:
			return localctx.allowAddressPayable;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SolidityParser.prototype.functionTypeName_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 27:
			return !localctx.visibilitySet;
		case 28:
			return !localctx.mutabilitySet;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SolidityParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 29:
			return this.precpred(this._ctx, 17);
		case 30:
			return this.precpred(this._ctx, 16);
		case 31:
			return this.precpred(this._ctx, 15);
		case 32:
			return this.precpred(this._ctx, 14);
		case 33:
			return this.precpred(this._ctx, 13);
		case 34:
			return this.precpred(this._ctx, 12);
		case 35:
			return this.precpred(this._ctx, 11);
		case 36:
			return this.precpred(this._ctx, 10);
		case 37:
			return this.precpred(this._ctx, 9);
		case 38:
			return this.precpred(this._ctx, 8);
		case 39:
			return this.precpred(this._ctx, 7);
		case 40:
			return this.precpred(this._ctx, 6);
		case 41:
			return this.precpred(this._ctx, 5);
		case 42:
			return this.precpred(this._ctx, 26);
		case 43:
			return this.precpred(this._ctx, 25);
		case 44:
			return this.precpred(this._ctx, 24);
		case 45:
			return this.precpred(this._ctx, 23);
		case 46:
			return this.precpred(this._ctx, 22);
		case 47:
			return this.precpred(this._ctx, 18);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.SolidityParser = SolidityParser;
